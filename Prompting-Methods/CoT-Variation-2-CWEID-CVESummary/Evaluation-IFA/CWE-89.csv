,Unnamed: 0.3,Unnamed: 0.2,Unnamed: 0.1,Unnamed: 0,Access Gained,Attack Origin,Authentication Required,Availability,CVE ID,CVE Page,CWE ID,Complexity,Confidentiality,Integrity,Known Exploits,Publish Date,Score,Summary,Update Date,Vulnerability Classification,add_lines,codeLink,commit_id,commit_message,del_lines,file_name,files_changed,func_after,func_before,lang,lines_after,lines_before,parentID,patch,project,project_after,project_before,vul,vul_func_with_fix,idx,primevul_func_before_fix,primevul_func_after_fix,C1_Description_of_Functionality_In_Context,C2_Description_of_Functionality_Generic,C3_Explanation_of_Vulnerability_In_Context,C4_Explanation_of_Vulnerability_Generic,C5_Explanation_Vulnerability_Fixed_In_Context,C6_Explanation_Vulnerability_Fixed_Generic,G1_Clarity_C3_C5,G2_Relevance_C3_C5,G3_Completeness_C3_C5,G4_Actionability_C3_C5,T1_Top_10_CWE_IDs,T2_Correctly_Found_CWE,T3_IFA
0,0,0,179697,179697,,Remote,Not required,Partial,CVE-2013-7262,https://www.cvedetails.com/cve/CVE-2013-7262/,CWE-89,Medium,Partial,Partial,,2014-01-05,6.8,"SQL injection vulnerability in the msPostGISLayerSetTimeFilter function in mappostgis.c in MapServer before 6.4.1, when a WMS-Time service is used, allows remote attackers to execute arbitrary SQL commands via a crafted string in a PostGIS TIME filter.",2015-10-08,Exec Code Sql ,5,https://github.com/mapserver/mapserver/commit/3a10f6b829297dae63492a8c63385044bc6953ed,3a10f6b829297dae63492a8c63385044bc6953ed,Fix potential SQL Injection with postgis TIME filters (#4834),0,mappostgis.c,"{""sha"": ""f24d9697a3447c78dc90d6fef84f3ad9bf21d43f"", ""filename"": ""mappostgis.c"", ""status"": ""modified"", ""additions"": 5, ""deletions"": 0, ""changes"": 5, ""blob_url"": ""https://github.com/mapserver/mapserver/blob/3a10f6b829297dae63492a8c63385044bc6953ed/mappostgis.c"", ""raw_url"": ""https://github.com/mapserver/mapserver/raw/3a10f6b829297dae63492a8c63385044bc6953ed/mappostgis.c"", ""contents_url"": ""https://api.github.com/repos/mapserver/mapserver/contents/mappostgis.c?ref=3a10f6b829297dae63492a8c63385044bc6953ed"", ""patch"": ""@@ -3212,6 +3212,11 @@ int msPostGISLayerSetTimeFilter(layerObj *lp, const char *timestring, const char\n   if (!lp || !timestring || !timefield)\n     return MS_FALSE;\n \n+  if( strchr(timestring,'\\'') || strchr(timestring, '\\\\') ) {\n+     msSetError(MS_MISCERR, \""Invalid time filter.\"", \""msPostGISLayerSetTimeFilter()\"");\n+     return MS_FALSE;\n+  }\n+\n   /* discrete time */\n   if (strstr(timestring, \"",\"") == NULL &&\n       strstr(timestring, \""/\"") == NULL) { /* discrete time */""}","int msPostGISLayerSetTimeFilter(layerObj *lp, const char *timestring, const char *timefield)
{
  char **atimes, **aranges = NULL;
  int numtimes=0,i=0,numranges=0;
  size_t buffer_size = 512;
  char buffer[512], bufferTmp[512];

  buffer[0] = '\0';
  bufferTmp[0] = '\0';

   if (!lp || !timestring || !timefield)
     return MS_FALSE;
 
  if( strchr(timestring,'\'') || strchr(timestring, '\\') ) {
     msSetError(MS_MISCERR, ""Invalid time filter."", ""msPostGISLayerSetTimeFilter()"");
     return MS_FALSE;
  }

   /* discrete time */
   if (strstr(timestring, "","") == NULL &&
       strstr(timestring, ""/"") == NULL) { /* discrete time */
    createPostgresTimeCompareSimple(timefield, timestring, buffer, buffer_size);
  } else {

    /* multiple times, or ranges */
    atimes = msStringSplit (timestring, ',', &numtimes);
    if (atimes == NULL || numtimes < 1)
      return MS_FALSE;

    strlcat(buffer, ""("", buffer_size);
    for(i=0; i<numtimes; i++) {
      if(i!=0) {
        strlcat(buffer, "" OR "", buffer_size);
      }
      strlcat(buffer, ""("", buffer_size);
      aranges = msStringSplit(atimes[i],  '/', &numranges);
      if(!aranges) return MS_FALSE;
      if(numranges == 1) {
        /* we don't have range, just a simple time */
        createPostgresTimeCompareSimple(timefield, atimes[i], bufferTmp, buffer_size);
        strlcat(buffer, bufferTmp, buffer_size);
      } else if(numranges == 2) {
        /* we have a range */
        createPostgresTimeCompareRange(timefield, aranges[0], aranges[1], bufferTmp, buffer_size);
        strlcat(buffer, bufferTmp, buffer_size);
      } else {
        return MS_FALSE;
      }
      msFreeCharArray(aranges, numranges);
      strlcat(buffer, "")"", buffer_size);
    }
    strlcat(buffer, "")"", buffer_size);
    msFreeCharArray(atimes, numtimes);
  }
  if(!*buffer) {
    return MS_FALSE;
  }
  if(lp->filteritem) free(lp->filteritem);
  lp->filteritem = msStrdup(timefield);
  if (&lp->filter) {
    /* if the filter is set and it's a string type, concatenate it with
       the time. If not just free it */
    if (lp->filter.type == MS_EXPRESSION) {
      snprintf(bufferTmp, buffer_size, ""(%s) and %s"", lp->filter.string, buffer);
      loadExpressionString(&lp->filter, bufferTmp);
    } else {
      freeExpression(&lp->filter);
      loadExpressionString(&lp->filter, buffer);
    }
  }


  return MS_TRUE;
}
","int msPostGISLayerSetTimeFilter(layerObj *lp, const char *timestring, const char *timefield)
{
  char **atimes, **aranges = NULL;
  int numtimes=0,i=0,numranges=0;
  size_t buffer_size = 512;
  char buffer[512], bufferTmp[512];

  buffer[0] = '\0';
  bufferTmp[0] = '\0';

   if (!lp || !timestring || !timefield)
     return MS_FALSE;
 
   /* discrete time */
   if (strstr(timestring, "","") == NULL &&
       strstr(timestring, ""/"") == NULL) { /* discrete time */
    createPostgresTimeCompareSimple(timefield, timestring, buffer, buffer_size);
  } else {

    /* multiple times, or ranges */
    atimes = msStringSplit (timestring, ',', &numtimes);
    if (atimes == NULL || numtimes < 1)
      return MS_FALSE;

    strlcat(buffer, ""("", buffer_size);
    for(i=0; i<numtimes; i++) {
      if(i!=0) {
        strlcat(buffer, "" OR "", buffer_size);
      }
      strlcat(buffer, ""("", buffer_size);
      aranges = msStringSplit(atimes[i],  '/', &numranges);
      if(!aranges) return MS_FALSE;
      if(numranges == 1) {
        /* we don't have range, just a simple time */
        createPostgresTimeCompareSimple(timefield, atimes[i], bufferTmp, buffer_size);
        strlcat(buffer, bufferTmp, buffer_size);
      } else if(numranges == 2) {
        /* we have a range */
        createPostgresTimeCompareRange(timefield, aranges[0], aranges[1], bufferTmp, buffer_size);
        strlcat(buffer, bufferTmp, buffer_size);
      } else {
        return MS_FALSE;
      }
      msFreeCharArray(aranges, numranges);
      strlcat(buffer, "")"", buffer_size);
    }
    strlcat(buffer, "")"", buffer_size);
    msFreeCharArray(atimes, numtimes);
  }
  if(!*buffer) {
    return MS_FALSE;
  }
  if(lp->filteritem) free(lp->filteritem);
  lp->filteritem = msStrdup(timefield);
  if (&lp->filter) {
    /* if the filter is set and it's a string type, concatenate it with
       the time. If not just free it */
    if (lp->filter.type == MS_EXPRESSION) {
      snprintf(bufferTmp, buffer_size, ""(%s) and %s"", lp->filter.string, buffer);
      loadExpressionString(&lp->filter, bufferTmp);
    } else {
      freeExpression(&lp->filter);
      loadExpressionString(&lp->filter, buffer);
    }
  }


  return MS_TRUE;
}
",C,"  if( strchr(timestring,'\'') || strchr(timestring, '\\') ) {
     msSetError(MS_MISCERR, ""Invalid time filter."", ""msPostGISLayerSetTimeFilter()"");
     return MS_FALSE;
  }

",,,"@@ -3212,6 +3212,11 @@ int msPostGISLayerSetTimeFilter(layerObj *lp, const char *timestring, const char
   if (!lp || !timestring || !timefield)
     return MS_FALSE;
 
+  if( strchr(timestring,'\'') || strchr(timestring, '\\') ) {
+     msSetError(MS_MISCERR, ""Invalid time filter."", ""msPostGISLayerSetTimeFilter()"");
+     return MS_FALSE;
+  }
+
   /* discrete time */
   if (strstr(timestring, "","") == NULL &&
       strstr(timestring, ""/"") == NULL) { /* discrete time */",mapserver,3a10f6b829297dae63492a8c63385044bc6953ed,e83a0cb57e554884aaf37cbae330602c726d4868,1,"int msPostGISLayerSetTimeFilter(layerObj *lp, const char *timestring, const char *timefield)
{
  char **atimes, **aranges = NULL;
  int numtimes=0,i=0,numranges=0;
  size_t buffer_size = 512;
  char buffer[512], bufferTmp[512];

  buffer[0] = '\0';
  bufferTmp[0] = '\0';

   if (!lp || !timestring || !timefield)
     return MS_FALSE;
 
//fix_flaw_line_below:
//  if( strchr(timestring,'\'') || strchr(timestring, '\\') ) {
//fix_flaw_line_below:
//     msSetError(MS_MISCERR, ""Invalid time filter."", ""msPostGISLayerSetTimeFilter()"");
//fix_flaw_line_below:
//     return MS_FALSE;
//fix_flaw_line_below:
//  }
//fix_flaw_line_below:
//
   /* discrete time */
   if (strstr(timestring, "","") == NULL &&
       strstr(timestring, ""/"") == NULL) { /* discrete time */
    createPostgresTimeCompareSimple(timefield, timestring, buffer, buffer_size);
  } else {

    /* multiple times, or ranges */
    atimes = msStringSplit (timestring, ',', &numtimes);
    if (atimes == NULL || numtimes < 1)
      return MS_FALSE;

    strlcat(buffer, ""("", buffer_size);
    for(i=0; i<numtimes; i++) {
      if(i!=0) {
        strlcat(buffer, "" OR "", buffer_size);
      }
      strlcat(buffer, ""("", buffer_size);
      aranges = msStringSplit(atimes[i],  '/', &numranges);
      if(!aranges) return MS_FALSE;
      if(numranges == 1) {
        /* we don't have range, just a simple time */
        createPostgresTimeCompareSimple(timefield, atimes[i], bufferTmp, buffer_size);
        strlcat(buffer, bufferTmp, buffer_size);
      } else if(numranges == 2) {
        /* we have a range */
        createPostgresTimeCompareRange(timefield, aranges[0], aranges[1], bufferTmp, buffer_size);
        strlcat(buffer, bufferTmp, buffer_size);
      } else {
        return MS_FALSE;
      }
      msFreeCharArray(aranges, numranges);
      strlcat(buffer, "")"", buffer_size);
    }
    strlcat(buffer, "")"", buffer_size);
    msFreeCharArray(atimes, numtimes);
  }
  if(!*buffer) {
    return MS_FALSE;
  }
  if(lp->filteritem) free(lp->filteritem);
  lp->filteritem = msStrdup(timefield);
  if (&lp->filter) {
    /* if the filter is set and it's a string type, concatenate it with
       the time. If not just free it */
    if (lp->filter.type == MS_EXPRESSION) {
      snprintf(bufferTmp, buffer_size, ""(%s) and %s"", lp->filter.string, buffer);
      loadExpressionString(&lp->filter, bufferTmp);
    } else {
      freeExpression(&lp->filter);
      loadExpressionString(&lp->filter, buffer);
    }
  }


  return MS_TRUE;
}
",179697,"int msPostGISLayerSetTimeFilter(layerObj *lp, const char *timestring, const char *timefield)
{
  char **atimes, **aranges = NULL;
  int numtimes=0,i=0,numranges=0;
  size_t buffer_size = 512;
  char buffer[512], bufferTmp[512];

  buffer[0] = '\0';
  bufferTmp[0] = '\0';

   if (!lp || !timestring || !timefield)
     return MS_FALSE;
 
   /* discrete time */
   if (strstr(timestring, "","") == NULL &&
       strstr(timestring, ""/"") == NULL) { /* discrete time */
    createPostgresTimeCompareSimple(timefield, timestring, buffer, buffer_size);
  } else {

    /* multiple times, or ranges */
    atimes = msStringSplit (timestring, ',', &numtimes);
    if (atimes == NULL || numtimes < 1)
      return MS_FALSE;

    strlcat(buffer, ""("", buffer_size);
    for(i=0; i<numtimes; i++) {
      if(i!=0) {
        strlcat(buffer, "" OR "", buffer_size);
      }
      strlcat(buffer, ""("", buffer_size);
      aranges = msStringSplit(atimes[i],  '/', &numranges);
      if(!aranges) return MS_FALSE;
      if(numranges == 1) {
        /* we don't have range, just a simple time */
        createPostgresTimeCompareSimple(timefield, atimes[i], bufferTmp, buffer_size);
        strlcat(buffer, bufferTmp, buffer_size);
      } else if(numranges == 2) {
        /* we have a range */
        createPostgresTimeCompareRange(timefield, aranges[0], aranges[1], bufferTmp, buffer_size);
        strlcat(buffer, bufferTmp, buffer_size);
      } else {
        return MS_FALSE;
      }
      msFreeCharArray(aranges, numranges);
      strlcat(buffer, "")"", buffer_size);
    }
    strlcat(buffer, "")"", buffer_size);
    msFreeCharArray(atimes, numtimes);
  }
  if(!*buffer) {
    return MS_FALSE;
  }
  if(lp->filteritem) free(lp->filteritem);
  lp->filteritem = msStrdup(timefield);
  if (&lp->filter) {
    /* if the filter is set and it's a string type, concatenate it with
       the time. If not just free it */
    if (lp->filter.type == MS_EXPRESSION) {
      snprintf(bufferTmp, buffer_size, ""(%s) and %s"", lp->filter.string, buffer);
      loadExpressionString(&lp->filter, bufferTmp);
    } else {
      freeExpression(&lp->filter);
      loadExpressionString(&lp->filter, buffer);
    }
  }


  return MS_TRUE;
}
","int msPostGISLayerSetTimeFilter(layerObj *lp, const char *timestring, const char *timefield)
{
  char **atimes, **aranges = NULL;
  int numtimes=0,i=0,numranges=0;
  size_t buffer_size = 512;
  char buffer[512], bufferTmp[512];

  buffer[0] = '\0';
  bufferTmp[0] = '\0';

   if (!lp || !timestring || !timefield)
     return MS_FALSE;
 
  if( strchr(timestring,'\'') || strchr(timestring, '\\') ) {
     msSetError(MS_MISCERR, ""Invalid time filter."", ""msPostGISLayerSetTimeFilter()"");
     return MS_FALSE;
  }

   /* discrete time */
   if (strstr(timestring, "","") == NULL &&
       strstr(timestring, ""/"") == NULL) { /* discrete time */
    createPostgresTimeCompareSimple(timefield, timestring, buffer, buffer_size);
  } else {

    /* multiple times, or ranges */
    atimes = msStringSplit (timestring, ',', &numtimes);
    if (atimes == NULL || numtimes < 1)
      return MS_FALSE;

    strlcat(buffer, ""("", buffer_size);
    for(i=0; i<numtimes; i++) {
      if(i!=0) {
        strlcat(buffer, "" OR "", buffer_size);
      }
      strlcat(buffer, ""("", buffer_size);
      aranges = msStringSplit(atimes[i],  '/', &numranges);
      if(!aranges) return MS_FALSE;
      if(numranges == 1) {
        /* we don't have range, just a simple time */
        createPostgresTimeCompareSimple(timefield, atimes[i], bufferTmp, buffer_size);
        strlcat(buffer, bufferTmp, buffer_size);
      } else if(numranges == 2) {
        /* we have a range */
        createPostgresTimeCompareRange(timefield, aranges[0], aranges[1], bufferTmp, buffer_size);
        strlcat(buffer, bufferTmp, buffer_size);
      } else {
        return MS_FALSE;
      }
      msFreeCharArray(aranges, numranges);
      strlcat(buffer, "")"", buffer_size);
    }
    strlcat(buffer, "")"", buffer_size);
    msFreeCharArray(atimes, numtimes);
  }
  if(!*buffer) {
    return MS_FALSE;
  }
  if(lp->filteritem) free(lp->filteritem);
  lp->filteritem = msStrdup(timefield);
  if (&lp->filter) {
    /* if the filter is set and it's a string type, concatenate it with
       the time. If not just free it */
    if (lp->filter.type == MS_EXPRESSION) {
      snprintf(bufferTmp, buffer_size, ""(%s) and %s"", lp->filter.string, buffer);
      loadExpressionString(&lp->filter, bufferTmp);
    } else {
      freeExpression(&lp->filter);
      loadExpressionString(&lp->filter, buffer);
    }
  }


  return MS_TRUE;
}
","The `msPostGISLayerSetTimeFilter` function sets a time filter for a given layer in a PostGIS context. It takes a layer object, a time string, and a time field as inputs. The function first checks for valid inputs and then determines if the time string represents a discrete time or multiple times/ranges. It constructs a SQL-compatible filter string based on the input, utilizing helper functions to handle simple times and ranges. Finally, it updates the layer's filter item and expression, ensuring that the new time filter is correctly integrated with any existing filters, and returns a success status.","The code defines a function that applies a time filter to a specified layer in a spatial database. It begins by validating the input parameters and determining whether the provided time string represents a single time or multiple times and ranges. Based on this assessment, it constructs a SQL-compatible filter string. The function then updates the layer's filter settings, ensuring that any existing filters are appropriately combined with the new time filter. Finally, it returns a success status, indicating whether the filter was successfully set or if any errors occurred during the process.","The vulnerability in the original code stemmed from the lack of input validation for the `timestring` parameter, allowing attackers to inject malicious SQL commands through specially crafted input, leading to SQL injection (CWE-89). The fixed code addresses this issue by introducing a check for the presence of single quotes and backslashes in the `timestring`. If either character is found, an error is set, and the function returns early, preventing potentially harmful input from being processed further. This validation effectively mitigates the risk of SQL injection by ensuring that only safe input is used in constructing SQL queries.","The vulnerability in the original code was due to insufficient input validation, allowing attackers to inject malicious SQL commands through a specially crafted time filter string, which could lead to arbitrary SQL execution. This SQL injection risk arose because the code did not check for potentially harmful characters that could alter the intended SQL query. The fixed code addresses this vulnerability by implementing a validation step that checks for the presence of specific characters associated with SQL injection attempts. If such characters are detected, the function terminates early, effectively preventing the execution of unsafe input and enhancing overall security.","The vulnerability was fixed by adding a validation check for the `timestring` parameter to detect the presence of single quotes and backslashes, which are commonly used in SQL injection attacks. In the updated code, the condition `if( strchr(timestring,'\'') || strchr(timestring, '\\') )` is introduced to identify these characters. If either is found, the function sets an error using `msSetError` and returns early with a failure status. This proactive validation step ensures that potentially harmful input is rejected before it can be processed further, thereby mitigating the risk of SQL injection.","The vulnerability was fixed by implementing a validation step that checks the input for potentially dangerous characters commonly associated with SQL injection attacks. This new check identifies the presence of specific characters that could allow an attacker to manipulate SQL queries. If any of these characters are detected, the function immediately sets an error and terminates early, preventing further processing of the input. This proactive approach ensures that only safe and valid input is used in constructing SQL queries, significantly reducing the risk of SQL injection and enhancing the overall security of the application.","5,5","5,5","4,4","4,5","CWE-89, CWE-943, CWE-564, CWE-20, CWE-74, CWE-116, CWE-707, CWE-565, CWE-444, CWE-471",Y,1.0
1,1,1,182886,182886,,Remote,Not required,Partial,CVE-2019-10664,https://www.cvedetails.com/cve/CVE-2019-10664/,CWE-89,Low,Partial,Partial,,2019-03-31,7.5,Domoticz before 4.10578 allows SQL Injection via the idx parameter in CWebServer::GetFloorplanImage in WebServer.cpp.,2019-05-03,Sql ,1,https://github.com/domoticz/domoticz/commit/ee70db46f81afa582c96b887b73bcd2a86feda00,ee70db46f81afa582c96b887b73bcd2a86feda00,Fixed possible SQL Injection Vulnerability (Thanks to Fabio Carretto!),1,main/WebServer.cpp,"{""sha"": ""ece2155fd2133e0666889f88a3e332ad42917a4b"", ""filename"": ""main/WebServer.cpp"", ""status"": ""modified"", ""additions"": 1, ""deletions"": 1, ""changes"": 2, ""blob_url"": ""https://github.com/domoticz/domoticz/blob/ee70db46f81afa582c96b887b73bcd2a86feda00/main/WebServer.cpp"", ""raw_url"": ""https://github.com/domoticz/domoticz/raw/ee70db46f81afa582c96b887b73bcd2a86feda00/main/WebServer.cpp"", ""contents_url"": ""https://api.github.com/repos/domoticz/domoticz/contents/main/WebServer.cpp?ref=ee70db46f81afa582c96b887b73bcd2a86feda00"", ""patch"": ""@@ -10772,7 +10772,7 @@ namespace http {\n \t\t\t\treturn;\n \t\t\t}\n \t\t\tstd::vector<std::vector<std::string> > result;\n-\t\t\tresult = m_sql.safe_queryBlob(\""SELECT Image FROM Floorplans WHERE ID=%s\"", idx.c_str());\n+\t\t\tresult = m_sql.safe_queryBlob(\""SELECT Image FROM Floorplans WHERE ID=%d\"", atol(idx.c_str()));\n \t\t\tif (result.empty())\n \t\t\t\treturn;\n \t\t\treply::set_content(&rep, result[0][0].begin(), result[0][0].end());""}","		void CWebServer::GetFloorplanImage(WebEmSession & session, const request& req, reply & rep)
		{
			std::string idx = request::findValue(&req, ""idx"");
			if (idx == """") {
 				return;
 			}
 			std::vector<std::vector<std::string> > result;
			result = m_sql.safe_queryBlob(""SELECT Image FROM Floorplans WHERE ID=%d"", atol(idx.c_str()));
 			if (result.empty())
 				return;
 			reply::set_content(&rep, result[0][0].begin(), result[0][0].end());
			std::string oname = ""floorplan"";
			if (result[0][0].size() > 10)
			{
				if (result[0][0][0] == 'P')
					oname += "".png"";
				else if (result[0][0][0] == -1)
					oname += "".jpg"";
				else if (result[0][0][0] == 'B')
					oname += "".bmp"";
				else if (result[0][0][0] == 'G')
					oname += "".gif"";
			}
			reply::add_header_attachment(&rep, oname);
		}
","		void CWebServer::GetFloorplanImage(WebEmSession & session, const request& req, reply & rep)
		{
			std::string idx = request::findValue(&req, ""idx"");
			if (idx == """") {
 				return;
 			}
 			std::vector<std::vector<std::string> > result;
			result = m_sql.safe_queryBlob(""SELECT Image FROM Floorplans WHERE ID=%s"", idx.c_str());
 			if (result.empty())
 				return;
 			reply::set_content(&rep, result[0][0].begin(), result[0][0].end());
			std::string oname = ""floorplan"";
			if (result[0][0].size() > 10)
			{
				if (result[0][0][0] == 'P')
					oname += "".png"";
				else if (result[0][0][0] == -1)
					oname += "".jpg"";
				else if (result[0][0][0] == 'B')
					oname += "".bmp"";
				else if (result[0][0][0] == 'G')
					oname += "".gif"";
			}
			reply::add_header_attachment(&rep, oname);
		}
",C,"			result = m_sql.safe_queryBlob(""SELECT Image FROM Floorplans WHERE ID=%d"", atol(idx.c_str()));
","			result = m_sql.safe_queryBlob(""SELECT Image FROM Floorplans WHERE ID=%s"", idx.c_str());
",,"@@ -10772,7 +10772,7 @@ namespace http {
 				return;
 			}
 			std::vector<std::vector<std::string> > result;
-			result = m_sql.safe_queryBlob(""SELECT Image FROM Floorplans WHERE ID=%s"", idx.c_str());
+			result = m_sql.safe_queryBlob(""SELECT Image FROM Floorplans WHERE ID=%d"", atol(idx.c_str()));
 			if (result.empty())
 				return;
 			reply::set_content(&rep, result[0][0].begin(), result[0][0].end());",domoticz,ee70db46f81afa582c96b887b73bcd2a86feda00,9c9319ace1f0a76b12bf349d62f455a506d286df,1,"		void CWebServer::GetFloorplanImage(WebEmSession & session, const request& req, reply & rep)
		{
			std::string idx = request::findValue(&req, ""idx"");
			if (idx == """") {
 				return;
 			}
 			std::vector<std::vector<std::string> > result;
//flaw_line_below:
			result = m_sql.safe_queryBlob(""SELECT Image FROM Floorplans WHERE ID=%s"", idx.c_str());
//fix_flaw_line_below:
//			result = m_sql.safe_queryBlob(""SELECT Image FROM Floorplans WHERE ID=%d"", atol(idx.c_str()));
 			if (result.empty())
 				return;
 			reply::set_content(&rep, result[0][0].begin(), result[0][0].end());
			std::string oname = ""floorplan"";
			if (result[0][0].size() > 10)
			{
				if (result[0][0][0] == 'P')
					oname += "".png"";
				else if (result[0][0][0] == -1)
					oname += "".jpg"";
				else if (result[0][0][0] == 'B')
					oname += "".bmp"";
				else if (result[0][0][0] == 'G')
					oname += "".gif"";
			}
			reply::add_header_attachment(&rep, oname);
		}
",182886,"		void CWebServer::GetFloorplanImage(WebEmSession & session, const request& req, reply & rep)
		{
			std::string idx = request::findValue(&req, ""idx"");
			if (idx == """") {
 				return;
 			}
 			std::vector<std::vector<std::string> > result;
			result = m_sql.safe_queryBlob(""SELECT Image FROM Floorplans WHERE ID=%s"", idx.c_str());
 			if (result.empty())
 				return;
 			reply::set_content(&rep, result[0][0].begin(), result[0][0].end());
			std::string oname = ""floorplan"";
			if (result[0][0].size() > 10)
			{
				if (result[0][0][0] == 'P')
					oname += "".png"";
				else if (result[0][0][0] == -1)
					oname += "".jpg"";
				else if (result[0][0][0] == 'B')
					oname += "".bmp"";
				else if (result[0][0][0] == 'G')
					oname += "".gif"";
			}
			reply::add_header_attachment(&rep, oname);
		}
","		void CWebServer::GetFloorplanImage(WebEmSession & session, const request& req, reply & rep)
		{
			std::string idx = request::findValue(&req, ""idx"");
			if (idx == """") {
 				return;
 			}
 			std::vector<std::vector<std::string> > result;
			result = m_sql.safe_queryBlob(""SELECT Image FROM Floorplans WHERE ID=%d"", atol(idx.c_str()));
 			if (result.empty())
 				return;
 			reply::set_content(&rep, result[0][0].begin(), result[0][0].end());
			std::string oname = ""floorplan"";
			if (result[0][0].size() > 10)
			{
				if (result[0][0][0] == 'P')
					oname += "".png"";
				else if (result[0][0][0] == -1)
					oname += "".jpg"";
				else if (result[0][0][0] == 'B')
					oname += "".bmp"";
				else if (result[0][0][0] == 'G')
					oname += "".gif"";
			}
			reply::add_header_attachment(&rep, oname);
		}
","The provided code defines a method `GetFloorplanImage` within the `CWebServer` class, which retrieves and serves a floorplan image based on a given request. It first extracts an index (`idx`) from the request; if absent, the function exits. It then queries a database for the corresponding image using the index. If an image is found, it sets the content of the reply with the image data. The method also determines the appropriate file extension (PNG, JPG, BMP, or GIF) based on the image's first byte and adds a header to the reply for file attachment, naming it ""floorplan"" with the correct extension.","The code defines a method that retrieves and serves an image of a floorplan based on a specified identifier from a web request. It first checks for the presence of the identifier and exits if it is not found. Upon successfully locating the image in a database, the method sets the response content to the image data. It also determines the appropriate file format based on the image's initial byte and appends a header to the response to facilitate file downloading, naming the file ""floorplan"" with the corresponding extension based on the identified format.","The vulnerability in the original code stemmed from the direct use of the `idx` parameter in an SQL query, which allowed for SQL injection attacks by manipulating the input. Specifically, the code used `idx` in the query string without proper validation or sanitization, making it susceptible to malicious input. In the fixed code, the vulnerability was addressed by converting `idx` to a long integer using `atol(idx.c_str())` before including it in the SQL query. This change ensures that only numeric values are processed, effectively mitigating the risk of SQL injection by preventing arbitrary SQL code execution.","The vulnerability in the original code was due to the direct incorporation of user input into an SQL query, which allowed attackers to manipulate the input and execute arbitrary SQL commands, leading to SQL injection. This risk arose from the lack of input validation or sanitization for the parameter used in the query. The fixed code addressed this issue by converting the user input to a numeric type before using it in the SQL statement, ensuring that only valid numeric values are processed. This change effectively mitigated the risk of SQL injection by preventing malicious input from altering the query structure.","The vulnerability was fixed by modifying how the `idx` parameter is handled before it is used in the SQL query. In the original code, `idx` was directly included in the query string, which allowed for potential SQL injection. In the revised code, `idx` is converted to a long integer using `atol(idx.c_str())` before being passed to the `safe_queryBlob` function. This ensures that only numeric values are processed, effectively preventing any malicious input from being executed as part of the SQL command, thereby mitigating the risk of SQL injection attacks.","The vulnerability was fixed by changing the way user input is processed before it is used in the SQL query. Instead of directly incorporating the user-provided parameter into the query string, the input is first converted to a numeric type. This conversion ensures that only valid numeric values are accepted, effectively preventing any non-numeric or malicious input from being executed as part of the SQL command. By implementing this validation step, the risk of SQL injection attacks is significantly reduced, enhancing the overall security of the application.","5,5","5,5","5,5","4,4","CWE-89, CWE-20, CWE-943, CWE-74, CWE-116, CWE-707, CWE-99, CWE-564, CWE-77, CWE-78",Y,1.0
