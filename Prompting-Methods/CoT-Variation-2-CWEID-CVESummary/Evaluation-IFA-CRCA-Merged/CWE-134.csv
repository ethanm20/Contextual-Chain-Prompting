,Unnamed: 0.2,Unnamed: 0.1,Unnamed: 0,Access Gained,Attack Origin,Authentication Required,Availability,CVE ID,CVE Page,CWE ID,Complexity,Confidentiality,Integrity,Known Exploits,Publish Date,Score,Summary,Update Date,Vulnerability Classification,add_lines,codeLink,commit_id,commit_message,del_lines,file_name,files_changed,func_after,func_before,lang,lines_after,lines_before,parentID,patch,project,project_after,project_before,vul,vul_func_with_fix,idx,primevul_func_before_fix,primevul_func_after_fix,C1_Description_of_Functionality_In_Context,C2_Description_of_Functionality_Generic,C3_Explanation_of_Vulnerability_In_Context,C4_Explanation_of_Vulnerability_Generic,C5_Explanation_Vulnerability_Fixed_In_Context,C6_Explanation_Vulnerability_Fixed_Generic,T1_Top_10_CWE_IDs,T2_Correctly_Found_CWE,T3_IFA,G1_Clarity_C3_C5,G2_Relevance_C3_C5,G3_Completeness_C3_C5,G4_Actionability_C3_C5
0,0,180703,180703,,Remote,Not required,Complete,CVE-2015-8617,https://www.cvedetails.com/cve/CVE-2015-8617/,CWE-134,Low,Complete,Complete,,2016-01-19,10.0,"Format string vulnerability in the zend_throw_or_error function in Zend/zend_execute_API.c in PHP 7.x before 7.0.1 allows remote attackers to execute arbitrary code via format string specifiers in a string that is misused as a class name, leading to incorrect error handling.",2017-09-09,Exec Code ,1,https://github.com/php/php-src/commit/b101a6bbd4f2181c360bd38e7683df4a03cba83e,b101a6bbd4f2181c360bd38e7683df4a03cba83e,Use format string,1,Zend/zend_execute_API.c,"{""sha"": ""fdffed34b275775084eeaf943a12c992edac2e0c"", ""filename"": ""Zend/zend_execute_API.c"", ""status"": ""modified"", ""additions"": 1, ""deletions"": 1, ""changes"": 2, ""blob_url"": ""https://github.com/php/php-src/blob/b101a6bbd4f2181c360bd38e7683df4a03cba83e/Zend/zend_execute_API.c"", ""raw_url"": ""https://github.com/php/php-src/raw/b101a6bbd4f2181c360bd38e7683df4a03cba83e/Zend/zend_execute_API.c"", ""contents_url"": ""https://api.github.com/repos/php/php-src/contents/Zend/zend_execute_API.c?ref=b101a6bbd4f2181c360bd38e7683df4a03cba83e"", ""patch"": ""@@ -218,7 +218,7 @@ static void zend_throw_or_error(int fetch_type, zend_class_entry *exception_ce,\n \tzend_vspprintf(&message, 0, format, va);\n \n \tif (fetch_type & ZEND_FETCH_CLASS_EXCEPTION) {\n-\t\tzend_throw_error(exception_ce, message);\n+\t\tzend_throw_error(exception_ce, \""%s\"", message);\n \t} else {\n \t\tzend_error(E_ERROR, \""%s\"", message);\n \t}""}","static void zend_throw_or_error(int fetch_type, zend_class_entry *exception_ce, const char *format, ...) /* {{{ */
{
	va_list va;
	char *message = NULL;

	va_start(va, format);
 	zend_vspprintf(&message, 0, format, va);
 
 	if (fetch_type & ZEND_FETCH_CLASS_EXCEPTION) {
		zend_throw_error(exception_ce, ""%s"", message);
 	} else {
 		zend_error(E_ERROR, ""%s"", message);
 	}

	efree(message);
	va_end(va);
}
/* }}} */
","static void zend_throw_or_error(int fetch_type, zend_class_entry *exception_ce, const char *format, ...) /* {{{ */
{
	va_list va;
	char *message = NULL;

	va_start(va, format);
 	zend_vspprintf(&message, 0, format, va);
 
 	if (fetch_type & ZEND_FETCH_CLASS_EXCEPTION) {
		zend_throw_error(exception_ce, message);
 	} else {
 		zend_error(E_ERROR, ""%s"", message);
 	}

	efree(message);
	va_end(va);
}
/* }}} */
",C,"		zend_throw_error(exception_ce, ""%s"", message);
","		zend_throw_error(exception_ce, message);
",,"@@ -218,7 +218,7 @@ static void zend_throw_or_error(int fetch_type, zend_class_entry *exception_ce,
 	zend_vspprintf(&message, 0, format, va);
 
 	if (fetch_type & ZEND_FETCH_CLASS_EXCEPTION) {
-		zend_throw_error(exception_ce, message);
+		zend_throw_error(exception_ce, ""%s"", message);
 	} else {
 		zend_error(E_ERROR, ""%s"", message);
 	}",php-src,b101a6bbd4f2181c360bd38e7683df4a03cba83e,e0691d27d5b83122c78b9a3c4e2cd0aadf57fcb7,1,"static void zend_throw_or_error(int fetch_type, zend_class_entry *exception_ce, const char *format, ...) /* {{{ */
{
	va_list va;
	char *message = NULL;

	va_start(va, format);
 	zend_vspprintf(&message, 0, format, va);
 
 	if (fetch_type & ZEND_FETCH_CLASS_EXCEPTION) {
//flaw_line_below:
		zend_throw_error(exception_ce, message);
//fix_flaw_line_below:
//		zend_throw_error(exception_ce, ""%s"", message);
 	} else {
 		zend_error(E_ERROR, ""%s"", message);
 	}

	efree(message);
	va_end(va);
}
/* }}} */
",180703,"static void zend_throw_or_error(int fetch_type, zend_class_entry *exception_ce, const char *format, ...) /* {{{ */
{
	va_list va;
	char *message = NULL;

	va_start(va, format);
	zend_vspprintf(&message, 0, format, va);

	if (fetch_type & ZEND_FETCH_CLASS_EXCEPTION) {
		zend_throw_error(exception_ce, message);
	} else {
		zend_error(E_ERROR, ""%s"", message);
	}

	efree(message);
	va_end(va);
}","static void zend_throw_or_error(int fetch_type, zend_class_entry *exception_ce, const char *format, ...) /* {{{ */
{
	va_list va;
	char *message = NULL;

	va_start(va, format);
 	zend_vspprintf(&message, 0, format, va);
 
 	if (fetch_type & ZEND_FETCH_CLASS_EXCEPTION) {
		zend_throw_error(exception_ce, ""%s"", message);
 	} else {
 		zend_error(E_ERROR, ""%s"", message);
 	}

	efree(message);
	va_end(va);
}
/* }}} */
","The `zend_throw_or_error` function is designed to handle error reporting and exception throwing in a Zend-based environment. It takes a `fetch_type` to determine the action to perform, an `exception_ce` representing the class of the exception, and a formatted string `format` with variable arguments for the error message. The function constructs the error message using `zend_vspprintf`, then checks the `fetch_type`: if it includes `ZEND_FETCH_CLASS_EXCEPTION`, it throws the specified exception; otherwise, it triggers a fatal error. Finally, it frees the allocated message memory and ends the variable argument list.","The provided function is responsible for managing error handling and exception throwing within a specific programming framework. It accepts parameters to determine the type of error handling required and a formatted message to describe the error. The function constructs the error message and checks the specified type to decide whether to throw an exception or trigger a fatal error. After performing the appropriate action based on the type, it ensures that any allocated memory for the error message is properly released, maintaining efficient memory management and preventing leaks.","The vulnerability in the original code arises from the improper handling of format strings, allowing attackers to exploit format string specifiers in the `format` argument, potentially leading to arbitrary code execution. This occurs because the `zend_throw_error` and `zend_error` functions directly use the user-controlled `message` without proper validation. In the fixed code, the vulnerability is mitigated by ensuring that the `message` is passed as a formatted string to `zend_throw_error` and `zend_error` using the format specifier ""%s"", which prevents the execution of unintended format string operations and enhances security by controlling how the message is processed.","The vulnerability stems from improper handling of user-controlled input, allowing attackers to exploit format string specifiers, which could lead to arbitrary code execution. This occurs when the input is directly used in error handling functions without adequate validation, enabling attackers to manipulate the format string behavior. The fix addresses this issue by ensuring that the input is treated as a simple string, using a specific format specifier to control how the message is processed. This change prevents unintended format string operations, thereby enhancing security and ensuring that error handling behaves as intended without executing arbitrary code.","The vulnerability was fixed by modifying how the `message` is passed to the error handling functions. In the original code, the `message` was directly used in `zend_throw_error` and `zend_error`, which allowed for format string exploitation. The updated code now uses the format specifier ""%s"" when calling `zend_throw_error` and `zend_error`, ensuring that the `message` is treated as a simple string rather than allowing any format specifiers to be processed. This change effectively mitigates the risk of arbitrary code execution by controlling the input handling and preventing unintended format string operations.","The vulnerability was fixed by implementing stricter control over how user input is processed in error handling. Instead of directly using the user-controlled input in error reporting functions, the updated code ensures that the input is treated as a simple string by applying a specific format specifier. This change prevents the execution of unintended format string operations, effectively mitigating the risk of arbitrary code execution. By enforcing this controlled handling of the input, the code now safely manages error reporting without exposing the system to potential exploitation through malicious format strings.","CWE-134,CWE-78,CWE-89,CWE-79,CWE-94,CWE-20,CWE-287,CWE-116,CWE-77,CWE-269",Y,1.0,"5, 4","5, 5","4,5","5,5"
