,Unnamed: 0.2,Unnamed: 0.1,Unnamed: 0,Access Gained,Attack Origin,Authentication Required,Availability,CVE ID,CVE Page,CWE ID,Complexity,Confidentiality,Integrity,Known Exploits,Publish Date,Score,Summary,Update Date,Vulnerability Classification,add_lines,codeLink,commit_id,commit_message,del_lines,file_name,files_changed,func_after,func_before,lang,lines_after,lines_before,parentID,patch,project,project_after,project_before,vul,vul_func_with_fix,idx,primevul_func_before_fix,primevul_func_after_fix,C1_Description_of_Functionality_In_Context,C2_Description_of_Functionality_Generic,C3_Explanation_of_Vulnerability_In_Context,C4_Explanation_of_Vulnerability_Generic,C5_Explanation_Vulnerability_Fixed_In_Context,C6_Explanation_Vulnerability_Fixed_Generic,T1_Top_10_CWE_IDs,T2_Correctly_Found_CWE,T3_IFA,G1_Clarity_C3_C5,G2_Relevance_C3_C5,G3_Completeness_C3_C5,G4_Actionability_C3_C5
0,0,181360,181360,,Local,Not required,Partial,CVE-2017-8925,https://www.cvedetails.com/cve/CVE-2017-8925/,CWE-404,Low,,,,2017-05-12,2.1,The omninet_open function in drivers/usb/serial/omninet.c in the Linux kernel before 4.10.4 allows local users to cause a denial of service (tty exhaustion) by leveraging reference count mishandling.,2019-10-02,DoS ,0,https://github.com/torvalds/linux/commit/30572418b445d85fcfe6c8fe84c947d2606767d8,30572418b445d85fcfe6c8fe84c947d2606767d8,"USB: serial: omninet: fix reference leaks at open

This driver needlessly took another reference to the tty on open, a
reference which was then never released on close. This lead to not just
a leak of the tty, but also a driver reference leak that prevented the
driver from being unloaded after a port had once been opened.

Fixes: 4a90f09b20f4 (""tty: usb-serial krefs"")
Cc: stable <stable@vger.kernel.org>	# 2.6.28
Signed-off-by: Johan Hovold <johan@kernel.org>",4,drivers/usb/serial/omninet.c,"{""sha"": ""76564b3bebb9bc3b1c6c2ec5761b74b2bcefcd1e"", ""filename"": ""drivers/usb/serial/omninet.c"", ""status"": ""modified"", ""additions"": 0, ""deletions"": 6, ""changes"": 6, ""blob_url"": ""https://github.com/torvalds/linux/blob/30572418b445d85fcfe6c8fe84c947d2606767d8/drivers/usb/serial/omninet.c"", ""raw_url"": ""https://github.com/torvalds/linux/raw/30572418b445d85fcfe6c8fe84c947d2606767d8/drivers/usb/serial/omninet.c"", ""contents_url"": ""https://api.github.com/repos/torvalds/linux/contents/drivers/usb/serial/omninet.c?ref=30572418b445d85fcfe6c8fe84c947d2606767d8"", ""patch"": ""@@ -142,12 +142,6 @@ static int omninet_port_remove(struct usb_serial_port *port)\n \n static int omninet_open(struct tty_struct *tty, struct usb_serial_port *port)\n {\n-\tstruct usb_serial\t*serial = port->serial;\n-\tstruct usb_serial_port\t*wport;\n-\n-\twport = serial->port[1];\n-\ttty_port_tty_set(&wport->port, tty);\n-\n \treturn usb_serial_generic_open(tty, port);\n }\n ""}"," static int omninet_open(struct tty_struct *tty, struct usb_serial_port *port)
 {
 	return usb_serial_generic_open(tty, port);
 }
"," static int omninet_open(struct tty_struct *tty, struct usb_serial_port *port)
 {
	struct usb_serial	*serial = port->serial;
	struct usb_serial_port	*wport;
	wport = serial->port[1];
	tty_port_tty_set(&wport->port, tty);
 	return usb_serial_generic_open(tty, port);
 }
",C,,"	struct usb_serial	*serial = port->serial;
	struct usb_serial_port	*wport;
	wport = serial->port[1];
	tty_port_tty_set(&wport->port, tty);
",,"@@ -142,12 +142,6 @@ static int omninet_port_remove(struct usb_serial_port *port)
 
 static int omninet_open(struct tty_struct *tty, struct usb_serial_port *port)
 {
-	struct usb_serial	*serial = port->serial;
-	struct usb_serial_port	*wport;
-
-	wport = serial->port[1];
-	tty_port_tty_set(&wport->port, tty);
-
 	return usb_serial_generic_open(tty, port);
 }
 ",linux,30572418b445d85fcfe6c8fe84c947d2606767d8,0b1d250afb8eb9d65afb568bac9b9f9253a82b49,1," static int omninet_open(struct tty_struct *tty, struct usb_serial_port *port)
 {
//flaw_line_below:
	struct usb_serial	*serial = port->serial;
//flaw_line_below:
	struct usb_serial_port	*wport;
//flaw_line_below:

//flaw_line_below:
	wport = serial->port[1];
//flaw_line_below:
	tty_port_tty_set(&wport->port, tty);
//flaw_line_below:

 	return usb_serial_generic_open(tty, port);
 }
",181360," static int omninet_open(struct tty_struct *tty, struct usb_serial_port *port)
 {
	struct usb_serial	*serial = port->serial;
	struct usb_serial_port	*wport;
	wport = serial->port[1];
	tty_port_tty_set(&wport->port, tty);
 	return usb_serial_generic_open(tty, port);
 }
"," static int omninet_open(struct tty_struct *tty, struct usb_serial_port *port)
 {
 	return usb_serial_generic_open(tty, port);
 }
","The provided code defines a function `omninet_open` that is responsible for opening a USB serial port in a Linux kernel module. It takes two parameters: a pointer to a `tty_struct` representing the terminal interface and a pointer to a `usb_serial_port` representing the USB serial port. The function retrieves the associated `usb_serial` structure and identifies a secondary port (the second port in the array). It then associates the terminal with this secondary port using `tty_port_tty_set`. Finally, it calls `usb_serial_generic_open` to perform the standard operations required to open the USB serial connection, returning its result.","The code defines a function that facilitates the opening of a USB serial port within a Linux kernel module. It accepts parameters representing a terminal interface and a USB serial port. The function identifies a secondary port associated with the USB serial device and links the terminal interface to this port. Subsequently, it invokes a standard procedure to handle the opening of the USB serial connection, ensuring that all necessary operations are performed to establish communication. The function ultimately returns the result of this standard opening procedure, indicating success or failure.","The vulnerability in the original code arises from improper handling of reference counts, which can lead to tty exhaustion, allowing local users to cause a denial of service. Specifically, the function initially linked a terminal interface to a secondary USB serial port without ensuring that the reference count was managed correctly, potentially leading to resource leaks or premature deallocation. In the fixed code, the function was simplified to directly call `usb_serial_generic_open`, eliminating the unnecessary association with the secondary port and ensuring that reference counting is handled appropriately within the standard opening procedure, thus mitigating the risk of tty exhaustion.","The vulnerability in the original code stems from improper management of reference counts, which can lead to tty exhaustion and allow local users to create a denial of service condition. This mishandling occurs when the function associates a terminal interface with a secondary port without ensuring that the reference count is correctly incremented or decremented, potentially resulting in resource leaks. The fixed code addresses this issue by removing the unnecessary association with the secondary port and directly invoking a standard opening procedure, which properly manages reference counts, thereby preventing the risk of tty exhaustion and ensuring stable resource allocation.","The vulnerability was fixed by simplifying the `omninet_open` function to eliminate the unnecessary association with a secondary port. In the original code, the function linked the terminal interface to a secondary USB serial port, which complicated reference count management and led to potential tty exhaustion. The revised code directly calls `usb_serial_generic_open`, which handles the opening of the USB serial connection while ensuring that reference counts are managed correctly. This change reduces the risk of resource leaks and ensures that the system maintains proper control over terminal resources, thereby preventing denial of service conditions.","The vulnerability was fixed by streamlining the function to remove unnecessary complexity related to associating a terminal interface with a secondary port. By eliminating this association, the revised code ensures that reference counts are managed correctly without the risk of mishandling, which previously contributed to resource leaks and potential tty exhaustion. The updated implementation directly invokes a standard procedure that inherently manages resource allocation and reference counting, thereby enhancing stability and preventing denial of service conditions. This approach simplifies the logic and reinforces proper resource management within the system.","CWE-772, CWE-674, CWE-400, CWE-415, CWE-404, CWE-911, CWE-675, CWE-459, CWE-401, CWE-789",N,-1.0,"4,4","4, 4","4,4","4,3"
