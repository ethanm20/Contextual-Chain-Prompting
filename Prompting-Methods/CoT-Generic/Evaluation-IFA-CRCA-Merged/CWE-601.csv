,Unnamed: 0.2,Unnamed: 0.1,Unnamed: 0,Access Gained,Attack Origin,Authentication Required,Availability,CVE ID,CVE Page,CWE ID,Complexity,Confidentiality,Integrity,Known Exploits,Publish Date,Score,Summary,Update Date,Vulnerability Classification,add_lines,codeLink,commit_id,commit_message,del_lines,file_name,files_changed,func_after,func_before,lang,lines_after,lines_before,parentID,patch,project,project_after,project_before,vul,vul_func_with_fix,idx,primevul_func_before_fix,primevul_func_after_fix,C1_Description_of_Functionality_In_Context,C2_Description_of_Functionality_Generic,C3_Explanation_of_Vulnerability_In_Context,C4_Explanation_of_Vulnerability_Generic,C5_Explanation_Vulnerability_Fixed_In_Context,C6_Explanation_Vulnerability_Fixed_Generic,T1_Top_10_CWE_IDs,T2_Correctly_Found_CWE,T3_IFA,G1_Clarity_C3_C5,G2_Relevance_C3_C5,G3_Completeness_C3_C5,G4_Actionability_C3_C5
0,0,182921,182921,,Remote,Not required,,CVE-2019-3877,https://www.cvedetails.com/cve/CVE-2019-3877/,CWE-601,Medium,,Partial,,2019-03-27,4.3,"A vulnerability was found in mod_auth_mellon before v0.14.2. An open redirect in the logout URL allows requests with backslashes to pass through by assuming that it is a relative URL, while the browsers silently convert backslash characters into forward slashes treating them as an absolute URL. This mismatch allows an attacker to bypass the redirect URL validation logic in apr_uri_parse function.",2019-04-16,Bypass ,7,https://github.com/Uninett/mod_auth_mellon/commit/62041428a32de402e0be6ba45fe12df6a83bedb8,62041428a32de402e0be6ba45fe12df6a83bedb8,"Fix redirect URL validation bypass

It turns out that browsers silently convert backslash characters into
forward slashes, while apr_uri_parse() does not.

This mismatch allows an attacker to bypass the redirect URL validation
by using an URL like:

  https://sp.example.org/mellon/logout?ReturnTo=https:%5c%5cmalicious.example.org/

mod_auth_mellon will assume that it is a relative URL and allow the
request to pass through, while the browsers will use it as an absolute
url and redirect to https://malicious.example.org/ .

This patch fixes this issue by rejecting all redirect URLs with
backslashes.",0,auth_mellon_util.c,"{""sha"": ""fd442f90e4f12669e18f64095c441881b8614c8d"", ""filename"": ""auth_mellon_util.c"", ""status"": ""modified"", ""additions"": 7, ""deletions"": 0, ""changes"": 7, ""blob_url"": ""https://github.com/Uninett/mod_auth_mellon/blob/62041428a32de402e0be6ba45fe12df6a83bedb8/auth_mellon_util.c"", ""raw_url"": ""https://github.com/Uninett/mod_auth_mellon/raw/62041428a32de402e0be6ba45fe12df6a83bedb8/auth_mellon_util.c"", ""contents_url"": ""https://api.github.com/repos/Uninett/mod_auth_mellon/contents/auth_mellon_util.c?ref=62041428a32de402e0be6ba45fe12df6a83bedb8"", ""patch"": ""@@ -927,6 +927,13 @@ int am_check_url(request_rec *r, const char *url)\n                           \""Control character detected in URL.\"");\n             return HTTP_BAD_REQUEST;\n         }\n+        if (*i == '\\\\') {\n+            /* Reject backslash character, as it can be used to bypass\n+             * redirect URL validation. */\n+            AM_LOG_RERROR(APLOG_MARK, APLOG_ERR, HTTP_BAD_REQUEST, r,\n+                          \""Backslash character detected in URL.\"");\n+            return HTTP_BAD_REQUEST;\n+        }\n     }\n \n     return OK;""}","int am_check_url(request_rec *r, const char *url)
{
    const char *i;

    for (i = url; *i; i++) {
        if (*i >= 0 && *i < ' ') {
            /* Deny all control-characters. */
            AM_LOG_RERROR(APLOG_MARK, APLOG_ERR, HTTP_BAD_REQUEST, r,
                           ""Control character detected in URL."");
             return HTTP_BAD_REQUEST;
         }
        if (*i == '\\') {
            /* Reject backslash character, as it can be used to bypass
             * redirect URL validation. */
            AM_LOG_RERROR(APLOG_MARK, APLOG_ERR, HTTP_BAD_REQUEST, r,
                          ""Backslash character detected in URL."");
            return HTTP_BAD_REQUEST;
        }
     }
 
     return OK;
}
","int am_check_url(request_rec *r, const char *url)
{
    const char *i;

    for (i = url; *i; i++) {
        if (*i >= 0 && *i < ' ') {
            /* Deny all control-characters. */
            AM_LOG_RERROR(APLOG_MARK, APLOG_ERR, HTTP_BAD_REQUEST, r,
                           ""Control character detected in URL."");
             return HTTP_BAD_REQUEST;
         }
     }
 
     return OK;
}
",C,"        if (*i == '\\') {
            /* Reject backslash character, as it can be used to bypass
             * redirect URL validation. */
            AM_LOG_RERROR(APLOG_MARK, APLOG_ERR, HTTP_BAD_REQUEST, r,
                          ""Backslash character detected in URL."");
            return HTTP_BAD_REQUEST;
        }
",,,"@@ -927,6 +927,13 @@ int am_check_url(request_rec *r, const char *url)
                           ""Control character detected in URL."");
             return HTTP_BAD_REQUEST;
         }
+        if (*i == '\\') {
+            /* Reject backslash character, as it can be used to bypass
+             * redirect URL validation. */
+            AM_LOG_RERROR(APLOG_MARK, APLOG_ERR, HTTP_BAD_REQUEST, r,
+                          ""Backslash character detected in URL."");
+            return HTTP_BAD_REQUEST;
+        }
     }
 
     return OK;",mod_auth_mellon,62041428a32de402e0be6ba45fe12df6a83bedb8,7bc436760d10edb4be27fc326548ef3e7ffddf65,1,"int am_check_url(request_rec *r, const char *url)
{
    const char *i;

    for (i = url; *i; i++) {
        if (*i >= 0 && *i < ' ') {
            /* Deny all control-characters. */
            AM_LOG_RERROR(APLOG_MARK, APLOG_ERR, HTTP_BAD_REQUEST, r,
                           ""Control character detected in URL."");
             return HTTP_BAD_REQUEST;
         }
//fix_flaw_line_below:
//        if (*i == '\\') {
//fix_flaw_line_below:
//            /* Reject backslash character, as it can be used to bypass
//fix_flaw_line_below:
//             * redirect URL validation. */
//fix_flaw_line_below:
//            AM_LOG_RERROR(APLOG_MARK, APLOG_ERR, HTTP_BAD_REQUEST, r,
//fix_flaw_line_below:
//                          ""Backslash character detected in URL."");
//fix_flaw_line_below:
//            return HTTP_BAD_REQUEST;
//fix_flaw_line_below:
//        }
     }
 
     return OK;
}
",182921,"int am_check_url(request_rec *r, const char *url)
{
    const char *i;

    for (i = url; *i; i++) {
        if (*i >= 0 && *i < ' ') {
            /* Deny all control-characters. */
            AM_LOG_RERROR(APLOG_MARK, APLOG_ERR, HTTP_BAD_REQUEST, r,
                           ""Control character detected in URL."");
             return HTTP_BAD_REQUEST;
         }
     }
 
     return OK;
}
","int am_check_url(request_rec *r, const char *url)
{
    const char *i;

    for (i = url; *i; i++) {
        if (*i >= 0 && *i < ' ') {
            /* Deny all control-characters. */
            AM_LOG_RERROR(APLOG_MARK, APLOG_ERR, HTTP_BAD_REQUEST, r,
                           ""Control character detected in URL."");
             return HTTP_BAD_REQUEST;
         }
        if (*i == '\\') {
            /* Reject backslash character, as it can be used to bypass
             * redirect URL validation. */
            AM_LOG_RERROR(APLOG_MARK, APLOG_ERR, HTTP_BAD_REQUEST, r,
                          ""Backslash character detected in URL."");
            return HTTP_BAD_REQUEST;
        }
     }
 
     return OK;
}
","The provided code defines a function `am_check_url` that checks a given URL for the presence of control characters, which are non-printable characters that can cause issues in HTTP requests. It iterates through each character in the URL string, and if it encounters any character with an ASCII value less than a space (i.e., less than 32), it logs an error message indicating that a control character was detected and returns an HTTP 400 Bad Request status. If no control characters are found, the function returns an OK status, indicating that the URL is valid.","The code defines a function that validates a given URL by checking for the presence of control characters, which are non-printable and can disrupt HTTP requests. It iterates through each character in the URL string, and if it finds any character with an ASCII value less than a specified threshold, it logs an error message indicating the detection of a control character and returns a status indicating a bad request. If the URL contains only valid characters, the function returns a status indicating that the URL is acceptable, ensuring proper handling of incoming requests.","The vulnerability in the original code arises from its failure to account for the backslash character, which can be exploited to bypass URL validation and potentially lead to security issues such as directory traversal attacks. In the fixed code, an additional check is introduced to specifically reject the backslash character, logging an error message when it is detected. This enhancement ensures that both control characters and backslashes are denied, thereby strengthening the validation process and preventing malicious users from manipulating the URL to access unauthorized resources or execute harmful actions.","The vulnerability in the original code stems from its inability to detect and reject backslash characters, which can be exploited to bypass URL validation and potentially facilitate attacks such as directory traversal. This oversight allows malicious users to manipulate URLs in ways that could lead to unauthorized access or execution of harmful actions. The fixed code addresses this issue by adding a specific check for backslashes, ensuring that any occurrence of this character triggers an error response. This enhancement improves the overall security of the URL validation process by preventing the exploitation of this previously unaddressed vulnerability.","The vulnerability was fixed by adding an additional conditional check in the function to specifically identify and reject the backslash character. In the updated code, after the initial loop that checks for control characters, a new condition is introduced that evaluates if the current character is a backslash. If detected, an error message is logged using the logging function, and the function returns an HTTP 400 Bad Request status. This modification effectively prevents the exploitation of backslashes in URLs, thereby enhancing the security of the URL validation process and mitigating potential attacks.","The vulnerability was addressed by introducing an additional check to specifically identify and reject backslash characters within the URL validation process. This new condition ensures that if a backslash is detected, an error message is logged, and a response indicating a bad request is returned. By implementing this safeguard, the updated code prevents potential exploitation of backslashes, which could allow attackers to bypass validation and manipulate URLs for malicious purposes. This enhancement significantly strengthens the overall security of the URL validation mechanism, ensuring that both control characters and backslashes are properly handled.","CWE-20, CWE-184, CWE-185, CWE-145, CWE-147, CWE-146, CWE-641, CWE-154, CWE-182, CWE-150",N,-1.0,"5,5","5,5","4,4","4,5"
