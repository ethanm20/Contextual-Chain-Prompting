,Unnamed: 0.1,Unnamed: 0,Access Gained,Attack Origin,Authentication Required,Availability,CVE ID,CVE Page,CWE ID,Complexity,Confidentiality,Integrity,Known Exploits,Publish Date,Score,Summary,Update Date,Vulnerability Classification,add_lines,codeLink,commit_id,commit_message,del_lines,file_name,files_changed,func_after,func_before,lang,lines_after,lines_before,parentID,patch,project,project_after,project_before,vul,vul_func_with_fix,idx,primevul_func_before_fix,primevul_func_after_fix,C1_Description_of_Functionality_In_Context,C2_Description_of_Functionality_Generic,C3_Explanation_of_Vulnerability_In_Context,C4_Explanation_of_Vulnerability_Generic,C5_Explanation_Vulnerability_Fixed_In_Context,C6_Explanation_Vulnerability_Fixed_Generic
0,180703,180703,,Remote,Not required,Complete,CVE-2015-8617,https://www.cvedetails.com/cve/CVE-2015-8617/,CWE-134,Low,Complete,Complete,,2016-01-19,10.0,"Format string vulnerability in the zend_throw_or_error function in Zend/zend_execute_API.c in PHP 7.x before 7.0.1 allows remote attackers to execute arbitrary code via format string specifiers in a string that is misused as a class name, leading to incorrect error handling.",2017-09-09,Exec Code ,1,https://github.com/php/php-src/commit/b101a6bbd4f2181c360bd38e7683df4a03cba83e,b101a6bbd4f2181c360bd38e7683df4a03cba83e,Use format string,1,Zend/zend_execute_API.c,"{""sha"": ""fdffed34b275775084eeaf943a12c992edac2e0c"", ""filename"": ""Zend/zend_execute_API.c"", ""status"": ""modified"", ""additions"": 1, ""deletions"": 1, ""changes"": 2, ""blob_url"": ""https://github.com/php/php-src/blob/b101a6bbd4f2181c360bd38e7683df4a03cba83e/Zend/zend_execute_API.c"", ""raw_url"": ""https://github.com/php/php-src/raw/b101a6bbd4f2181c360bd38e7683df4a03cba83e/Zend/zend_execute_API.c"", ""contents_url"": ""https://api.github.com/repos/php/php-src/contents/Zend/zend_execute_API.c?ref=b101a6bbd4f2181c360bd38e7683df4a03cba83e"", ""patch"": ""@@ -218,7 +218,7 @@ static void zend_throw_or_error(int fetch_type, zend_class_entry *exception_ce,\n \tzend_vspprintf(&message, 0, format, va);\n \n \tif (fetch_type & ZEND_FETCH_CLASS_EXCEPTION) {\n-\t\tzend_throw_error(exception_ce, message);\n+\t\tzend_throw_error(exception_ce, \""%s\"", message);\n \t} else {\n \t\tzend_error(E_ERROR, \""%s\"", message);\n \t}""}","static void zend_throw_or_error(int fetch_type, zend_class_entry *exception_ce, const char *format, ...) /* {{{ */
{
	va_list va;
	char *message = NULL;

	va_start(va, format);
 	zend_vspprintf(&message, 0, format, va);
 
 	if (fetch_type & ZEND_FETCH_CLASS_EXCEPTION) {
		zend_throw_error(exception_ce, ""%s"", message);
 	} else {
 		zend_error(E_ERROR, ""%s"", message);
 	}

	efree(message);
	va_end(va);
}
/* }}} */
","static void zend_throw_or_error(int fetch_type, zend_class_entry *exception_ce, const char *format, ...) /* {{{ */
{
	va_list va;
	char *message = NULL;

	va_start(va, format);
 	zend_vspprintf(&message, 0, format, va);
 
 	if (fetch_type & ZEND_FETCH_CLASS_EXCEPTION) {
		zend_throw_error(exception_ce, message);
 	} else {
 		zend_error(E_ERROR, ""%s"", message);
 	}

	efree(message);
	va_end(va);
}
/* }}} */
",C,"		zend_throw_error(exception_ce, ""%s"", message);
","		zend_throw_error(exception_ce, message);
",,"@@ -218,7 +218,7 @@ static void zend_throw_or_error(int fetch_type, zend_class_entry *exception_ce,
 	zend_vspprintf(&message, 0, format, va);
 
 	if (fetch_type & ZEND_FETCH_CLASS_EXCEPTION) {
-		zend_throw_error(exception_ce, message);
+		zend_throw_error(exception_ce, ""%s"", message);
 	} else {
 		zend_error(E_ERROR, ""%s"", message);
 	}",php-src,b101a6bbd4f2181c360bd38e7683df4a03cba83e,e0691d27d5b83122c78b9a3c4e2cd0aadf57fcb7,1,"static void zend_throw_or_error(int fetch_type, zend_class_entry *exception_ce, const char *format, ...) /* {{{ */
{
	va_list va;
	char *message = NULL;

	va_start(va, format);
 	zend_vspprintf(&message, 0, format, va);
 
 	if (fetch_type & ZEND_FETCH_CLASS_EXCEPTION) {
//flaw_line_below:
		zend_throw_error(exception_ce, message);
//fix_flaw_line_below:
//		zend_throw_error(exception_ce, ""%s"", message);
 	} else {
 		zend_error(E_ERROR, ""%s"", message);
 	}

	efree(message);
	va_end(va);
}
/* }}} */
",180703,"static void zend_throw_or_error(int fetch_type, zend_class_entry *exception_ce, const char *format, ...) /* {{{ */
{
	va_list va;
	char *message = NULL;

	va_start(va, format);
	zend_vspprintf(&message, 0, format, va);

	if (fetch_type & ZEND_FETCH_CLASS_EXCEPTION) {
		zend_throw_error(exception_ce, message);
	} else {
		zend_error(E_ERROR, ""%s"", message);
	}

	efree(message);
	va_end(va);
}","static void zend_throw_or_error(int fetch_type, zend_class_entry *exception_ce, const char *format, ...) /* {{{ */
{
	va_list va;
	char *message = NULL;

	va_start(va, format);
 	zend_vspprintf(&message, 0, format, va);
 
 	if (fetch_type & ZEND_FETCH_CLASS_EXCEPTION) {
		zend_throw_error(exception_ce, ""%s"", message);
 	} else {
 		zend_error(E_ERROR, ""%s"", message);
 	}

	efree(message);
	va_end(va);
}
/* }}} */
","The provided code defines a static function `zend_throw_or_error`, which handles error reporting and exception throwing in a Zend-based environment. It takes an integer `fetch_type`, a pointer to a class entry `exception_ce`, and a formatted string `format` with variable arguments. The function constructs a message using `zend_vspprintf` and checks the `fetch_type` to determine whether to throw an exception using `zend_throw_error` or to report a fatal error with `zend_error`. Finally, it frees the allocated message memory and ends the variable argument list, ensuring proper resource management.","The code defines a function that manages error handling and exception throwing within a specific programming environment. It accepts parameters to determine the type of error handling required and a formatted message. The function constructs a message based on the provided format and checks the specified type to decide whether to throw an exception or report a critical error. After executing the appropriate error handling mechanism, it ensures that any allocated memory for the message is properly released, maintaining efficient resource management and preventing memory leaks in the process.","The vulnerability in the original code arises from the potential for a null or improperly formatted message to be passed to the error handling functions, which could lead to undefined behavior or crashes. In the fixed code, the change involves directly passing the formatted message to `zend_throw_error` and `zend_error` with a format specifier, ensuring that the message is properly handled and displayed. This adjustment mitigates risks associated with uninitialized or malformed strings, enhancing the robustness of error reporting and preventing potential exploitation through crafted input that could disrupt program execution.","The vulnerability in the original code stems from the risk of passing an improperly formatted or null message to the error handling mechanisms, which could lead to undefined behavior or application crashes. The fix addresses this issue by ensuring that the message is formatted correctly before being used in the error reporting process. By implementing a format specifier when invoking the error handling functions, the revised code guarantees that the message is safely processed and displayed, thereby reducing the likelihood of exploitation through malformed input and enhancing the overall stability and security of the error handling routine.","The vulnerability was fixed by modifying how the formatted message is passed to the error handling functions. In the original code, the message was directly passed without a format specifier, which could lead to issues if the message was null or improperly formatted. The revised code now uses a format specifier when calling `zend_throw_error` and `zend_error`, ensuring that the message is treated as a string and properly handled. This change enhances the robustness of the error reporting mechanism, preventing potential crashes or undefined behavior caused by malformed input and ensuring safer execution of the program.","The vulnerability was addressed by ensuring that the error handling mechanisms receive a properly formatted message, thereby preventing issues related to null or malformed strings. The fix involved incorporating a format specifier when invoking the error reporting functions, which guarantees that the message is treated correctly and displayed as intended. This adjustment enhances the safety and reliability of the error handling process, reducing the risk of crashes or undefined behavior that could arise from improper input. Overall, the changes improve the robustness of the code and mitigate potential exploitation risks associated with error reporting."
