,Unnamed: 0.2,Unnamed: 0.1,Unnamed: 0,Access Gained,Attack Origin,Authentication Required,Availability,CVE ID,CVE Page,CWE ID,Complexity,Confidentiality,Integrity,Known Exploits,Publish Date,Score,Summary,Update Date,Vulnerability Classification,add_lines,codeLink,commit_id,commit_message,del_lines,file_name,files_changed,func_after,func_before,lang,lines_after,lines_before,parentID,patch,project,project_after,project_before,vul,vul_func_with_fix,idx,primevul_func_before_fix,primevul_func_after_fix,C1_Description_of_Functionality_In_Context,C2_Description_of_Functionality_Generic,C3_Explanation_of_Vulnerability_In_Context,C4_Explanation_of_Vulnerability_Generic,C5_Explanation_Vulnerability_Fixed_In_Context,C6_Explanation_Vulnerability_Fixed_Generic,T1_Top_10_CWE_IDs,T2_Correctly_Found_CWE,T3_IFA
0,0,186937,186937,,Remote,Not required,Partial,CVE-2017-15393,https://www.cvedetails.com/cve/CVE-2017-15393/,CWE-668,Medium,Partial,Partial,,2018-02-07,6.8,"Insufficient Policy Enforcement in Devtools remote debugging in Google Chrome prior to 62.0.3202.62 allowed a remote attacker to obtain access to remote debugging functionality via a crafted HTML page, aka a Referer leak.",2019-10-02,,5,https://github.com/chromium/chromium/commit/a8ef19900d003ff7078fe4fcec8f63496b18f0dc,a8ef19900d003ff7078fe4fcec8f63496b18f0dc,"[DevTools] Use no-referrer for DevTools links

Bug: 732751
Change-Id: I77753120e2424203dedcc7bc0847fb67f87fe2b2
Reviewed-on: https://chromium-review.googlesource.com/615021
Reviewed-by: Andrey Kosyakov <caseq@chromium.org>
Commit-Queue: Dmitry Gozman <dgozman@chromium.org>
Cr-Commit-Position: refs/heads/master@{#494413}",2,chrome/browser/devtools/devtools_window.cc,"{""sha"": ""1eaec03ec63ad99835933a59b908294d9daa0701"", ""filename"": ""chrome/browser/devtools/devtools_window.cc"", ""status"": ""modified"", ""additions"": 5, ""deletions"": 2, ""changes"": 7, ""blob_url"": ""https://github.com/chromium/chromium/blob/a8ef19900d003ff7078fe4fcec8f63496b18f0dc/chrome/browser/devtools/devtools_window.cc"", ""raw_url"": ""https://github.com/chromium/chromium/raw/a8ef19900d003ff7078fe4fcec8f63496b18f0dc/chrome/browser/devtools/devtools_window.cc"", ""contents_url"": ""https://api.github.com/repos/chromium/chromium/contents/chrome/browser/devtools/devtools_window.cc?ref=a8ef19900d003ff7078fe4fcec8f63496b18f0dc"", ""patch"": ""@@ -991,8 +991,11 @@ WebContents* DevToolsWindow::OpenURLFromTab(\n   DCHECK(source == main_web_contents_);\n   if (!params.url.SchemeIs(content::kChromeDevToolsScheme)) {\n     WebContents* inspected_web_contents = GetInspectedWebContents();\n-    return inspected_web_contents ?\n-        inspected_web_contents->OpenURL(params) : NULL;\n+    if (!inspected_web_contents)\n+      return nullptr;\n+    content::OpenURLParams modified = params;\n+    modified.referrer = content::Referrer();\n+    return inspected_web_contents->OpenURL(modified);\n   }\n   bindings_->Reload();\n   return main_web_contents_;""}<_**next**_>{""sha"": ""0798c34a35bc9430cac581f838a37b2a9b1872f8"", ""filename"": ""third_party/WebKit/Source/devtools/front_end/inspector.html"", ""status"": ""modified"", ""additions"": 1, ""deletions"": 0, ""changes"": 1, ""blob_url"": ""https://github.com/chromium/chromium/blob/a8ef19900d003ff7078fe4fcec8f63496b18f0dc/third_party/WebKit/Source/devtools/front_end/inspector.html"", ""raw_url"": ""https://github.com/chromium/chromium/raw/a8ef19900d003ff7078fe4fcec8f63496b18f0dc/third_party/WebKit/Source/devtools/front_end/inspector.html"", ""contents_url"": ""https://api.github.com/repos/chromium/chromium/contents/third_party/WebKit/Source/devtools/front_end/inspector.html?ref=a8ef19900d003ff7078fe4fcec8f63496b18f0dc"", ""patch"": ""@@ -8,6 +8,7 @@\n <head>\n     <meta http-equiv=\""content-type\"" content=\""text/html; charset=utf-8\"">\n     <meta http-equiv=\""Content-Security-Policy\"" content=\""object-src 'none'; script-src 'self' 'unsafe-eval' https://chrome-devtools-frontend.appspot.com\"">\n+    <meta name=\""referrer\"" content=\""no-referrer\"">\n     <script type=\""text/javascript\"" src=\""Runtime.js\""></script>\n     <script type=\""text/javascript\"" src=\""inspector.js\""></script>\n </head>""}","WebContents* DevToolsWindow::OpenURLFromTab(
    WebContents* source,
    const content::OpenURLParams& params) {
   DCHECK(source == main_web_contents_);
   if (!params.url.SchemeIs(content::kChromeDevToolsScheme)) {
     WebContents* inspected_web_contents = GetInspectedWebContents();
    if (!inspected_web_contents)
      return nullptr;
    content::OpenURLParams modified = params;
    modified.referrer = content::Referrer();
    return inspected_web_contents->OpenURL(modified);
   }
   bindings_->Reload();
   return main_web_contents_;
}
","WebContents* DevToolsWindow::OpenURLFromTab(
    WebContents* source,
    const content::OpenURLParams& params) {
   DCHECK(source == main_web_contents_);
   if (!params.url.SchemeIs(content::kChromeDevToolsScheme)) {
     WebContents* inspected_web_contents = GetInspectedWebContents();
    return inspected_web_contents ?
        inspected_web_contents->OpenURL(params) : NULL;
   }
   bindings_->Reload();
   return main_web_contents_;
}
",C,"    if (!inspected_web_contents)
      return nullptr;
    content::OpenURLParams modified = params;
    modified.referrer = content::Referrer();
    return inspected_web_contents->OpenURL(modified);
","    return inspected_web_contents ?
        inspected_web_contents->OpenURL(params) : NULL;
",,"@@ -991,8 +991,11 @@ WebContents* DevToolsWindow::OpenURLFromTab(
   DCHECK(source == main_web_contents_);
   if (!params.url.SchemeIs(content::kChromeDevToolsScheme)) {
     WebContents* inspected_web_contents = GetInspectedWebContents();
-    return inspected_web_contents ?
-        inspected_web_contents->OpenURL(params) : NULL;
+    if (!inspected_web_contents)
+      return nullptr;
+    content::OpenURLParams modified = params;
+    modified.referrer = content::Referrer();
+    return inspected_web_contents->OpenURL(modified);
   }
   bindings_->Reload();
   return main_web_contents_;",Chrome,a8ef19900d003ff7078fe4fcec8f63496b18f0dc,f4d90f1e136d6def1ea88f0cc8e3c8eb4c924927,1,"WebContents* DevToolsWindow::OpenURLFromTab(
    WebContents* source,
    const content::OpenURLParams& params) {
   DCHECK(source == main_web_contents_);
   if (!params.url.SchemeIs(content::kChromeDevToolsScheme)) {
     WebContents* inspected_web_contents = GetInspectedWebContents();
//flaw_line_below:
    return inspected_web_contents ?
//flaw_line_below:
        inspected_web_contents->OpenURL(params) : NULL;
//fix_flaw_line_below:
//    if (!inspected_web_contents)
//fix_flaw_line_below:
//      return nullptr;
//fix_flaw_line_below:
//    content::OpenURLParams modified = params;
//fix_flaw_line_below:
//    modified.referrer = content::Referrer();
//fix_flaw_line_below:
//    return inspected_web_contents->OpenURL(modified);
   }
   bindings_->Reload();
   return main_web_contents_;
}
",186937,"WebContents* DevToolsWindow::OpenURLFromTab(
    WebContents* source,
    const content::OpenURLParams& params) {
   DCHECK(source == main_web_contents_);
   if (!params.url.SchemeIs(content::kChromeDevToolsScheme)) {
     WebContents* inspected_web_contents = GetInspectedWebContents();
    return inspected_web_contents ?
        inspected_web_contents->OpenURL(params) : NULL;
   }
   bindings_->Reload();
   return main_web_contents_;
}
","WebContents* DevToolsWindow::OpenURLFromTab(
    WebContents* source,
    const content::OpenURLParams& params) {
   DCHECK(source == main_web_contents_);
   if (!params.url.SchemeIs(content::kChromeDevToolsScheme)) {
     WebContents* inspected_web_contents = GetInspectedWebContents();
    if (!inspected_web_contents)
      return nullptr;
    content::OpenURLParams modified = params;
    modified.referrer = content::Referrer();
    return inspected_web_contents->OpenURL(modified);
   }
   bindings_->Reload();
   return main_web_contents_;
}
","The `OpenURLFromTab` function in the `DevToolsWindow` class is designed to handle URL opening requests from a specific tab, ensuring that the source tab is the main web contents. It first checks if the requested URL uses the Chrome DevTools scheme; if not, it attempts to open the URL in the inspected web contents, returning the result or `NULL` if no inspected web contents exist. If the URL is valid for DevTools, it triggers a reload of the bindings and returns the main web contents, effectively managing navigation based on the URL scheme and the context of the request.","The provided code defines a function that manages URL opening requests from a specific tab within a development tools window. It first verifies that the request originates from the main content area. If the requested URL does not conform to a specific scheme, the function attempts to open it in the currently inspected content, returning the result or indicating failure if no such content exists. Conversely, if the URL is appropriate for the development tools, the function triggers a reload of the associated bindings and returns the main content area, effectively controlling navigation based on the URL's characteristics.","The vulnerability in the original code stemmed from the lack of validation for the `inspected_web_contents` before attempting to open a URL, which could lead to potential null pointer dereferences or unintended behavior if no inspected content was available. In the fixed code, an additional check was introduced to ensure that `inspected_web_contents` is not null before proceeding. Furthermore, the code now modifies the `params` to reset the referrer, enhancing security by preventing the leakage of potentially sensitive referrer information when opening URLs in the inspected web contents. This change mitigates risks associated with improper handling of URL requests.","The vulnerability in the original code arose from the lack of a proper check for the existence of inspected content before attempting to open a URL, which could lead to null pointer dereferences and potential crashes or unintended behavior. The fixed code addresses this issue by introducing a validation step to ensure that the inspected content is available before proceeding with the URL opening process. Additionally, it modifies the parameters to reset the referrer, thereby enhancing security by preventing the exposure of sensitive information. These changes collectively mitigate risks associated with improper handling of URL requests and improve overall stability.","The vulnerability was fixed by adding a null check for `inspected_web_contents` before attempting to open a URL. In the modified code, if `inspected_web_contents` is null, the function immediately returns a null pointer, preventing any further actions that could lead to crashes. Additionally, the code introduces a modification to the `params` by resetting the `referrer` to a new, empty value. This change enhances security by ensuring that no sensitive referrer information is passed along when opening URLs in the inspected web contents, thereby mitigating risks associated with improper URL handling.","The vulnerability was addressed by implementing a validation step to ensure that the inspected content exists before attempting to open a URL, thereby preventing potential null pointer dereferences that could lead to crashes. If the inspected content is not available, the function now safely returns a null value, avoiding any further actions that could cause instability. Additionally, the code was modified to reset the referrer information, enhancing security by preventing the leakage of sensitive data. These changes collectively improve the robustness of the code and mitigate risks associated with improper handling of URL requests.","CWE-476, CWE-601, CWE-200, CWE-552, CWE-290, CWE-451, CWE-284, CWE-610, CWE-706, CWE-325",N,-1
