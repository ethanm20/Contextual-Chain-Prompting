,Unnamed: 0.2,Unnamed: 0.1,Unnamed: 0,Access Gained,Attack Origin,Authentication Required,Availability,CVE ID,CVE Page,CWE ID,Complexity,Confidentiality,Integrity,Known Exploits,Publish Date,Score,Summary,Update Date,Vulnerability Classification,add_lines,codeLink,commit_id,commit_message,del_lines,file_name,files_changed,func_after,func_before,lang,lines_after,lines_before,parentID,patch,project,project_after,project_before,vul,vul_func_with_fix,idx,primevul_func_before_fix,primevul_func_after_fix,C1_Description_of_Functionality_In_Context,C2_Description_of_Functionality_Generic,C3_Explanation_of_Vulnerability_In_Context,C4_Explanation_of_Vulnerability_Generic,C5_Explanation_Vulnerability_Fixed_In_Context,C6_Explanation_Vulnerability_Fixed_Generic,T1_Top_10_CWE_IDs,T2_Correctly_Found_CWE,T3_IFA,G1_Clarity_C3_C5,G2_Relevance_C3_C5,G3_Completeness_C3_C5,G4_Actionability_C3_C5
0,0,179697,179697,,Remote,Not required,Partial,CVE-2013-7262,https://www.cvedetails.com/cve/CVE-2013-7262/,CWE-89,Medium,Partial,Partial,,2014-01-05,6.8,"SQL injection vulnerability in the msPostGISLayerSetTimeFilter function in mappostgis.c in MapServer before 6.4.1, when a WMS-Time service is used, allows remote attackers to execute arbitrary SQL commands via a crafted string in a PostGIS TIME filter.",2015-10-08,Exec Code Sql ,5,https://github.com/mapserver/mapserver/commit/3a10f6b829297dae63492a8c63385044bc6953ed,3a10f6b829297dae63492a8c63385044bc6953ed,Fix potential SQL Injection with postgis TIME filters (#4834),0,mappostgis.c,"{""sha"": ""f24d9697a3447c78dc90d6fef84f3ad9bf21d43f"", ""filename"": ""mappostgis.c"", ""status"": ""modified"", ""additions"": 5, ""deletions"": 0, ""changes"": 5, ""blob_url"": ""https://github.com/mapserver/mapserver/blob/3a10f6b829297dae63492a8c63385044bc6953ed/mappostgis.c"", ""raw_url"": ""https://github.com/mapserver/mapserver/raw/3a10f6b829297dae63492a8c63385044bc6953ed/mappostgis.c"", ""contents_url"": ""https://api.github.com/repos/mapserver/mapserver/contents/mappostgis.c?ref=3a10f6b829297dae63492a8c63385044bc6953ed"", ""patch"": ""@@ -3212,6 +3212,11 @@ int msPostGISLayerSetTimeFilter(layerObj *lp, const char *timestring, const char\n   if (!lp || !timestring || !timefield)\n     return MS_FALSE;\n \n+  if( strchr(timestring,'\\'') || strchr(timestring, '\\\\') ) {\n+     msSetError(MS_MISCERR, \""Invalid time filter.\"", \""msPostGISLayerSetTimeFilter()\"");\n+     return MS_FALSE;\n+  }\n+\n   /* discrete time */\n   if (strstr(timestring, \"",\"") == NULL &&\n       strstr(timestring, \""/\"") == NULL) { /* discrete time */""}","int msPostGISLayerSetTimeFilter(layerObj *lp, const char *timestring, const char *timefield)
{
  char **atimes, **aranges = NULL;
  int numtimes=0,i=0,numranges=0;
  size_t buffer_size = 512;
  char buffer[512], bufferTmp[512];

  buffer[0] = '\0';
  bufferTmp[0] = '\0';

   if (!lp || !timestring || !timefield)
     return MS_FALSE;
 
  if( strchr(timestring,'\'') || strchr(timestring, '\\') ) {
     msSetError(MS_MISCERR, ""Invalid time filter."", ""msPostGISLayerSetTimeFilter()"");
     return MS_FALSE;
  }

   /* discrete time */
   if (strstr(timestring, "","") == NULL &&
       strstr(timestring, ""/"") == NULL) { /* discrete time */
    createPostgresTimeCompareSimple(timefield, timestring, buffer, buffer_size);
  } else {

    /* multiple times, or ranges */
    atimes = msStringSplit (timestring, ',', &numtimes);
    if (atimes == NULL || numtimes < 1)
      return MS_FALSE;

    strlcat(buffer, ""("", buffer_size);
    for(i=0; i<numtimes; i++) {
      if(i!=0) {
        strlcat(buffer, "" OR "", buffer_size);
      }
      strlcat(buffer, ""("", buffer_size);
      aranges = msStringSplit(atimes[i],  '/', &numranges);
      if(!aranges) return MS_FALSE;
      if(numranges == 1) {
        /* we don't have range, just a simple time */
        createPostgresTimeCompareSimple(timefield, atimes[i], bufferTmp, buffer_size);
        strlcat(buffer, bufferTmp, buffer_size);
      } else if(numranges == 2) {
        /* we have a range */
        createPostgresTimeCompareRange(timefield, aranges[0], aranges[1], bufferTmp, buffer_size);
        strlcat(buffer, bufferTmp, buffer_size);
      } else {
        return MS_FALSE;
      }
      msFreeCharArray(aranges, numranges);
      strlcat(buffer, "")"", buffer_size);
    }
    strlcat(buffer, "")"", buffer_size);
    msFreeCharArray(atimes, numtimes);
  }
  if(!*buffer) {
    return MS_FALSE;
  }
  if(lp->filteritem) free(lp->filteritem);
  lp->filteritem = msStrdup(timefield);
  if (&lp->filter) {
    /* if the filter is set and it's a string type, concatenate it with
       the time. If not just free it */
    if (lp->filter.type == MS_EXPRESSION) {
      snprintf(bufferTmp, buffer_size, ""(%s) and %s"", lp->filter.string, buffer);
      loadExpressionString(&lp->filter, bufferTmp);
    } else {
      freeExpression(&lp->filter);
      loadExpressionString(&lp->filter, buffer);
    }
  }


  return MS_TRUE;
}
","int msPostGISLayerSetTimeFilter(layerObj *lp, const char *timestring, const char *timefield)
{
  char **atimes, **aranges = NULL;
  int numtimes=0,i=0,numranges=0;
  size_t buffer_size = 512;
  char buffer[512], bufferTmp[512];

  buffer[0] = '\0';
  bufferTmp[0] = '\0';

   if (!lp || !timestring || !timefield)
     return MS_FALSE;
 
   /* discrete time */
   if (strstr(timestring, "","") == NULL &&
       strstr(timestring, ""/"") == NULL) { /* discrete time */
    createPostgresTimeCompareSimple(timefield, timestring, buffer, buffer_size);
  } else {

    /* multiple times, or ranges */
    atimes = msStringSplit (timestring, ',', &numtimes);
    if (atimes == NULL || numtimes < 1)
      return MS_FALSE;

    strlcat(buffer, ""("", buffer_size);
    for(i=0; i<numtimes; i++) {
      if(i!=0) {
        strlcat(buffer, "" OR "", buffer_size);
      }
      strlcat(buffer, ""("", buffer_size);
      aranges = msStringSplit(atimes[i],  '/', &numranges);
      if(!aranges) return MS_FALSE;
      if(numranges == 1) {
        /* we don't have range, just a simple time */
        createPostgresTimeCompareSimple(timefield, atimes[i], bufferTmp, buffer_size);
        strlcat(buffer, bufferTmp, buffer_size);
      } else if(numranges == 2) {
        /* we have a range */
        createPostgresTimeCompareRange(timefield, aranges[0], aranges[1], bufferTmp, buffer_size);
        strlcat(buffer, bufferTmp, buffer_size);
      } else {
        return MS_FALSE;
      }
      msFreeCharArray(aranges, numranges);
      strlcat(buffer, "")"", buffer_size);
    }
    strlcat(buffer, "")"", buffer_size);
    msFreeCharArray(atimes, numtimes);
  }
  if(!*buffer) {
    return MS_FALSE;
  }
  if(lp->filteritem) free(lp->filteritem);
  lp->filteritem = msStrdup(timefield);
  if (&lp->filter) {
    /* if the filter is set and it's a string type, concatenate it with
       the time. If not just free it */
    if (lp->filter.type == MS_EXPRESSION) {
      snprintf(bufferTmp, buffer_size, ""(%s) and %s"", lp->filter.string, buffer);
      loadExpressionString(&lp->filter, bufferTmp);
    } else {
      freeExpression(&lp->filter);
      loadExpressionString(&lp->filter, buffer);
    }
  }


  return MS_TRUE;
}
",C,"  if( strchr(timestring,'\'') || strchr(timestring, '\\') ) {
     msSetError(MS_MISCERR, ""Invalid time filter."", ""msPostGISLayerSetTimeFilter()"");
     return MS_FALSE;
  }

",,,"@@ -3212,6 +3212,11 @@ int msPostGISLayerSetTimeFilter(layerObj *lp, const char *timestring, const char
   if (!lp || !timestring || !timefield)
     return MS_FALSE;
 
+  if( strchr(timestring,'\'') || strchr(timestring, '\\') ) {
+     msSetError(MS_MISCERR, ""Invalid time filter."", ""msPostGISLayerSetTimeFilter()"");
+     return MS_FALSE;
+  }
+
   /* discrete time */
   if (strstr(timestring, "","") == NULL &&
       strstr(timestring, ""/"") == NULL) { /* discrete time */",mapserver,3a10f6b829297dae63492a8c63385044bc6953ed,e83a0cb57e554884aaf37cbae330602c726d4868,1,"int msPostGISLayerSetTimeFilter(layerObj *lp, const char *timestring, const char *timefield)
{
  char **atimes, **aranges = NULL;
  int numtimes=0,i=0,numranges=0;
  size_t buffer_size = 512;
  char buffer[512], bufferTmp[512];

  buffer[0] = '\0';
  bufferTmp[0] = '\0';

   if (!lp || !timestring || !timefield)
     return MS_FALSE;
 
//fix_flaw_line_below:
//  if( strchr(timestring,'\'') || strchr(timestring, '\\') ) {
//fix_flaw_line_below:
//     msSetError(MS_MISCERR, ""Invalid time filter."", ""msPostGISLayerSetTimeFilter()"");
//fix_flaw_line_below:
//     return MS_FALSE;
//fix_flaw_line_below:
//  }
//fix_flaw_line_below:
//
   /* discrete time */
   if (strstr(timestring, "","") == NULL &&
       strstr(timestring, ""/"") == NULL) { /* discrete time */
    createPostgresTimeCompareSimple(timefield, timestring, buffer, buffer_size);
  } else {

    /* multiple times, or ranges */
    atimes = msStringSplit (timestring, ',', &numtimes);
    if (atimes == NULL || numtimes < 1)
      return MS_FALSE;

    strlcat(buffer, ""("", buffer_size);
    for(i=0; i<numtimes; i++) {
      if(i!=0) {
        strlcat(buffer, "" OR "", buffer_size);
      }
      strlcat(buffer, ""("", buffer_size);
      aranges = msStringSplit(atimes[i],  '/', &numranges);
      if(!aranges) return MS_FALSE;
      if(numranges == 1) {
        /* we don't have range, just a simple time */
        createPostgresTimeCompareSimple(timefield, atimes[i], bufferTmp, buffer_size);
        strlcat(buffer, bufferTmp, buffer_size);
      } else if(numranges == 2) {
        /* we have a range */
        createPostgresTimeCompareRange(timefield, aranges[0], aranges[1], bufferTmp, buffer_size);
        strlcat(buffer, bufferTmp, buffer_size);
      } else {
        return MS_FALSE;
      }
      msFreeCharArray(aranges, numranges);
      strlcat(buffer, "")"", buffer_size);
    }
    strlcat(buffer, "")"", buffer_size);
    msFreeCharArray(atimes, numtimes);
  }
  if(!*buffer) {
    return MS_FALSE;
  }
  if(lp->filteritem) free(lp->filteritem);
  lp->filteritem = msStrdup(timefield);
  if (&lp->filter) {
    /* if the filter is set and it's a string type, concatenate it with
       the time. If not just free it */
    if (lp->filter.type == MS_EXPRESSION) {
      snprintf(bufferTmp, buffer_size, ""(%s) and %s"", lp->filter.string, buffer);
      loadExpressionString(&lp->filter, bufferTmp);
    } else {
      freeExpression(&lp->filter);
      loadExpressionString(&lp->filter, buffer);
    }
  }


  return MS_TRUE;
}
",179697,"int msPostGISLayerSetTimeFilter(layerObj *lp, const char *timestring, const char *timefield)
{
  char **atimes, **aranges = NULL;
  int numtimes=0,i=0,numranges=0;
  size_t buffer_size = 512;
  char buffer[512], bufferTmp[512];

  buffer[0] = '\0';
  bufferTmp[0] = '\0';

   if (!lp || !timestring || !timefield)
     return MS_FALSE;
 
   /* discrete time */
   if (strstr(timestring, "","") == NULL &&
       strstr(timestring, ""/"") == NULL) { /* discrete time */
    createPostgresTimeCompareSimple(timefield, timestring, buffer, buffer_size);
  } else {

    /* multiple times, or ranges */
    atimes = msStringSplit (timestring, ',', &numtimes);
    if (atimes == NULL || numtimes < 1)
      return MS_FALSE;

    strlcat(buffer, ""("", buffer_size);
    for(i=0; i<numtimes; i++) {
      if(i!=0) {
        strlcat(buffer, "" OR "", buffer_size);
      }
      strlcat(buffer, ""("", buffer_size);
      aranges = msStringSplit(atimes[i],  '/', &numranges);
      if(!aranges) return MS_FALSE;
      if(numranges == 1) {
        /* we don't have range, just a simple time */
        createPostgresTimeCompareSimple(timefield, atimes[i], bufferTmp, buffer_size);
        strlcat(buffer, bufferTmp, buffer_size);
      } else if(numranges == 2) {
        /* we have a range */
        createPostgresTimeCompareRange(timefield, aranges[0], aranges[1], bufferTmp, buffer_size);
        strlcat(buffer, bufferTmp, buffer_size);
      } else {
        return MS_FALSE;
      }
      msFreeCharArray(aranges, numranges);
      strlcat(buffer, "")"", buffer_size);
    }
    strlcat(buffer, "")"", buffer_size);
    msFreeCharArray(atimes, numtimes);
  }
  if(!*buffer) {
    return MS_FALSE;
  }
  if(lp->filteritem) free(lp->filteritem);
  lp->filteritem = msStrdup(timefield);
  if (&lp->filter) {
    /* if the filter is set and it's a string type, concatenate it with
       the time. If not just free it */
    if (lp->filter.type == MS_EXPRESSION) {
      snprintf(bufferTmp, buffer_size, ""(%s) and %s"", lp->filter.string, buffer);
      loadExpressionString(&lp->filter, bufferTmp);
    } else {
      freeExpression(&lp->filter);
      loadExpressionString(&lp->filter, buffer);
    }
  }


  return MS_TRUE;
}
","int msPostGISLayerSetTimeFilter(layerObj *lp, const char *timestring, const char *timefield)
{
  char **atimes, **aranges = NULL;
  int numtimes=0,i=0,numranges=0;
  size_t buffer_size = 512;
  char buffer[512], bufferTmp[512];

  buffer[0] = '\0';
  bufferTmp[0] = '\0';

   if (!lp || !timestring || !timefield)
     return MS_FALSE;
 
  if( strchr(timestring,'\'') || strchr(timestring, '\\') ) {
     msSetError(MS_MISCERR, ""Invalid time filter."", ""msPostGISLayerSetTimeFilter()"");
     return MS_FALSE;
  }

   /* discrete time */
   if (strstr(timestring, "","") == NULL &&
       strstr(timestring, ""/"") == NULL) { /* discrete time */
    createPostgresTimeCompareSimple(timefield, timestring, buffer, buffer_size);
  } else {

    /* multiple times, or ranges */
    atimes = msStringSplit (timestring, ',', &numtimes);
    if (atimes == NULL || numtimes < 1)
      return MS_FALSE;

    strlcat(buffer, ""("", buffer_size);
    for(i=0; i<numtimes; i++) {
      if(i!=0) {
        strlcat(buffer, "" OR "", buffer_size);
      }
      strlcat(buffer, ""("", buffer_size);
      aranges = msStringSplit(atimes[i],  '/', &numranges);
      if(!aranges) return MS_FALSE;
      if(numranges == 1) {
        /* we don't have range, just a simple time */
        createPostgresTimeCompareSimple(timefield, atimes[i], bufferTmp, buffer_size);
        strlcat(buffer, bufferTmp, buffer_size);
      } else if(numranges == 2) {
        /* we have a range */
        createPostgresTimeCompareRange(timefield, aranges[0], aranges[1], bufferTmp, buffer_size);
        strlcat(buffer, bufferTmp, buffer_size);
      } else {
        return MS_FALSE;
      }
      msFreeCharArray(aranges, numranges);
      strlcat(buffer, "")"", buffer_size);
    }
    strlcat(buffer, "")"", buffer_size);
    msFreeCharArray(atimes, numtimes);
  }
  if(!*buffer) {
    return MS_FALSE;
  }
  if(lp->filteritem) free(lp->filteritem);
  lp->filteritem = msStrdup(timefield);
  if (&lp->filter) {
    /* if the filter is set and it's a string type, concatenate it with
       the time. If not just free it */
    if (lp->filter.type == MS_EXPRESSION) {
      snprintf(bufferTmp, buffer_size, ""(%s) and %s"", lp->filter.string, buffer);
      loadExpressionString(&lp->filter, bufferTmp);
    } else {
      freeExpression(&lp->filter);
      loadExpressionString(&lp->filter, buffer);
    }
  }


  return MS_TRUE;
}
","The function `msPostGISLayerSetTimeFilter` is designed to set a time filter for a given layer in a PostGIS context. It takes a layer object, a time string, and a time field as inputs. The function first checks for valid inputs and then determines if the time string represents a discrete time or multiple times/ranges. It constructs a SQL-compatible filter string based on the provided time criteria, utilizing helper functions to handle simple comparisons and ranges. Finally, it updates the layer's filter with the newly created time filter, ensuring proper memory management throughout the process.","The code defines a function that sets a time filter for a specified layer in a spatial database. It begins by validating the input parameters and determining whether the time input represents a single value or multiple values/ranges. Based on this assessment, it constructs a SQL-compatible filter string that accommodates both simple time comparisons and ranges. The function then updates the layer's filter with the newly created time filter, ensuring that any existing filter is appropriately managed. Overall, it facilitates the dynamic application of time-based queries to spatial data layers.","The vulnerability in the original code, identified as CWE-89 (SQL Injection), arises from the lack of input validation for the `timestring` variable, which could allow an attacker to inject malicious SQL code. Specifically, the absence of checks for special characters like single quotes or backslashes could lead to unintended SQL commands being executed. The fixed code addresses this vulnerability by introducing a validation step that checks for these characters in the `timestring`. If such characters are found, an error is raised, and the function returns early, thereby preventing potential SQL injection attacks.","The vulnerability in the original code, classified as CWE-89 (SQL Injection), stems from inadequate input validation, allowing an attacker to manipulate the input to execute arbitrary SQL commands. This occurs because the code does not check for potentially harmful characters that could alter the intended SQL query. The fixed version addresses this issue by implementing a validation step that checks for the presence of specific characters associated with SQL injection attacks. If such characters are detected, the function raises an error and terminates early, effectively mitigating the risk of SQL injection vulnerabilities.","The vulnerability was fixed by adding a validation check for the `timestring` variable to detect the presence of potentially harmful characters, specifically single quotes and backslashes. In the updated code, the condition `if( strchr(timestring,'\'') || strchr(timestring, '\\') )` is introduced to identify these characters. If found, the function triggers an error using `msSetError` and returns early with a failure status. This proactive validation step prevents malicious input from being processed further, thereby safeguarding against SQL injection attacks and ensuring that only safe, expected input is handled.","The vulnerability was fixed by implementing a validation mechanism that checks the input for potentially dangerous characters associated with SQL injection attacks. This new validation step occurs before any processing of the input, ensuring that if harmful characters are detected, an error is raised, and the function exits early. By rejecting inputs that contain these characters, the code effectively prevents malicious manipulation of SQL queries, thereby enhancing the security of the application. This proactive approach ensures that only safe and expected input is allowed to proceed, significantly reducing the risk of SQL injection vulnerabilities.","CWE-89,CWE-943,CWE-564,CWE-20,CWE-74,CWE-79,CWE-116,CWE-95,CWE-77,CWE-78",Y,1.0,"5,5","5,5","4,4","4,5"
1,1,182886,182886,,Remote,Not required,Partial,CVE-2019-10664,https://www.cvedetails.com/cve/CVE-2019-10664/,CWE-89,Low,Partial,Partial,,2019-03-31,7.5,Domoticz before 4.10578 allows SQL Injection via the idx parameter in CWebServer::GetFloorplanImage in WebServer.cpp.,2019-05-03,Sql ,1,https://github.com/domoticz/domoticz/commit/ee70db46f81afa582c96b887b73bcd2a86feda00,ee70db46f81afa582c96b887b73bcd2a86feda00,Fixed possible SQL Injection Vulnerability (Thanks to Fabio Carretto!),1,main/WebServer.cpp,"{""sha"": ""ece2155fd2133e0666889f88a3e332ad42917a4b"", ""filename"": ""main/WebServer.cpp"", ""status"": ""modified"", ""additions"": 1, ""deletions"": 1, ""changes"": 2, ""blob_url"": ""https://github.com/domoticz/domoticz/blob/ee70db46f81afa582c96b887b73bcd2a86feda00/main/WebServer.cpp"", ""raw_url"": ""https://github.com/domoticz/domoticz/raw/ee70db46f81afa582c96b887b73bcd2a86feda00/main/WebServer.cpp"", ""contents_url"": ""https://api.github.com/repos/domoticz/domoticz/contents/main/WebServer.cpp?ref=ee70db46f81afa582c96b887b73bcd2a86feda00"", ""patch"": ""@@ -10772,7 +10772,7 @@ namespace http {\n \t\t\t\treturn;\n \t\t\t}\n \t\t\tstd::vector<std::vector<std::string> > result;\n-\t\t\tresult = m_sql.safe_queryBlob(\""SELECT Image FROM Floorplans WHERE ID=%s\"", idx.c_str());\n+\t\t\tresult = m_sql.safe_queryBlob(\""SELECT Image FROM Floorplans WHERE ID=%d\"", atol(idx.c_str()));\n \t\t\tif (result.empty())\n \t\t\t\treturn;\n \t\t\treply::set_content(&rep, result[0][0].begin(), result[0][0].end());""}","		void CWebServer::GetFloorplanImage(WebEmSession & session, const request& req, reply & rep)
		{
			std::string idx = request::findValue(&req, ""idx"");
			if (idx == """") {
 				return;
 			}
 			std::vector<std::vector<std::string> > result;
			result = m_sql.safe_queryBlob(""SELECT Image FROM Floorplans WHERE ID=%d"", atol(idx.c_str()));
 			if (result.empty())
 				return;
 			reply::set_content(&rep, result[0][0].begin(), result[0][0].end());
			std::string oname = ""floorplan"";
			if (result[0][0].size() > 10)
			{
				if (result[0][0][0] == 'P')
					oname += "".png"";
				else if (result[0][0][0] == -1)
					oname += "".jpg"";
				else if (result[0][0][0] == 'B')
					oname += "".bmp"";
				else if (result[0][0][0] == 'G')
					oname += "".gif"";
			}
			reply::add_header_attachment(&rep, oname);
		}
","		void CWebServer::GetFloorplanImage(WebEmSession & session, const request& req, reply & rep)
		{
			std::string idx = request::findValue(&req, ""idx"");
			if (idx == """") {
 				return;
 			}
 			std::vector<std::vector<std::string> > result;
			result = m_sql.safe_queryBlob(""SELECT Image FROM Floorplans WHERE ID=%s"", idx.c_str());
 			if (result.empty())
 				return;
 			reply::set_content(&rep, result[0][0].begin(), result[0][0].end());
			std::string oname = ""floorplan"";
			if (result[0][0].size() > 10)
			{
				if (result[0][0][0] == 'P')
					oname += "".png"";
				else if (result[0][0][0] == -1)
					oname += "".jpg"";
				else if (result[0][0][0] == 'B')
					oname += "".bmp"";
				else if (result[0][0][0] == 'G')
					oname += "".gif"";
			}
			reply::add_header_attachment(&rep, oname);
		}
",C,"			result = m_sql.safe_queryBlob(""SELECT Image FROM Floorplans WHERE ID=%d"", atol(idx.c_str()));
","			result = m_sql.safe_queryBlob(""SELECT Image FROM Floorplans WHERE ID=%s"", idx.c_str());
",,"@@ -10772,7 +10772,7 @@ namespace http {
 				return;
 			}
 			std::vector<std::vector<std::string> > result;
-			result = m_sql.safe_queryBlob(""SELECT Image FROM Floorplans WHERE ID=%s"", idx.c_str());
+			result = m_sql.safe_queryBlob(""SELECT Image FROM Floorplans WHERE ID=%d"", atol(idx.c_str()));
 			if (result.empty())
 				return;
 			reply::set_content(&rep, result[0][0].begin(), result[0][0].end());",domoticz,ee70db46f81afa582c96b887b73bcd2a86feda00,9c9319ace1f0a76b12bf349d62f455a506d286df,1,"		void CWebServer::GetFloorplanImage(WebEmSession & session, const request& req, reply & rep)
		{
			std::string idx = request::findValue(&req, ""idx"");
			if (idx == """") {
 				return;
 			}
 			std::vector<std::vector<std::string> > result;
//flaw_line_below:
			result = m_sql.safe_queryBlob(""SELECT Image FROM Floorplans WHERE ID=%s"", idx.c_str());
//fix_flaw_line_below:
//			result = m_sql.safe_queryBlob(""SELECT Image FROM Floorplans WHERE ID=%d"", atol(idx.c_str()));
 			if (result.empty())
 				return;
 			reply::set_content(&rep, result[0][0].begin(), result[0][0].end());
			std::string oname = ""floorplan"";
			if (result[0][0].size() > 10)
			{
				if (result[0][0][0] == 'P')
					oname += "".png"";
				else if (result[0][0][0] == -1)
					oname += "".jpg"";
				else if (result[0][0][0] == 'B')
					oname += "".bmp"";
				else if (result[0][0][0] == 'G')
					oname += "".gif"";
			}
			reply::add_header_attachment(&rep, oname);
		}
",182886,"		void CWebServer::GetFloorplanImage(WebEmSession & session, const request& req, reply & rep)
		{
			std::string idx = request::findValue(&req, ""idx"");
			if (idx == """") {
 				return;
 			}
 			std::vector<std::vector<std::string> > result;
			result = m_sql.safe_queryBlob(""SELECT Image FROM Floorplans WHERE ID=%s"", idx.c_str());
 			if (result.empty())
 				return;
 			reply::set_content(&rep, result[0][0].begin(), result[0][0].end());
			std::string oname = ""floorplan"";
			if (result[0][0].size() > 10)
			{
				if (result[0][0][0] == 'P')
					oname += "".png"";
				else if (result[0][0][0] == -1)
					oname += "".jpg"";
				else if (result[0][0][0] == 'B')
					oname += "".bmp"";
				else if (result[0][0][0] == 'G')
					oname += "".gif"";
			}
			reply::add_header_attachment(&rep, oname);
		}
","		void CWebServer::GetFloorplanImage(WebEmSession & session, const request& req, reply & rep)
		{
			std::string idx = request::findValue(&req, ""idx"");
			if (idx == """") {
 				return;
 			}
 			std::vector<std::vector<std::string> > result;
			result = m_sql.safe_queryBlob(""SELECT Image FROM Floorplans WHERE ID=%d"", atol(idx.c_str()));
 			if (result.empty())
 				return;
 			reply::set_content(&rep, result[0][0].begin(), result[0][0].end());
			std::string oname = ""floorplan"";
			if (result[0][0].size() > 10)
			{
				if (result[0][0][0] == 'P')
					oname += "".png"";
				else if (result[0][0][0] == -1)
					oname += "".jpg"";
				else if (result[0][0][0] == 'B')
					oname += "".bmp"";
				else if (result[0][0][0] == 'G')
					oname += "".gif"";
			}
			reply::add_header_attachment(&rep, oname);
		}
","The provided code defines a method `GetFloorplanImage` within the `CWebServer` class, which retrieves and serves a floorplan image based on a given request. It first extracts an index (`idx`) from the request; if absent, the function exits. It then queries a database for the corresponding image using the index. If an image is found, it sets the content of the reply with the image data. The method also determines the appropriate file extension (PNG, JPG, BMP, or GIF) based on the image's first byte and adds a header to the reply for file attachment, naming it ""floorplan"" with the correct extension.","The code defines a method that retrieves and serves an image of a floorplan based on a specified identifier from a web request. It first checks for the presence of this identifier and exits if it is not found. Upon successfully locating the corresponding image in a database, the method sets the response content to the image data. It also determines the appropriate file format based on the image's initial byte and appends a header to the response to facilitate file downloading, ensuring the image is named appropriately according to its format.","The vulnerability in the original code, identified as CWE-89 (SQL Injection), arises from directly incorporating user input (`idx`) into an SQL query without proper validation or sanitization. This allows an attacker to manipulate the query by injecting malicious SQL code, potentially leading to unauthorized data access or modification. In the fixed code, the vulnerability is mitigated by using a safer method to convert the input to a long integer with `atol(idx.c_str())`, which ensures that the input is treated as a numeric value rather than a string, thus preventing the execution of injected SQL commands.","The vulnerability in the original code, classified as CWE-89 (SQL Injection), stems from directly incorporating user-supplied input into an SQL query without adequate validation or sanitization. This oversight allows an attacker to manipulate the input to execute arbitrary SQL commands, potentially compromising the database's integrity and security. The fixed code addresses this issue by converting the user input into a numeric format before using it in the query, ensuring that it is treated as a safe value rather than a string. This change effectively mitigates the risk of SQL injection by preventing malicious input from altering the intended SQL command.","The vulnerability was fixed by modifying how the user input, specifically the `idx` variable, is handled before it is used in the SQL query. In the original code, the input was directly included in the query string, which posed a risk for SQL injection. The revised code uses `atol(idx.c_str())` to convert the input into a long integer, ensuring that it is treated as a numeric value. This change prevents the execution of any injected SQL commands, as the input is no longer directly concatenated into the query string, thereby enhancing the security of the database interaction.","The vulnerability was fixed by changing the way user input is processed before being used in the SQL query. Instead of directly incorporating the input into the query string, which could allow for SQL injection, the updated code converts the input into a numeric format. This ensures that the input is treated as a safe value rather than a string, effectively preventing any malicious SQL commands from being executed. By sanitizing the input in this manner, the risk of unauthorized access or manipulation of the database is significantly reduced, enhancing the overall security of the application.","CWE-89, CWE-20, CWE-74, CWE-707, CWE-943, CWE-564, CWE-116, CWE-79, CWE-77, CWE-78",Y,1.0,"4,4","5,5","5,5","4,4"
