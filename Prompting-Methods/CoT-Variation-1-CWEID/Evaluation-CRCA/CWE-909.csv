,Unnamed: 0.2,Unnamed: 0.1,Unnamed: 0,Access Gained,Attack Origin,Authentication Required,Availability,CVE ID,CVE Page,CWE ID,Complexity,Confidentiality,Integrity,Known Exploits,Publish Date,Score,Summary,Update Date,Vulnerability Classification,add_lines,codeLink,commit_id,commit_message,del_lines,file_name,files_changed,func_after,func_before,lang,lines_after,lines_before,parentID,patch,project,project_after,project_before,vul,vul_func_with_fix,idx,primevul_func_before_fix,primevul_func_after_fix,C1_Description_of_Functionality_In_Context,C2_Description_of_Functionality_Generic,C3_Explanation_of_Vulnerability_In_Context,C4_Explanation_of_Vulnerability_Generic,C5_Explanation_Vulnerability_Fixed_In_Context,C6_Explanation_Vulnerability_Fixed_Generic,G1_Clarity_C3_C5,G2_Relevance_C3_C5,G3_Completeness_C3_C5,G4_Actionability_C3_C5
0,0,188095,188095,,Local,Not required,Complete,CVE-2018-9511,https://www.cvedetails.com/cve/CVE-2018-9511/,CWE-909,Low,,,,2018-10-02,4.9,"In ipSecSetEncapSocketOwner of XfrmController.cpp, there is a possible failure to initialize a security feature due to uninitialized data. This could lead to local denial of service of IPsec on sockets with no additional execution privileges needed. User interaction is not needed for exploitation. Product: Android Versions: Android-9.0 Android ID: A-111650288",2019-10-02,DoS ,1,https://android.googlesource.com/platform/system/netd/+/931418b16c7197ca2df34c2a5609e49791125abe,931418b16c7197ca2df34c2a5609e49791125abe,"Set optlen for UDP-encap check in XfrmController

When setting the socket owner for an encap socket XfrmController will
first attempt to verify that the socket has the UDP-encap socket option
set. When doing so it would pass in an uninitialized optlen parameter
which could cause the call to not modify the option value if the optlen
happened to be too short. So for example if the stack happened to
contain a zero where optlen was located the check would fail and the
socket owner would not be changed.

Fix this by setting optlen to the size of the option value parameter.

Test: run cts -m CtsNetTestCases
BUG: 111650288
Change-Id: I57b6e9dba09c1acda71e3ec2084652e961667bd9
(cherry picked from commit fc42a105147310bd680952d4b71fe32974bd8506)
",1,server/XfrmController.cpp,"{""filename"": ""server/XfrmController.cpp"", ""raw_url"": ""https://android.googlesource.com/platform/system/netd/+/931418b16c7197ca2df34c2a5609e49791125abe/server/XfrmController.cpp"", ""patch"": ""@@ -436,7 +436,7 @@\n\n     }\n \n     int optval;\n-    socklen_t optlen;\n+    socklen_t optlen = sizeof(optval);\n     netdutils::Status status =\n         getSyscallInstance().getsockopt(Fd(socket), IPPROTO_UDP, UDP_ENCAP, &optval, &optlen);\n     if (status != netdutils::status::ok) {\n""}","netdutils::Status XfrmController::ipSecSetEncapSocketOwner(const android::base::unique_fd& socket,
 int newUid, uid_t callerUid) {
    ALOGD(""XfrmController:%s, line=%d"", __FUNCTION__, __LINE__);

 const int fd = socket.get();
 struct stat info;
 if (fstat(fd, &info)) {
 return netdutils::statusFromErrno(errno, ""Failed to stat socket file descriptor"");
 }
 if (info.st_uid != callerUid) {
 return netdutils::statusFromErrno(EPERM, ""fchown disabled for non-owner calls"");
 }
 if (S_ISSOCK(info.st_mode) == 0) {
 return netdutils::statusFromErrno(EINVAL, ""File descriptor was not a socket"");

     }
 
     int optval;
    socklen_t optlen = sizeof(optval);
     netdutils::Status status =
         getSyscallInstance().getsockopt(Fd(socket), IPPROTO_UDP, UDP_ENCAP, &optval, &optlen);
     if (status != netdutils::status::ok) {
 return status;
 }
 if (optval != UDP_ENCAP_ESPINUDP && optval != UDP_ENCAP_ESPINUDP_NON_IKE) {
 return netdutils::statusFromErrno(EINVAL, ""Socket did not have UDP-encap sockopt set"");
 }
 if (fchown(fd, newUid, -1)) {
 return netdutils::statusFromErrno(errno, ""Failed to fchown socket file descriptor"");
 }

 return netdutils::status::ok;
}
","netdutils::Status XfrmController::ipSecSetEncapSocketOwner(const android::base::unique_fd& socket,
 int newUid, uid_t callerUid) {
    ALOGD(""XfrmController:%s, line=%d"", __FUNCTION__, __LINE__);

 const int fd = socket.get();
 struct stat info;
 if (fstat(fd, &info)) {
 return netdutils::statusFromErrno(errno, ""Failed to stat socket file descriptor"");
 }
 if (info.st_uid != callerUid) {
 return netdutils::statusFromErrno(EPERM, ""fchown disabled for non-owner calls"");
 }
 if (S_ISSOCK(info.st_mode) == 0) {
 return netdutils::statusFromErrno(EINVAL, ""File descriptor was not a socket"");

     }
 
     int optval;
    socklen_t optlen;
     netdutils::Status status =
         getSyscallInstance().getsockopt(Fd(socket), IPPROTO_UDP, UDP_ENCAP, &optval, &optlen);
     if (status != netdutils::status::ok) {
 return status;
 }
 if (optval != UDP_ENCAP_ESPINUDP && optval != UDP_ENCAP_ESPINUDP_NON_IKE) {
 return netdutils::statusFromErrno(EINVAL, ""Socket did not have UDP-encap sockopt set"");
 }
 if (fchown(fd, newUid, -1)) {
 return netdutils::statusFromErrno(errno, ""Failed to fchown socket file descriptor"");
 }

 return netdutils::status::ok;
}
",C,"    socklen_t optlen = sizeof(optval);
","    socklen_t optlen;
",,"@@ -436,7 +436,7 @@

     }
 
     int optval;
-    socklen_t optlen;
+    socklen_t optlen = sizeof(optval);
     netdutils::Status status =
         getSyscallInstance().getsockopt(Fd(socket), IPPROTO_UDP, UDP_ENCAP, &optval, &optlen);
     if (status != netdutils::status::ok) {
",Android,https://android.googlesource.com/platform/system/netd/+/931418b16c7197ca2df34c2a5609e49791125abe/,https://android.googlesource.com/platform/system/netd/+/931418b16c7197ca2df34c2a5609e49791125abe%5E/,1,"netdutils::Status XfrmController::ipSecSetEncapSocketOwner(const android::base::unique_fd& socket,
 int newUid, uid_t callerUid) {
    ALOGD(""XfrmController:%s, line=%d"", __FUNCTION__, __LINE__);

 const int fd = socket.get();
 struct stat info;
 if (fstat(fd, &info)) {
 return netdutils::statusFromErrno(errno, ""Failed to stat socket file descriptor"");
 }
 if (info.st_uid != callerUid) {
 return netdutils::statusFromErrno(EPERM, ""fchown disabled for non-owner calls"");
 }
 if (S_ISSOCK(info.st_mode) == 0) {
 return netdutils::statusFromErrno(EINVAL, ""File descriptor was not a socket"");

     }
 
     int optval;
//flaw_line_below:
    socklen_t optlen;
//fix_flaw_line_below:
//    socklen_t optlen = sizeof(optval);
     netdutils::Status status =
         getSyscallInstance().getsockopt(Fd(socket), IPPROTO_UDP, UDP_ENCAP, &optval, &optlen);
     if (status != netdutils::status::ok) {
 return status;
 }
 if (optval != UDP_ENCAP_ESPINUDP && optval != UDP_ENCAP_ESPINUDP_NON_IKE) {
 return netdutils::statusFromErrno(EINVAL, ""Socket did not have UDP-encap sockopt set"");
 }
 if (fchown(fd, newUid, -1)) {
 return netdutils::statusFromErrno(errno, ""Failed to fchown socket file descriptor"");
 }

 return netdutils::status::ok;
}
",188095,"netdutils::Status XfrmController::ipSecSetEncapSocketOwner(const android::base::unique_fd& socket,
 int newUid, uid_t callerUid) {
    ALOGD(""XfrmController:%s, line=%d"", __FUNCTION__, __LINE__);

 const int fd = socket.get();
 struct stat info;
 if (fstat(fd, &info)) {
 return netdutils::statusFromErrno(errno, ""Failed to stat socket file descriptor"");
 }
 if (info.st_uid != callerUid) {
 return netdutils::statusFromErrno(EPERM, ""fchown disabled for non-owner calls"");
 }
 if (S_ISSOCK(info.st_mode) == 0) {
 return netdutils::statusFromErrno(EINVAL, ""File descriptor was not a socket"");

     }
 
     int optval;
    socklen_t optlen;
     netdutils::Status status =
         getSyscallInstance().getsockopt(Fd(socket), IPPROTO_UDP, UDP_ENCAP, &optval, &optlen);
     if (status != netdutils::status::ok) {
 return status;
 }
 if (optval != UDP_ENCAP_ESPINUDP && optval != UDP_ENCAP_ESPINUDP_NON_IKE) {
 return netdutils::statusFromErrno(EINVAL, ""Socket did not have UDP-encap sockopt set"");
 }
 if (fchown(fd, newUid, -1)) {
 return netdutils::statusFromErrno(errno, ""Failed to fchown socket file descriptor"");
 }

 return netdutils::status::ok;
}
","netdutils::Status XfrmController::ipSecSetEncapSocketOwner(const android::base::unique_fd& socket,
 int newUid, uid_t callerUid) {
    ALOGD(""XfrmController:%s, line=%d"", __FUNCTION__, __LINE__);

 const int fd = socket.get();
 struct stat info;
 if (fstat(fd, &info)) {
 return netdutils::statusFromErrno(errno, ""Failed to stat socket file descriptor"");
 }
 if (info.st_uid != callerUid) {
 return netdutils::statusFromErrno(EPERM, ""fchown disabled for non-owner calls"");
 }
 if (S_ISSOCK(info.st_mode) == 0) {
 return netdutils::statusFromErrno(EINVAL, ""File descriptor was not a socket"");

     }
 
     int optval;
    socklen_t optlen = sizeof(optval);
     netdutils::Status status =
         getSyscallInstance().getsockopt(Fd(socket), IPPROTO_UDP, UDP_ENCAP, &optval, &optlen);
     if (status != netdutils::status::ok) {
 return status;
 }
 if (optval != UDP_ENCAP_ESPINUDP && optval != UDP_ENCAP_ESPINUDP_NON_IKE) {
 return netdutils::statusFromErrno(EINVAL, ""Socket did not have UDP-encap sockopt set"");
 }
 if (fchown(fd, newUid, -1)) {
 return netdutils::statusFromErrno(errno, ""Failed to fchown socket file descriptor"");
 }

 return netdutils::status::ok;
}
","The `ipSecSetEncapSocketOwner` function in the `XfrmController` class is designed to change the ownership of a specified socket to a new user ID (`newUid`). It first verifies that the caller is the owner of the socket by checking the socket's user ID against the `callerUid`. The function also ensures that the provided file descriptor corresponds to a valid socket and checks if the socket has the appropriate UDP encapsulation options set. If all conditions are met, it attempts to change the socket's ownership using `fchown`. The function returns a status indicating success or the type of error encountered during execution.","The provided code defines a function that modifies the ownership of a socket based on specific conditions. It begins by logging the function's execution and then checks the ownership of the socket to ensure the caller is the original owner. The function verifies that the file descriptor corresponds to a valid socket and confirms that it has the correct encapsulation options set. If these checks pass, it attempts to change the socket's ownership to a new user ID. The function ultimately returns a status indicating whether the operation was successful or if an error occurred during the process.","The vulnerability in the original code, identified as CWE-909, arises from insufficient validation of the socket's properties before changing its ownership. Specifically, the lack of a check for the socket's encapsulation options could allow an unauthorized user to gain access to sensitive resources by manipulating the socket. In the fixed code, the addition of a check for the socket's encapsulation options using `getsockopt` ensures that only sockets with the correct UDP encapsulation settings are eligible for ownership changes. This enhancement mitigates the risk of privilege escalation by enforcing stricter validation criteria before executing the `fchown` operation.","The vulnerability identified as CWE-909 in the original code stems from inadequate validation of socket properties before allowing ownership changes. Specifically, the code failed to verify whether the socket had the appropriate encapsulation options set, which could enable unauthorized users to manipulate socket ownership and potentially escalate privileges. The fixed code addresses this issue by introducing a check for the socket's encapsulation settings, ensuring that only sockets with the correct configurations can have their ownership modified. This enhancement significantly reduces the risk of privilege escalation by enforcing stricter validation criteria prior to executing ownership changes.","The vulnerability was fixed by adding a validation step that checks the socket's encapsulation options before allowing ownership changes. In the updated code, the `getsockopt` function is used to retrieve the encapsulation option value, which is stored in the `optval` variable. The code then verifies that this value matches the expected encapsulation types, specifically `UDP_ENCAP_ESPINUDP` or `UDP_ENCAP_ESPINUDP_NON_IKE`. By ensuring that only sockets with the correct encapsulation settings can proceed to the `fchown` operation, the fix effectively mitigates the risk of unauthorized privilege escalation associated with socket ownership changes.","The vulnerability was addressed by implementing an additional validation step that checks the encapsulation options of the socket before allowing any changes to its ownership. The updated code retrieves the encapsulation setting and verifies that it matches specific expected values. This ensures that only sockets configured with the correct encapsulation can have their ownership modified. By enforcing this stricter validation, the fix effectively prevents unauthorized users from manipulating socket ownership and reduces the risk of privilege escalation, thereby enhancing the overall security of the system.","5,5","5,5","4,4","4, 4"
