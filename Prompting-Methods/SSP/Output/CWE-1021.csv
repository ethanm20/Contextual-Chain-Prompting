,Unnamed: 0.1,Unnamed: 0,Access Gained,Attack Origin,Authentication Required,Availability,CVE ID,CVE Page,CWE ID,Complexity,Confidentiality,Integrity,Known Exploits,Publish Date,Score,Summary,Update Date,Vulnerability Classification,add_lines,codeLink,commit_id,commit_message,del_lines,file_name,files_changed,func_after,func_before,lang,lines_after,lines_before,parentID,patch,project,project_after,project_before,vul,vul_func_with_fix,idx,primevul_func_before_fix,primevul_func_after_fix,C5_Explanation_Vulnerability_Fixed_In_Context,C6_Explanation_Vulnerability_Fixed_Generic
0,186460,186460,,Remote,Not required,,CVE-2017-5016,https://www.cvedetails.com/cve/CVE-2017-5016/,CWE-1021,Medium,,Partial,,2017-02-17,4.3,"Blink in Google Chrome prior to 56.0.2924.76 for Linux, Windows and Mac, and 56.0.2924.87 for Android, failed to prevent certain UI elements from being displayed by non-visible pages, which allowed a remote attacker to show certain UI elements on a page they don't control via a crafted HTML page.",2019-10-02,,1,https://github.com/chromium/chromium/commit/a8e17a3031b6ad69c399e5e04dd0084e577097fc,a8e17a3031b6ad69c399e5e04dd0084e577097fc,"Form validation: Do not show validation bubble if the page is invisible.

BUG=673163

Review-Url: https://codereview.chromium.org/2572813003
Cr-Commit-Position: refs/heads/master@{#438476}",1,third_party/WebKit/Source/core/html/HTMLFormControlElement.cpp,"{""sha"": ""9e5926ab83fe369e2ab3a18f3feec8d637b1ce0b"", ""filename"": ""third_party/WebKit/Source/core/html/HTMLFormControlElement.cpp"", ""status"": ""modified"", ""additions"": 1, ""deletions"": 1, ""changes"": 2, ""blob_url"": ""https://github.com/chromium/chromium/blob/a8e17a3031b6ad69c399e5e04dd0084e577097fc/third_party/WebKit/Source/core/html/HTMLFormControlElement.cpp"", ""raw_url"": ""https://github.com/chromium/chromium/raw/a8e17a3031b6ad69c399e5e04dd0084e577097fc/third_party/WebKit/Source/core/html/HTMLFormControlElement.cpp"", ""contents_url"": ""https://api.github.com/repos/chromium/chromium/contents/third_party/WebKit/Source/core/html/HTMLFormControlElement.cpp?ref=a8e17a3031b6ad69c399e5e04dd0084e577097fc"", ""patch"": ""@@ -452,7 +452,7 @@ void HTMLFormControlElement::findCustomValidationMessageTextDirection(\n \n void HTMLFormControlElement::updateVisibleValidationMessage() {\n   Page* page = document().page();\n-  if (!page)\n+  if (!page || !page->isPageVisible())\n     return;\n   String message;\n   if (layoutObject() && willValidate())""}"," void HTMLFormControlElement::updateVisibleValidationMessage() {
   Page* page = document().page();
  if (!page || !page->isPageVisible())
     return;
   String message;
   if (layoutObject() && willValidate())
    message = validationMessage().stripWhiteSpace();

  m_hasValidationMessage = true;
  ValidationMessageClient* client = &page->validationMessageClient();
  TextDirection messageDir = LTR;
  TextDirection subMessageDir = LTR;
  String subMessage = validationSubMessage().stripWhiteSpace();
  if (message.isEmpty())
    client->hideValidationMessage(*this);
  else
    findCustomValidationMessageTextDirection(message, messageDir, subMessage,
                                             subMessageDir);
  client->showValidationMessage(*this, message, messageDir, subMessage,
                                subMessageDir);
}
"," void HTMLFormControlElement::updateVisibleValidationMessage() {
   Page* page = document().page();
  if (!page)
     return;
   String message;
   if (layoutObject() && willValidate())
    message = validationMessage().stripWhiteSpace();

  m_hasValidationMessage = true;
  ValidationMessageClient* client = &page->validationMessageClient();
  TextDirection messageDir = LTR;
  TextDirection subMessageDir = LTR;
  String subMessage = validationSubMessage().stripWhiteSpace();
  if (message.isEmpty())
    client->hideValidationMessage(*this);
  else
    findCustomValidationMessageTextDirection(message, messageDir, subMessage,
                                             subMessageDir);
  client->showValidationMessage(*this, message, messageDir, subMessage,
                                subMessageDir);
}
",C,"  if (!page || !page->isPageVisible())
","  if (!page)
",,"@@ -452,7 +452,7 @@ void HTMLFormControlElement::findCustomValidationMessageTextDirection(
 
 void HTMLFormControlElement::updateVisibleValidationMessage() {
   Page* page = document().page();
-  if (!page)
+  if (!page || !page->isPageVisible())
     return;
   String message;
   if (layoutObject() && willValidate())",Chrome,a8e17a3031b6ad69c399e5e04dd0084e577097fc,b76d5e11df4955210c8634da71836f31762186c9,1," void HTMLFormControlElement::updateVisibleValidationMessage() {
   Page* page = document().page();
//flaw_line_below:
  if (!page)
//fix_flaw_line_below:
//  if (!page || !page->isPageVisible())
     return;
   String message;
   if (layoutObject() && willValidate())
    message = validationMessage().stripWhiteSpace();

  m_hasValidationMessage = true;
  ValidationMessageClient* client = &page->validationMessageClient();
  TextDirection messageDir = LTR;
  TextDirection subMessageDir = LTR;
  String subMessage = validationSubMessage().stripWhiteSpace();
  if (message.isEmpty())
    client->hideValidationMessage(*this);
  else
    findCustomValidationMessageTextDirection(message, messageDir, subMessage,
                                             subMessageDir);
  client->showValidationMessage(*this, message, messageDir, subMessage,
                                subMessageDir);
}
",186460," void HTMLFormControlElement::updateVisibleValidationMessage() {
   Page* page = document().page();
  if (!page)
     return;
   String message;
   if (layoutObject() && willValidate())
    message = validationMessage().stripWhiteSpace();

  m_hasValidationMessage = true;
  ValidationMessageClient* client = &page->validationMessageClient();
  TextDirection messageDir = LTR;
  TextDirection subMessageDir = LTR;
  String subMessage = validationSubMessage().stripWhiteSpace();
  if (message.isEmpty())
    client->hideValidationMessage(*this);
  else
    findCustomValidationMessageTextDirection(message, messageDir, subMessage,
                                             subMessageDir);
  client->showValidationMessage(*this, message, messageDir, subMessage,
                                subMessageDir);
}
"," void HTMLFormControlElement::updateVisibleValidationMessage() {
   Page* page = document().page();
  if (!page || !page->isPageVisible())
     return;
   String message;
   if (layoutObject() && willValidate())
    message = validationMessage().stripWhiteSpace();

  m_hasValidationMessage = true;
  ValidationMessageClient* client = &page->validationMessageClient();
  TextDirection messageDir = LTR;
  TextDirection subMessageDir = LTR;
  String subMessage = validationSubMessage().stripWhiteSpace();
  if (message.isEmpty())
    client->hideValidationMessage(*this);
  else
    findCustomValidationMessageTextDirection(message, messageDir, subMessage,
                                             subMessageDir);
  client->showValidationMessage(*this, message, messageDir, subMessage,
                                subMessageDir);
}
","The vulnerability in the original code lies in the lack of a check for the visibility of the page before displaying validation messages. Specifically, the function `updateVisibleValidationMessage()` would proceed to show a validation message even if the page was not visible, potentially leading to user confusion or misuse of resources. The fix was implemented by adding a condition to the initial `if` statement: `!page || !page->isPageVisible()`, which ensures that the function exits early if the page is either null or not visible, thereby preventing unnecessary validation message display when the user cannot see it.","The vulnerability in the original code stems from the absence of a visibility check for the page before attempting to display validation messages. This oversight could lead to situations where validation messages are shown even when the page is not visible, potentially causing confusion for users and wasting resources. The fix addresses this issue by introducing an additional condition that verifies whether the page is visible before proceeding with any validation message operations. This ensures that validation messages are only displayed when the page is actively being viewed, enhancing user experience and resource management."
