,CWE ID,project,commit_id_before_fix,commit_id_after_fix,target,primevul_idx,hash,size,message,dataset,primevul_func_before_fix,primevul_func_after_fix,big_vul_idx
552,"""CWE-79""",monit,328f60773057641c4b2075fab9820145e95b728c,328f60773057641c4b2075fab9820145e95b728c,0,517437,2.216556174545314e+38,,,other,"static void do_viewlog(HttpRequest req, HttpResponse res) {
        if (is_readonly(req)) {
                send_error(req, res, SC_FORBIDDEN, ""You do not have sufficient privileges to access this page"");
                return;
        }
        do_head(res, ""_viewlog"", ""View log"", 100);
        if ((Run.flags & Run_Log) && ! (Run.flags & Run_UseSyslog)) {
                FILE *f = fopen(Run.files.log, ""r"");
                if (f) {
                        size_t n;
                        char buf[512];
                        StringBuffer_append(res->outputbuffer, ""<br><p><form><textarea cols=120 rows=30 readonly>"");
                        while ((n = fread(buf, sizeof(char), sizeof(buf) - 1, f)) > 0) {
                                buf[n] = 0;
                                StringBuffer_append(res->outputbuffer, ""%s"", buf);
                        }
                        fclose(f);
                        StringBuffer_append(res->outputbuffer, ""</textarea></form>"");
                } else {
                        StringBuffer_append(res->outputbuffer, ""Error opening logfile: %s"", STRERROR);
                }
        } else {
                StringBuffer_append(res->outputbuffer,
                                    ""<b>Cannot view logfile:</b><br>"");
                if (! (Run.flags & Run_Log))
                        StringBuffer_append(res->outputbuffer, ""Monit was started without logging"");
                else
                        StringBuffer_append(res->outputbuffer, ""Monit uses syslog"");
        }
        do_foot(res);
}","static void do_viewlog(HttpRequest req, HttpResponse res) {
        if (is_readonly(req)) {
                send_error(req, res, SC_FORBIDDEN, ""You do not have sufficient privileges to access this page"");
                return;
        }
        do_head(res, ""_viewlog"", ""View log"", 100);
        if ((Run.flags & Run_Log) && ! (Run.flags & Run_UseSyslog)) {
                FILE *f = fopen(Run.files.log, ""r"");
                if (f) {
                        size_t n;
                        char buf[512];
                        StringBuffer_append(res->outputbuffer, ""<br><p><form><textarea cols=120 rows=30 readonly>"");
                        while ((n = fread(buf, sizeof(char), sizeof(buf) - 1, f)) > 0) {
                                buf[n] = 0;
                                escapeHTML(res->outputbuffer, buf);
                        }
                        fclose(f);
                        StringBuffer_append(res->outputbuffer, ""</textarea></form>"");
                } else {
                        StringBuffer_append(res->outputbuffer, ""Error opening logfile: %s"", STRERROR);
                }
        } else {
                StringBuffer_append(res->outputbuffer,
                                    ""<b>Cannot view logfile:</b><br>"");
                if (! (Run.flags & Run_Log))
                        StringBuffer_append(res->outputbuffer, ""Monit was started without logging"");
                else
                        StringBuffer_append(res->outputbuffer, ""Monit uses syslog"");
        }
        do_foot(res);
}",
2706,"""CWE-79""",elog,993bed4923c88593cc6b1186e0d1b9564994a25a,993bed4923c88593cc6b1186e0d1b9564994a25a,0,519320,1.8426851220626115e+38,,,other,"void send_file_direct(char *file_name) {
   int fh, i, length, delta;
   char str[MAX_PATH_LENGTH], dir[MAX_PATH_LENGTH], charset[80];

   getcwd(dir, sizeof(dir));
   fh = open(file_name, O_RDONLY | O_BINARY);
   if (fh > 0) {
      lseek(fh, 0, SEEK_END);
      length = TELL(fh);
      lseek(fh, 0, SEEK_SET);

      rsprintf(""HTTP/1.1 200 Document follows\r\n"");
      rsprintf(""Server: ELOG HTTP %s-%s\r\n"", VERSION, git_revision());
      rsprintf(""Accept-Ranges: bytes\r\n"");

      /* set expiration time to one day if no thumbnail */
      if (isparam(""thumb"")) {
         rsprintf(""Pragma: no-cache\r\n"");
         rsprintf(""Cache-control: private, max-age=0, no-cache, no-store\r\n"");
      } else {
         rsprintf(""Cache-control: public, max-age=86400\r\n"");
      }

      if (keep_alive) {
         rsprintf(""Connection: Keep-Alive\r\n"");
         rsprintf(""Keep-Alive: timeout=60, max=10\r\n"");
      }

      /* return proper header for file type */
      for (i = 0; i < (int) strlen(file_name); i++)
         str[i] = toupper(file_name[i]);
      str[i] = 0;

      for (i = 0; filetype[i].ext[0]; i++)
         if (chkext(str, filetype[i].ext))
            break;

      if (!getcfg(""global"", ""charset"", charset, sizeof(charset)))
         strcpy(charset, DEFAULT_HTTP_CHARSET);

      if (filetype[i].ext[0]) {
         if (strncmp(filetype[i].type, ""text"", 4) == 0)
            rsprintf(""Content-Type: %s;charset=%s\r\n"", filetype[i].type, charset);
         else
            rsprintf(""Content-Type: %s\r\n"", filetype[i].type);
      } else if (is_ascii(file_name))
         rsprintf(""Content-Type: text/plain;charset=%s\r\n"", charset);
      else
         rsprintf(""Content-Type: application/octet-stream;charset=%s\r\n"", charset);

      rsprintf(""Content-Length: %d\r\n\r\n"", length);

      /* increase return buffer size if file too big */
      if (length > return_buffer_size - (int) strlen(return_buffer)) {
         delta = length - (return_buffer_size - strlen(return_buffer)) + 1000;

         return_buffer = xrealloc(return_buffer, return_buffer_size + delta);
         memset(return_buffer + return_buffer_size, 0, delta);
         return_buffer_size += delta;
      }

      return_length = strlen(return_buffer) + length;
      read(fh, return_buffer + strlen(return_buffer), length);

      close(fh);
   } else {
      char encodedname[256];
      show_html_header(NULL, FALSE, ""404 Not Found"", TRUE, FALSE, NULL, FALSE, 0);

      rsprintf(""<body><h1>Not Found</h1>\r\n"");
      rsprintf(""The requested file <b>"");
      strencode2(encodedname, file_name, sizeof(encodedname));
      if (strchr(file_name, DIR_SEPARATOR))
         rsprintf(""%s"", encodedname);
      else
         rsprintf(""%s%c%s"", dir, DIR_SEPARATOR, encodedname);
      rsprintf(""</b> was not found on this server<p>\r\n"");
      rsprintf(""<hr><address>ELOG version %s</address></body></html>\r\n\r\n"", VERSION);
      return_length = strlen_retbuf;
      keep_alive = FALSE;
   }
}","void send_file_direct(char *file_name) {
   int fh, i, length, delta;
   char str[MAX_PATH_LENGTH], dir[MAX_PATH_LENGTH], charset[80];

   getcwd(dir, sizeof(dir));
   fh = open(file_name, O_RDONLY | O_BINARY);
   if (fh > 0) {
      lseek(fh, 0, SEEK_END);
      length = TELL(fh);
      lseek(fh, 0, SEEK_SET);

      rsprintf(""HTTP/1.1 200 Document follows\r\n"");
      rsprintf(""Server: ELOG HTTP %s-%s\r\n"", VERSION, git_revision());
      rsprintf(""Accept-Ranges: bytes\r\n"");

      /* set expiration time to one day if no thumbnail */
      if (isparam(""thumb"")) {
         rsprintf(""Pragma: no-cache\r\n"");
         rsprintf(""Cache-control: private, max-age=0, no-cache, no-store\r\n"");
      } else {
         rsprintf(""Cache-control: public, max-age=86400\r\n"");
      }

      if (keep_alive) {
         rsprintf(""Connection: Keep-Alive\r\n"");
         rsprintf(""Keep-Alive: timeout=60, max=10\r\n"");
      }

      /* return proper header for file type */
      for (i = 0; i < (int) strlen(file_name); i++)
         str[i] = toupper(file_name[i]);
      str[i] = 0;

      for (i = 0; filetype[i].ext[0]; i++)
         if (chkext(str, filetype[i].ext))
            break;

      if (!getcfg(""global"", ""charset"", charset, sizeof(charset)))
         strcpy(charset, DEFAULT_HTTP_CHARSET);

      if (filetype[i].ext[0]) {
         if (strncmp(filetype[i].type, ""text"", 4) == 0)
            rsprintf(""Content-Type: %s;charset=%s\r\n"", filetype[i].type, charset);
         else if (strcmp(filetype[i].ext, "".SVG"") == 0) {
            rsprintf(""Content-Type: %s\r\n"", filetype[i].type);
            if (strrchr(file_name, '/'))
               strlcpy(str, strrchr(file_name, '/')+1, sizeof(str));
            else
               strlcpy(str, file_name, sizeof(str));
            if (str[6] == '_' && str[13] == '_')
               rsprintf(""Content-Disposition: attachment; filename=\""%s\""\r\n"", str+14);
            else
               rsprintf(""Content-Disposition: attachment; filename=\""%s\""\r\n"", str);
         } else
            rsprintf(""Content-Type: %s\r\n"", filetype[i].type);
      } else if (is_ascii(file_name))
         rsprintf(""Content-Type: text/plain;charset=%s\r\n"", charset);
      else
         rsprintf(""Content-Type: application/octet-stream;charset=%s\r\n"", charset);

      rsprintf(""Content-Length: %d\r\n\r\n"", length);

      /* increase return buffer size if file too big */
      if (length > return_buffer_size - (int) strlen(return_buffer)) {
         delta = length - (return_buffer_size - strlen(return_buffer)) + 1000;

         return_buffer = xrealloc(return_buffer, return_buffer_size + delta);
         memset(return_buffer + return_buffer_size, 0, delta);
         return_buffer_size += delta;
      }

      return_length = strlen(return_buffer) + length;
      read(fh, return_buffer + strlen(return_buffer), length);

      close(fh);
   } else {
      char encodedname[256];
      show_html_header(NULL, FALSE, ""404 Not Found"", TRUE, FALSE, NULL, FALSE, 0);

      rsprintf(""<body><h1>Not Found</h1>\r\n"");
      rsprintf(""The requested file <b>"");
      strencode2(encodedname, file_name, sizeof(encodedname));
      if (strchr(file_name, DIR_SEPARATOR))
         rsprintf(""%s"", encodedname);
      else
         rsprintf(""%s%c%s"", dir, DIR_SEPARATOR, encodedname);
      rsprintf(""</b> was not found on this server<p>\r\n"");
      rsprintf(""<hr><address>ELOG version %s</address></body></html>\r\n\r\n"", VERSION);
      return_length = strlen_retbuf;
      keep_alive = FALSE;
   }
}",
