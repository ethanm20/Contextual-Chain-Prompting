,Unnamed: 0,Access Gained,Attack Origin,Authentication Required,Availability,CVE ID,CVE Page,CWE ID,Complexity,Confidentiality,Integrity,Known Exploits,Publish Date,Score,Summary,Update Date,Vulnerability Classification,add_lines,codeLink,commit_id,commit_message,del_lines,file_name,files_changed,func_after,func_before,lang,lines_after,lines_before,parentID,patch,project,project_after,project_before,vul,vul_func_with_fix
3446,181182,,Local,Not required,,CVE-2017-11472,https://www.cvedetails.com/cve/CVE-2017-11472/,CWE-755,Low,Partial,Partial,,2017-07-20,3.6,"The acpi_ns_terminate() function in drivers/acpi/acpica/nsutils.c in the Linux kernel before 4.12 does not flush the operand cache and causes a kernel stack dump, which allows local users to obtain sensitive information from kernel memory and bypass the KASLR protection mechanism (in the kernel through 4.9) via a crafted ACPI table.",2019-10-02,Bypass +Info ,9,https://github.com/torvalds/linux/commit/3b2d69114fefa474fca542e51119036dceb4aa6f,3b2d69114fefa474fca542e51119036dceb4aa6f,"ACPICA: Namespace: fix operand cache leak

ACPICA commit a23325b2e583556eae88ed3f764e457786bf4df6

I found some ACPI operand cache leaks in ACPI early abort cases.

Boot log of ACPI operand cache leak is as follows:
>[    0.174332] ACPI: Added _OSI(Module Device)
>[    0.175504] ACPI: Added _OSI(Processor Device)
>[    0.176010] ACPI: Added _OSI(3.0 _SCP Extensions)
>[    0.177032] ACPI: Added _OSI(Processor Aggregator Device)
>[    0.178284] ACPI: SCI (IRQ16705) allocation failed
>[    0.179352] ACPI Exception: AE_NOT_ACQUIRED, Unable to install
System Control Interrupt handler (20160930/evevent-131)
>[    0.180008] ACPI: Unable to start the ACPI Interpreter
>[    0.181125] ACPI Error: Could not remove SCI handler
(20160930/evmisc-281)
>[    0.184068] kmem_cache_destroy Acpi-Operand: Slab cache still has
objects
>[    0.185358] CPU: 0 PID: 1 Comm: swapper/0 Not tainted 4.10.0-rc3 #2
>[    0.186820] Hardware name: innotek gmb_h virtual_box/virtual_box, BIOS
virtual_box 12/01/2006
>[    0.188000] Call Trace:
>[    0.188000]  ? dump_stack+0x5c/0x7d
>[    0.188000]  ? kmem_cache_destroy+0x224/0x230
>[    0.188000]  ? acpi_sleep_proc_init+0x22/0x22
>[    0.188000]  ? acpi_os_delete_cache+0xa/0xd
>[    0.188000]  ? acpi_ut_delete_caches+0x3f/0x7b
>[    0.188000]  ? acpi_terminate+0x5/0xf
>[    0.188000]  ? acpi_init+0x288/0x32e
>[    0.188000]  ? __class_create+0x4c/0x80
>[    0.188000]  ? video_setup+0x7a/0x7a
>[    0.188000]  ? do_one_initcall+0x4e/0x1b0
>[    0.188000]  ? kernel_init_freeable+0x194/0x21a
>[    0.188000]  ? rest_init+0x80/0x80
>[    0.188000]  ? kernel_init+0xa/0x100
>[    0.188000]  ? ret_from_fork+0x25/0x30

When early abort is occurred due to invalid ACPI information, Linux kernel
terminates ACPI by calling acpi_terminate() function. The function calls
acpi_ns_terminate() function to delete namespace data and ACPI operand cache
(acpi_gbl_module_code_list).

But the deletion code in acpi_ns_terminate() function is wrapped in
ACPI_EXEC_APP definition, therefore the code is only executed when the
definition exists. If the define doesn't exist, ACPI operand cache
(acpi_gbl_module_code_list) is leaked, and stack dump is shown in kernel log.

This causes a security threat because the old kernel (<= 4.9) shows memory
locations of kernel functions in stack dump, therefore kernel ASLR can be
neutralized.

To fix ACPI operand leak for enhancing security, I made a patch which
removes the ACPI_EXEC_APP define in acpi_ns_terminate() function for
executing the deletion code unconditionally.

Link: https://github.com/acpica/acpica/commit/a23325b2
Signed-off-by: Seunghun Han <kkamagui@gmail.com>
Signed-off-by: Lv Zheng <lv.zheng@intel.com>
Signed-off-by: Bob Moore <robert.moore@intel.com>
Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>",13,drivers/acpi/acpica/nsutils.c,"{""sha"": ""b5a291488e3fc2d3ea53564496786acdcc8f577a"", ""filename"": ""drivers/acpi/acpica/nsutils.c"", ""status"": ""modified"", ""additions"": 9, ""deletions"": 14, ""changes"": 23, ""blob_url"": ""https://github.com/torvalds/linux/blob/3b2d69114fefa474fca542e51119036dceb4aa6f/drivers/acpi/acpica/nsutils.c"", ""raw_url"": ""https://github.com/torvalds/linux/raw/3b2d69114fefa474fca542e51119036dceb4aa6f/drivers/acpi/acpica/nsutils.c"", ""contents_url"": ""https://api.github.com/repos/torvalds/linux/contents/drivers/acpi/acpica/nsutils.c?ref=3b2d69114fefa474fca542e51119036dceb4aa6f"", ""patch"": ""@@ -594,25 +594,20 @@ struct acpi_namespace_node *acpi_ns_validate_handle(acpi_handle handle)\n void acpi_ns_terminate(void)\n {\n \tacpi_status status;\n+\tunion acpi_operand_object *prev;\n+\tunion acpi_operand_object *next;\n \n \tACPI_FUNCTION_TRACE(ns_terminate);\n \n-#ifdef ACPI_EXEC_APP\n-\t{\n-\t\tunion acpi_operand_object *prev;\n-\t\tunion acpi_operand_object *next;\n+\t/* Delete any module-level code blocks */\n \n-\t\t/* Delete any module-level code blocks */\n-\n-\t\tnext = acpi_gbl_module_code_list;\n-\t\twhile (next) {\n-\t\t\tprev = next;\n-\t\t\tnext = next->method.mutex;\n-\t\t\tprev->method.mutex = NULL;\t/* Clear the Mutex (cheated) field */\n-\t\t\tacpi_ut_remove_reference(prev);\n-\t\t}\n+\tnext = acpi_gbl_module_code_list;\n+\twhile (next) {\n+\t\tprev = next;\n+\t\tnext = next->method.mutex;\n+\t\tprev->method.mutex = NULL;\t/* Clear the Mutex (cheated) field */\n+\t\tacpi_ut_remove_reference(prev);\n \t}\n-#endif\n \n \t/*\n \t * Free the entire namespace -- all nodes and all objects""}"," void acpi_ns_terminate(void)
 {
 	acpi_status status;
	union acpi_operand_object *prev;
	union acpi_operand_object *next;
 
 	ACPI_FUNCTION_TRACE(ns_terminate);
 
	/* Delete any module-level code blocks */
 
	next = acpi_gbl_module_code_list;
	while (next) {
		prev = next;
		next = next->method.mutex;
		prev->method.mutex = NULL;	/* Clear the Mutex (cheated) field */
		acpi_ut_remove_reference(prev);
 	}
 
 	/*
 	 * Free the entire namespace -- all nodes and all objects
	 * attached to the nodes
	 */
	acpi_ns_delete_namespace_subtree(acpi_gbl_root_node);

	/* Delete any objects attached to the root node */

	status = acpi_ut_acquire_mutex(ACPI_MTX_NAMESPACE);
	if (ACPI_FAILURE(status)) {
		return_VOID;
	}

	acpi_ns_delete_node(acpi_gbl_root_node);
	(void)acpi_ut_release_mutex(ACPI_MTX_NAMESPACE);

	ACPI_DEBUG_PRINT((ACPI_DB_INFO, ""Namespace freed\n""));
	return_VOID;
}
"," void acpi_ns_terminate(void)
 {
 	acpi_status status;
 
 	ACPI_FUNCTION_TRACE(ns_terminate);
 
#ifdef ACPI_EXEC_APP
	{
		union acpi_operand_object *prev;
		union acpi_operand_object *next;
 
		/* Delete any module-level code blocks */
		next = acpi_gbl_module_code_list;
		while (next) {
			prev = next;
			next = next->method.mutex;
			prev->method.mutex = NULL;	/* Clear the Mutex (cheated) field */
			acpi_ut_remove_reference(prev);
		}
 	}
#endif
 
 	/*
 	 * Free the entire namespace -- all nodes and all objects
	 * attached to the nodes
	 */
	acpi_ns_delete_namespace_subtree(acpi_gbl_root_node);

	/* Delete any objects attached to the root node */

	status = acpi_ut_acquire_mutex(ACPI_MTX_NAMESPACE);
	if (ACPI_FAILURE(status)) {
		return_VOID;
	}

	acpi_ns_delete_node(acpi_gbl_root_node);
	(void)acpi_ut_release_mutex(ACPI_MTX_NAMESPACE);

	ACPI_DEBUG_PRINT((ACPI_DB_INFO, ""Namespace freed\n""));
	return_VOID;
}
",C,"	union acpi_operand_object *prev;
	union acpi_operand_object *next;
	/* Delete any module-level code blocks */
	next = acpi_gbl_module_code_list;
	while (next) {
		prev = next;
		next = next->method.mutex;
		prev->method.mutex = NULL;	/* Clear the Mutex (cheated) field */
		acpi_ut_remove_reference(prev);
","#ifdef ACPI_EXEC_APP
	{
		union acpi_operand_object *prev;
		union acpi_operand_object *next;
		/* Delete any module-level code blocks */
		next = acpi_gbl_module_code_list;
		while (next) {
			prev = next;
			next = next->method.mutex;
			prev->method.mutex = NULL;	/* Clear the Mutex (cheated) field */
			acpi_ut_remove_reference(prev);
		}
#endif
",,"@@ -594,25 +594,20 @@ struct acpi_namespace_node *acpi_ns_validate_handle(acpi_handle handle)
 void acpi_ns_terminate(void)
 {
 	acpi_status status;
+	union acpi_operand_object *prev;
+	union acpi_operand_object *next;
 
 	ACPI_FUNCTION_TRACE(ns_terminate);
 
-#ifdef ACPI_EXEC_APP
-	{
-		union acpi_operand_object *prev;
-		union acpi_operand_object *next;
+	/* Delete any module-level code blocks */
 
-		/* Delete any module-level code blocks */
-
-		next = acpi_gbl_module_code_list;
-		while (next) {
-			prev = next;
-			next = next->method.mutex;
-			prev->method.mutex = NULL;	/* Clear the Mutex (cheated) field */
-			acpi_ut_remove_reference(prev);
-		}
+	next = acpi_gbl_module_code_list;
+	while (next) {
+		prev = next;
+		next = next->method.mutex;
+		prev->method.mutex = NULL;	/* Clear the Mutex (cheated) field */
+		acpi_ut_remove_reference(prev);
 	}
-#endif
 
 	/*
 	 * Free the entire namespace -- all nodes and all objects",linux,3b2d69114fefa474fca542e51119036dceb4aa6f,2e337c72a3c24f0cf9bf639dc93de0f887d56dba,1," void acpi_ns_terminate(void)
 {
 	acpi_status status;
//fix_flaw_line_below:
//	union acpi_operand_object *prev;
//fix_flaw_line_below:
//	union acpi_operand_object *next;
 
 	ACPI_FUNCTION_TRACE(ns_terminate);
 
//flaw_line_below:
#ifdef ACPI_EXEC_APP
//flaw_line_below:
	{
//flaw_line_below:
		union acpi_operand_object *prev;
//flaw_line_below:
		union acpi_operand_object *next;
//fix_flaw_line_below:
//	/* Delete any module-level code blocks */
 
//flaw_line_below:
		/* Delete any module-level code blocks */
//flaw_line_below:

//flaw_line_below:
		next = acpi_gbl_module_code_list;
//flaw_line_below:
		while (next) {
//flaw_line_below:
			prev = next;
//flaw_line_below:
			next = next->method.mutex;
//flaw_line_below:
			prev->method.mutex = NULL;	/* Clear the Mutex (cheated) field */
//flaw_line_below:
			acpi_ut_remove_reference(prev);
//flaw_line_below:
		}
//fix_flaw_line_below:
//	next = acpi_gbl_module_code_list;
//fix_flaw_line_below:
//	while (next) {
//fix_flaw_line_below:
//		prev = next;
//fix_flaw_line_below:
//		next = next->method.mutex;
//fix_flaw_line_below:
//		prev->method.mutex = NULL;	/* Clear the Mutex (cheated) field */
//fix_flaw_line_below:
//		acpi_ut_remove_reference(prev);
 	}
//flaw_line_below:
#endif
 
 	/*
 	 * Free the entire namespace -- all nodes and all objects
	 * attached to the nodes
	 */
	acpi_ns_delete_namespace_subtree(acpi_gbl_root_node);

	/* Delete any objects attached to the root node */

	status = acpi_ut_acquire_mutex(ACPI_MTX_NAMESPACE);
	if (ACPI_FAILURE(status)) {
		return_VOID;
	}

	acpi_ns_delete_node(acpi_gbl_root_node);
	(void)acpi_ut_release_mutex(ACPI_MTX_NAMESPACE);

	ACPI_DEBUG_PRINT((ACPI_DB_INFO, ""Namespace freed\n""));
	return_VOID;
}
"
5475,183211,,Local,Not required,,CVE-2017-11472,https://www.cvedetails.com/cve/CVE-2017-11472/,CWE-755,Low,Partial,Partial,,2017-07-20,3.6,"The acpi_ns_terminate() function in drivers/acpi/acpica/nsutils.c in the Linux kernel before 4.12 does not flush the operand cache and causes a kernel stack dump, which allows local users to obtain sensitive information from kernel memory and bypass the KASLR protection mechanism (in the kernel through 4.9) via a crafted ACPI table.",2019-10-02,Bypass +Info ,10,https://github.com/acpica/acpica/commit/a23325b2e583556eae88ed3f764e457786bf4df6,a23325b2e583556eae88ed3f764e457786bf4df6,"Namespace: fix operand cache leak

I found some ACPI operand cache leaks in ACPI early abort cases.

Boot log of ACPI operand cache leak is as follows:
>[    0.174332] ACPI: Added _OSI(Module Device)
>[    0.175504] ACPI: Added _OSI(Processor Device)
>[    0.176010] ACPI: Added _OSI(3.0 _SCP Extensions)
>[    0.177032] ACPI: Added _OSI(Processor Aggregator Device)
>[    0.178284] ACPI: SCI (IRQ16705) allocation failed
>[    0.179352] ACPI Exception: AE_NOT_ACQUIRED, Unable to install
System Control Interrupt handler (20160930/evevent-131)
>[    0.180008] ACPI: Unable to start the ACPI Interpreter
>[    0.181125] ACPI Error: Could not remove SCI handler
(20160930/evmisc-281)
>[    0.184068] kmem_cache_destroy Acpi-Operand: Slab cache still has
objects
>[    0.185358] CPU: 0 PID: 1 Comm: swapper/0 Not tainted 4.10.0-rc3 #2
>[    0.186820] Hardware name: innotek GmbH VirtualBox/VirtualBox, BIOS
VirtualBox 12/01/2006
>[    0.188000] Call Trace:
>[    0.188000]  ? dump_stack+0x5c/0x7d
>[    0.188000]  ? kmem_cache_destroy+0x224/0x230
>[    0.188000]  ? acpi_sleep_proc_init+0x22/0x22
>[    0.188000]  ? acpi_os_delete_cache+0xa/0xd
>[    0.188000]  ? acpi_ut_delete_caches+0x3f/0x7b
>[    0.188000]  ? acpi_terminate+0x5/0xf
>[    0.188000]  ? acpi_init+0x288/0x32e
>[    0.188000]  ? __class_create+0x4c/0x80
>[    0.188000]  ? video_setup+0x7a/0x7a
>[    0.188000]  ? do_one_initcall+0x4e/0x1b0
>[    0.188000]  ? kernel_init_freeable+0x194/0x21a
>[    0.188000]  ? rest_init+0x80/0x80
>[    0.188000]  ? kernel_init+0xa/0x100
>[    0.188000]  ? ret_from_fork+0x25/0x30

When early abort is occurred due to invalid ACPI information, Linux kernel
terminates ACPI by calling AcpiTerminate() function. The function calls
AcpiNsTerminate() function to delete namespace data and ACPI operand cache
(AcpiGbl_ModuleCodeList).

But the deletion code in AcpiNsTerminate() function is wrapped in
ACPI_EXEC_APP definition, therefore the code is only executed when the
definition exists. If the define doesn't exist, ACPI operand cache
(AcpiGbl_ModuleCodeList) is leaked, and stack dump is shown in kernel log.

This causes a security threat because the old kernel (<= 4.9) shows memory
locations of kernel functions in stack dump, therefore kernel ASLR can be
neutralized.

To fix ACPI operand leak for enhancing security, I made a patch which
removes the ACPI_EXEC_APP define in AcpiNsTerminate() function for
executing the deletion code unconditionally.

Signed-off-by: Seunghun Han <kkamagui@gmail.com>
Signed-off-by: Lv Zheng <lv.zheng@intel.com>",14,source/components/namespace/nsutils.c,"{""sha"": ""b2917e5574cb2825f1a353cc6daf1cd7157e336c"", ""filename"": ""source/components/namespace/nsutils.c"", ""status"": ""modified"", ""additions"": 10, ""deletions"": 15, ""changes"": 25, ""blob_url"": ""https://github.com/acpica/acpica/blob/a23325b2e583556eae88ed3f764e457786bf4df6/source/components/namespace/nsutils.c"", ""raw_url"": ""https://github.com/acpica/acpica/raw/a23325b2e583556eae88ed3f764e457786bf4df6/source/components/namespace/nsutils.c"", ""contents_url"": ""https://api.github.com/repos/acpica/acpica/contents/source/components/namespace/nsutils.c?ref=a23325b2e583556eae88ed3f764e457786bf4df6"", ""patch"": ""@@ -766,28 +766,23 @@ AcpiNsTerminate (\n     void)\n {\n     ACPI_STATUS             Status;\n+    ACPI_OPERAND_OBJECT     *Prev;\n+    ACPI_OPERAND_OBJECT     *Next;\n \n \n     ACPI_FUNCTION_TRACE (NsTerminate);\n \n \n-#ifdef ACPI_EXEC_APP\n-    {\n-        ACPI_OPERAND_OBJECT     *Prev;\n-        ACPI_OPERAND_OBJECT     *Next;\n-\n-        /* Delete any module-level code blocks */\n+    /* Delete any module-level code blocks */\n \n-        Next = AcpiGbl_ModuleCodeList;\n-        while (Next)\n-        {\n-            Prev = Next;\n-            Next = Next->Method.Mutex;\n-            Prev->Method.Mutex = NULL; /* Clear the Mutex (cheated) field */\n-            AcpiUtRemoveReference (Prev);\n-        }\n+    Next = AcpiGbl_ModuleCodeList;\n+    while (Next)\n+    {\n+        Prev = Next;\n+        Next = Next->Method.Mutex;\n+        Prev->Method.Mutex = NULL; /* Clear the Mutex (cheated) field */\n+        AcpiUtRemoveReference (Prev);\n     }\n-#endif\n \n     /*\n      * Free the entire namespace -- all nodes and all objects""}","AcpiNsTerminate (
     void)
 {
     ACPI_STATUS             Status;
    ACPI_OPERAND_OBJECT     *Prev;
    ACPI_OPERAND_OBJECT     *Next;
 
 
     ACPI_FUNCTION_TRACE (NsTerminate);
 
 
    /* Delete any module-level code blocks */
 
    Next = AcpiGbl_ModuleCodeList;
    while (Next)
    {
        Prev = Next;
        Next = Next->Method.Mutex;
        Prev->Method.Mutex = NULL; /* Clear the Mutex (cheated) field */
        AcpiUtRemoveReference (Prev);
     }
 
     /*
      * Free the entire namespace -- all nodes and all objects
     * attached to the nodes
     */
    AcpiNsDeleteNamespaceSubtree (AcpiGbl_RootNode);

    /* Delete any objects attached to the root node */

    Status = AcpiUtAcquireMutex (ACPI_MTX_NAMESPACE);
    if (ACPI_FAILURE (Status))
    {
        return_VOID;
    }

    AcpiNsDeleteNode (AcpiGbl_RootNode);
    (void) AcpiUtReleaseMutex (ACPI_MTX_NAMESPACE);

    ACPI_DEBUG_PRINT ((ACPI_DB_INFO, ""Namespace freed\n""));
    return_VOID;
}
","AcpiNsTerminate (
     void)
 {
     ACPI_STATUS             Status;
 
 
     ACPI_FUNCTION_TRACE (NsTerminate);
 
 
#ifdef ACPI_EXEC_APP
    {
        ACPI_OPERAND_OBJECT     *Prev;
        ACPI_OPERAND_OBJECT     *Next;
        /* Delete any module-level code blocks */
 
        Next = AcpiGbl_ModuleCodeList;
        while (Next)
        {
            Prev = Next;
            Next = Next->Method.Mutex;
            Prev->Method.Mutex = NULL; /* Clear the Mutex (cheated) field */
            AcpiUtRemoveReference (Prev);
        }
     }
#endif
 
     /*
      * Free the entire namespace -- all nodes and all objects
     * attached to the nodes
     */
    AcpiNsDeleteNamespaceSubtree (AcpiGbl_RootNode);

    /* Delete any objects attached to the root node */

    Status = AcpiUtAcquireMutex (ACPI_MTX_NAMESPACE);
    if (ACPI_FAILURE (Status))
    {
        return_VOID;
    }

    AcpiNsDeleteNode (AcpiGbl_RootNode);
    (void) AcpiUtReleaseMutex (ACPI_MTX_NAMESPACE);

    ACPI_DEBUG_PRINT ((ACPI_DB_INFO, ""Namespace freed\n""));
    return_VOID;
}
",C,"    ACPI_OPERAND_OBJECT     *Prev;
    ACPI_OPERAND_OBJECT     *Next;
    /* Delete any module-level code blocks */
    Next = AcpiGbl_ModuleCodeList;
    while (Next)
    {
        Prev = Next;
        Next = Next->Method.Mutex;
        Prev->Method.Mutex = NULL; /* Clear the Mutex (cheated) field */
        AcpiUtRemoveReference (Prev);
","#ifdef ACPI_EXEC_APP
    {
        ACPI_OPERAND_OBJECT     *Prev;
        ACPI_OPERAND_OBJECT     *Next;
        /* Delete any module-level code blocks */
        Next = AcpiGbl_ModuleCodeList;
        while (Next)
        {
            Prev = Next;
            Next = Next->Method.Mutex;
            Prev->Method.Mutex = NULL; /* Clear the Mutex (cheated) field */
            AcpiUtRemoveReference (Prev);
        }
#endif
",,"@@ -766,28 +766,23 @@ AcpiNsTerminate (
     void)
 {
     ACPI_STATUS             Status;
+    ACPI_OPERAND_OBJECT     *Prev;
+    ACPI_OPERAND_OBJECT     *Next;
 
 
     ACPI_FUNCTION_TRACE (NsTerminate);
 
 
-#ifdef ACPI_EXEC_APP
-    {
-        ACPI_OPERAND_OBJECT     *Prev;
-        ACPI_OPERAND_OBJECT     *Next;
-
-        /* Delete any module-level code blocks */
+    /* Delete any module-level code blocks */
 
-        Next = AcpiGbl_ModuleCodeList;
-        while (Next)
-        {
-            Prev = Next;
-            Next = Next->Method.Mutex;
-            Prev->Method.Mutex = NULL; /* Clear the Mutex (cheated) field */
-            AcpiUtRemoveReference (Prev);
-        }
+    Next = AcpiGbl_ModuleCodeList;
+    while (Next)
+    {
+        Prev = Next;
+        Next = Next->Method.Mutex;
+        Prev->Method.Mutex = NULL; /* Clear the Mutex (cheated) field */
+        AcpiUtRemoveReference (Prev);
     }
-#endif
 
     /*
      * Free the entire namespace -- all nodes and all objects",linux,a23325b2e583556eae88ed3f764e457786bf4df6,521bedc49b42e59116de1b54dcd95d30d36cac90,1,"AcpiNsTerminate (
     void)
 {
     ACPI_STATUS             Status;
//fix_flaw_line_below:
//    ACPI_OPERAND_OBJECT     *Prev;
//fix_flaw_line_below:
//    ACPI_OPERAND_OBJECT     *Next;
 
 
     ACPI_FUNCTION_TRACE (NsTerminate);
 
 
//flaw_line_below:
#ifdef ACPI_EXEC_APP
//flaw_line_below:
    {
//flaw_line_below:
        ACPI_OPERAND_OBJECT     *Prev;
//flaw_line_below:
        ACPI_OPERAND_OBJECT     *Next;
//flaw_line_below:

//flaw_line_below:
        /* Delete any module-level code blocks */
//fix_flaw_line_below:
//    /* Delete any module-level code blocks */
 
//flaw_line_below:
        Next = AcpiGbl_ModuleCodeList;
//flaw_line_below:
        while (Next)
//flaw_line_below:
        {
//flaw_line_below:
            Prev = Next;
//flaw_line_below:
            Next = Next->Method.Mutex;
//flaw_line_below:
            Prev->Method.Mutex = NULL; /* Clear the Mutex (cheated) field */
//flaw_line_below:
            AcpiUtRemoveReference (Prev);
//flaw_line_below:
        }
//fix_flaw_line_below:
//    Next = AcpiGbl_ModuleCodeList;
//fix_flaw_line_below:
//    while (Next)
//fix_flaw_line_below:
//    {
//fix_flaw_line_below:
//        Prev = Next;
//fix_flaw_line_below:
//        Next = Next->Method.Mutex;
//fix_flaw_line_below:
//        Prev->Method.Mutex = NULL; /* Clear the Mutex (cheated) field */
//fix_flaw_line_below:
//        AcpiUtRemoveReference (Prev);
     }
//flaw_line_below:
#endif
 
     /*
      * Free the entire namespace -- all nodes and all objects
     * attached to the nodes
     */
    AcpiNsDeleteNamespaceSubtree (AcpiGbl_RootNode);

    /* Delete any objects attached to the root node */

    Status = AcpiUtAcquireMutex (ACPI_MTX_NAMESPACE);
    if (ACPI_FAILURE (Status))
    {
        return_VOID;
    }

    AcpiNsDeleteNode (AcpiGbl_RootNode);
    (void) AcpiUtReleaseMutex (ACPI_MTX_NAMESPACE);

    ACPI_DEBUG_PRINT ((ACPI_DB_INFO, ""Namespace freed\n""));
    return_VOID;
}
"
