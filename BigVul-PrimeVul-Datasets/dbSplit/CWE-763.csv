,Unnamed: 0,Access Gained,Attack Origin,Authentication Required,Availability,CVE ID,CVE Page,CWE ID,Complexity,Confidentiality,Integrity,Known Exploits,Publish Date,Score,Summary,Update Date,Vulnerability Classification,add_lines,codeLink,commit_id,commit_message,del_lines,file_name,files_changed,func_after,func_before,lang,lines_after,lines_before,parentID,patch,project,project_after,project_before,vul,vul_func_with_fix
4860,182596,,Local,Not required,Complete,CVE-2017-18075,https://www.cvedetails.com/cve/CVE-2017-18075/,CWE-763,Low,Complete,Complete,,2018-01-24,7.2,"crypto/pcrypt.c in the Linux kernel before 4.14.13 mishandles freeing instances, allowing a local user able to access the AF_ALG-based AEAD interface (CONFIG_CRYPTO_USER_API_AEAD) and pcrypt (CONFIG_CRYPTO_PCRYPT) to cause a denial of service (kfree of an incorrect pointer) or possibly have unspecified other impact by executing a crafted sequence of system calls.",2019-10-02,DoS ,2,https://github.com/torvalds/linux/commit/d76c68109f37cb85b243a1cf0f40313afd2bae68,d76c68109f37cb85b243a1cf0f40313afd2bae68,"crypto: pcrypt - fix freeing pcrypt instances

pcrypt is using the old way of freeing instances, where the ->free()
method specified in the 'struct crypto_template' is passed a pointer to
the 'struct crypto_instance'.  But the crypto_instance is being
kfree()'d directly, which is incorrect because the memory was actually
allocated as an aead_instance, which contains the crypto_instance at a
nonzero offset.  Thus, the wrong pointer was being kfree()'d.

Fix it by switching to the new way to free aead_instance's where the
->free() method is specified in the aead_instance itself.

Reported-by: syzbot <syzkaller@googlegroups.com>
Fixes: 0496f56065e0 (""crypto: pcrypt - Add support for new AEAD interface"")
Cc: <stable@vger.kernel.org> # v4.2+
Signed-off-by: Eric Biggers <ebiggers@google.com>
Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>",0,crypto/pcrypt.c,"{""sha"": ""f8ec3d4ba4a80f8eefed739d9e8a852865a7ac02"", ""filename"": ""crypto/pcrypt.c"", ""status"": ""modified"", ""additions"": 10, ""deletions"": 9, ""changes"": 19, ""blob_url"": ""https://github.com/torvalds/linux/blob/d76c68109f37cb85b243a1cf0f40313afd2bae68/crypto/pcrypt.c"", ""raw_url"": ""https://github.com/torvalds/linux/raw/d76c68109f37cb85b243a1cf0f40313afd2bae68/crypto/pcrypt.c"", ""contents_url"": ""https://api.github.com/repos/torvalds/linux/contents/crypto/pcrypt.c?ref=d76c68109f37cb85b243a1cf0f40313afd2bae68"", ""patch"": ""@@ -254,6 +254,14 @@ static void pcrypt_aead_exit_tfm(struct crypto_aead *tfm)\n \tcrypto_free_aead(ctx->child);\n }\n \n+static void pcrypt_free(struct aead_instance *inst)\n+{\n+\tstruct pcrypt_instance_ctx *ctx = aead_instance_ctx(inst);\n+\n+\tcrypto_drop_aead(&ctx->spawn);\n+\tkfree(inst);\n+}\n+\n static int pcrypt_init_instance(struct crypto_instance *inst,\n \t\t\t\tstruct crypto_alg *alg)\n {\n@@ -319,6 +327,8 @@ static int pcrypt_create_aead(struct crypto_template *tmpl, struct rtattr **tb,\n \tinst->alg.encrypt = pcrypt_aead_encrypt;\n \tinst->alg.decrypt = pcrypt_aead_decrypt;\n \n+\tinst->free = pcrypt_free;\n+\n \terr = aead_register_instance(tmpl, inst);\n \tif (err)\n \t\tgoto out_drop_aead;\n@@ -349,14 +359,6 @@ static int pcrypt_create(struct crypto_template *tmpl, struct rtattr **tb)\n \treturn -EINVAL;\n }\n \n-static void pcrypt_free(struct crypto_instance *inst)\n-{\n-\tstruct pcrypt_instance_ctx *ctx = crypto_instance_ctx(inst);\n-\n-\tcrypto_drop_aead(&ctx->spawn);\n-\tkfree(inst);\n-}\n-\n static int pcrypt_cpumask_change_notify(struct notifier_block *self,\n \t\t\t\t\tunsigned long val, void *data)\n {\n@@ -469,7 +471,6 @@ static void pcrypt_fini_padata(struct padata_pcrypt *pcrypt)\n static struct crypto_template pcrypt_tmpl = {\n \t.name = \""pcrypt\"",\n \t.create = pcrypt_create,\n-\t.free = pcrypt_free,\n \t.module = THIS_MODULE,\n };\n ""}","static int pcrypt_create_aead(struct crypto_template *tmpl, struct rtattr **tb,
			      u32 type, u32 mask)
{
	struct pcrypt_instance_ctx *ctx;
	struct crypto_attr_type *algt;
	struct aead_instance *inst;
	struct aead_alg *alg;
	const char *name;
	int err;

	algt = crypto_get_attr_type(tb);
	if (IS_ERR(algt))
		return PTR_ERR(algt);

	name = crypto_attr_alg_name(tb[1]);
	if (IS_ERR(name))
		return PTR_ERR(name);

	inst = kzalloc(sizeof(*inst) + sizeof(*ctx), GFP_KERNEL);
	if (!inst)
		return -ENOMEM;

	ctx = aead_instance_ctx(inst);
	crypto_set_aead_spawn(&ctx->spawn, aead_crypto_instance(inst));

	err = crypto_grab_aead(&ctx->spawn, name, 0, 0);
	if (err)
		goto out_free_inst;

	alg = crypto_spawn_aead_alg(&ctx->spawn);
	err = pcrypt_init_instance(aead_crypto_instance(inst), &alg->base);
	if (err)
		goto out_drop_aead;

	inst->alg.base.cra_flags = CRYPTO_ALG_ASYNC;

	inst->alg.ivsize = crypto_aead_alg_ivsize(alg);
	inst->alg.maxauthsize = crypto_aead_alg_maxauthsize(alg);

	inst->alg.base.cra_ctxsize = sizeof(struct pcrypt_aead_ctx);

	inst->alg.init = pcrypt_aead_init_tfm;
	inst->alg.exit = pcrypt_aead_exit_tfm;

	inst->alg.setkey = pcrypt_aead_setkey;
	inst->alg.setauthsize = pcrypt_aead_setauthsize;
 	inst->alg.encrypt = pcrypt_aead_encrypt;
 	inst->alg.decrypt = pcrypt_aead_decrypt;
 
	inst->free = pcrypt_free;

 	err = aead_register_instance(tmpl, inst);
 	if (err)
 		goto out_drop_aead;

out:
	return err;

out_drop_aead:
	crypto_drop_aead(&ctx->spawn);
out_free_inst:
	kfree(inst);
	goto out;
}
","static int pcrypt_create_aead(struct crypto_template *tmpl, struct rtattr **tb,
			      u32 type, u32 mask)
{
	struct pcrypt_instance_ctx *ctx;
	struct crypto_attr_type *algt;
	struct aead_instance *inst;
	struct aead_alg *alg;
	const char *name;
	int err;

	algt = crypto_get_attr_type(tb);
	if (IS_ERR(algt))
		return PTR_ERR(algt);

	name = crypto_attr_alg_name(tb[1]);
	if (IS_ERR(name))
		return PTR_ERR(name);

	inst = kzalloc(sizeof(*inst) + sizeof(*ctx), GFP_KERNEL);
	if (!inst)
		return -ENOMEM;

	ctx = aead_instance_ctx(inst);
	crypto_set_aead_spawn(&ctx->spawn, aead_crypto_instance(inst));

	err = crypto_grab_aead(&ctx->spawn, name, 0, 0);
	if (err)
		goto out_free_inst;

	alg = crypto_spawn_aead_alg(&ctx->spawn);
	err = pcrypt_init_instance(aead_crypto_instance(inst), &alg->base);
	if (err)
		goto out_drop_aead;

	inst->alg.base.cra_flags = CRYPTO_ALG_ASYNC;

	inst->alg.ivsize = crypto_aead_alg_ivsize(alg);
	inst->alg.maxauthsize = crypto_aead_alg_maxauthsize(alg);

	inst->alg.base.cra_ctxsize = sizeof(struct pcrypt_aead_ctx);

	inst->alg.init = pcrypt_aead_init_tfm;
	inst->alg.exit = pcrypt_aead_exit_tfm;

	inst->alg.setkey = pcrypt_aead_setkey;
	inst->alg.setauthsize = pcrypt_aead_setauthsize;
 	inst->alg.encrypt = pcrypt_aead_encrypt;
 	inst->alg.decrypt = pcrypt_aead_decrypt;
 
 	err = aead_register_instance(tmpl, inst);
 	if (err)
 		goto out_drop_aead;

out:
	return err;

out_drop_aead:
	crypto_drop_aead(&ctx->spawn);
out_free_inst:
	kfree(inst);
	goto out;
}
",C,"	inst->free = pcrypt_free;

",,,"@@ -254,6 +254,14 @@ static void pcrypt_aead_exit_tfm(struct crypto_aead *tfm)
 	crypto_free_aead(ctx->child);
 }
 
+static void pcrypt_free(struct aead_instance *inst)
+{
+	struct pcrypt_instance_ctx *ctx = aead_instance_ctx(inst);
+
+	crypto_drop_aead(&ctx->spawn);
+	kfree(inst);
+}
+
 static int pcrypt_init_instance(struct crypto_instance *inst,
 				struct crypto_alg *alg)
 {
@@ -319,6 +327,8 @@ static int pcrypt_create_aead(struct crypto_template *tmpl, struct rtattr **tb,
 	inst->alg.encrypt = pcrypt_aead_encrypt;
 	inst->alg.decrypt = pcrypt_aead_decrypt;
 
+	inst->free = pcrypt_free;
+
 	err = aead_register_instance(tmpl, inst);
 	if (err)
 		goto out_drop_aead;
@@ -349,14 +359,6 @@ static int pcrypt_create(struct crypto_template *tmpl, struct rtattr **tb)
 	return -EINVAL;
 }
 
-static void pcrypt_free(struct crypto_instance *inst)
-{
-	struct pcrypt_instance_ctx *ctx = crypto_instance_ctx(inst);
-
-	crypto_drop_aead(&ctx->spawn);
-	kfree(inst);
-}
-
 static int pcrypt_cpumask_change_notify(struct notifier_block *self,
 					unsigned long val, void *data)
 {
@@ -469,7 +471,6 @@ static void pcrypt_fini_padata(struct padata_pcrypt *pcrypt)
 static struct crypto_template pcrypt_tmpl = {
 	.name = ""pcrypt"",
 	.create = pcrypt_create,
-	.free = pcrypt_free,
 	.module = THIS_MODULE,
 };
 ",linux,d76c68109f37cb85b243a1cf0f40313afd2bae68,203f45003a3d03eea8fa28d74cfc74c354416fdb,1,"static int pcrypt_create_aead(struct crypto_template *tmpl, struct rtattr **tb,
			      u32 type, u32 mask)
{
	struct pcrypt_instance_ctx *ctx;
	struct crypto_attr_type *algt;
	struct aead_instance *inst;
	struct aead_alg *alg;
	const char *name;
	int err;

	algt = crypto_get_attr_type(tb);
	if (IS_ERR(algt))
		return PTR_ERR(algt);

	name = crypto_attr_alg_name(tb[1]);
	if (IS_ERR(name))
		return PTR_ERR(name);

	inst = kzalloc(sizeof(*inst) + sizeof(*ctx), GFP_KERNEL);
	if (!inst)
		return -ENOMEM;

	ctx = aead_instance_ctx(inst);
	crypto_set_aead_spawn(&ctx->spawn, aead_crypto_instance(inst));

	err = crypto_grab_aead(&ctx->spawn, name, 0, 0);
	if (err)
		goto out_free_inst;

	alg = crypto_spawn_aead_alg(&ctx->spawn);
	err = pcrypt_init_instance(aead_crypto_instance(inst), &alg->base);
	if (err)
		goto out_drop_aead;

	inst->alg.base.cra_flags = CRYPTO_ALG_ASYNC;

	inst->alg.ivsize = crypto_aead_alg_ivsize(alg);
	inst->alg.maxauthsize = crypto_aead_alg_maxauthsize(alg);

	inst->alg.base.cra_ctxsize = sizeof(struct pcrypt_aead_ctx);

	inst->alg.init = pcrypt_aead_init_tfm;
	inst->alg.exit = pcrypt_aead_exit_tfm;

	inst->alg.setkey = pcrypt_aead_setkey;
	inst->alg.setauthsize = pcrypt_aead_setauthsize;
 	inst->alg.encrypt = pcrypt_aead_encrypt;
 	inst->alg.decrypt = pcrypt_aead_decrypt;
 
//fix_flaw_line_below:
//	inst->free = pcrypt_free;
//fix_flaw_line_below:
//
 	err = aead_register_instance(tmpl, inst);
 	if (err)
 		goto out_drop_aead;

out:
	return err;

out_drop_aead:
	crypto_drop_aead(&ctx->spawn);
out_free_inst:
	kfree(inst);
	goto out;
}
"
4861,182597,,Local,Not required,Complete,CVE-2017-18075,https://www.cvedetails.com/cve/CVE-2017-18075/,CWE-763,Low,Complete,Complete,,2018-01-24,7.2,"crypto/pcrypt.c in the Linux kernel before 4.14.13 mishandles freeing instances, allowing a local user able to access the AF_ALG-based AEAD interface (CONFIG_CRYPTO_USER_API_AEAD) and pcrypt (CONFIG_CRYPTO_PCRYPT) to cause a denial of service (kfree of an incorrect pointer) or possibly have unspecified other impact by executing a crafted sequence of system calls.",2019-10-02,DoS ,0,https://github.com/torvalds/linux/commit/d76c68109f37cb85b243a1cf0f40313afd2bae68,d76c68109f37cb85b243a1cf0f40313afd2bae68,"crypto: pcrypt - fix freeing pcrypt instances

pcrypt is using the old way of freeing instances, where the ->free()
method specified in the 'struct crypto_template' is passed a pointer to
the 'struct crypto_instance'.  But the crypto_instance is being
kfree()'d directly, which is incorrect because the memory was actually
allocated as an aead_instance, which contains the crypto_instance at a
nonzero offset.  Thus, the wrong pointer was being kfree()'d.

Fix it by switching to the new way to free aead_instance's where the
->free() method is specified in the aead_instance itself.

Reported-by: syzbot <syzkaller@googlegroups.com>
Fixes: 0496f56065e0 (""crypto: pcrypt - Add support for new AEAD interface"")
Cc: <stable@vger.kernel.org> # v4.2+
Signed-off-by: Eric Biggers <ebiggers@google.com>
Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>",5,crypto/pcrypt.c,"{""sha"": ""f8ec3d4ba4a80f8eefed739d9e8a852865a7ac02"", ""filename"": ""crypto/pcrypt.c"", ""status"": ""modified"", ""additions"": 10, ""deletions"": 9, ""changes"": 19, ""blob_url"": ""https://github.com/torvalds/linux/blob/d76c68109f37cb85b243a1cf0f40313afd2bae68/crypto/pcrypt.c"", ""raw_url"": ""https://github.com/torvalds/linux/raw/d76c68109f37cb85b243a1cf0f40313afd2bae68/crypto/pcrypt.c"", ""contents_url"": ""https://api.github.com/repos/torvalds/linux/contents/crypto/pcrypt.c?ref=d76c68109f37cb85b243a1cf0f40313afd2bae68"", ""patch"": ""@@ -254,6 +254,14 @@ static void pcrypt_aead_exit_tfm(struct crypto_aead *tfm)\n \tcrypto_free_aead(ctx->child);\n }\n \n+static void pcrypt_free(struct aead_instance *inst)\n+{\n+\tstruct pcrypt_instance_ctx *ctx = aead_instance_ctx(inst);\n+\n+\tcrypto_drop_aead(&ctx->spawn);\n+\tkfree(inst);\n+}\n+\n static int pcrypt_init_instance(struct crypto_instance *inst,\n \t\t\t\tstruct crypto_alg *alg)\n {\n@@ -319,6 +327,8 @@ static int pcrypt_create_aead(struct crypto_template *tmpl, struct rtattr **tb,\n \tinst->alg.encrypt = pcrypt_aead_encrypt;\n \tinst->alg.decrypt = pcrypt_aead_decrypt;\n \n+\tinst->free = pcrypt_free;\n+\n \terr = aead_register_instance(tmpl, inst);\n \tif (err)\n \t\tgoto out_drop_aead;\n@@ -349,14 +359,6 @@ static int pcrypt_create(struct crypto_template *tmpl, struct rtattr **tb)\n \treturn -EINVAL;\n }\n \n-static void pcrypt_free(struct crypto_instance *inst)\n-{\n-\tstruct pcrypt_instance_ctx *ctx = crypto_instance_ctx(inst);\n-\n-\tcrypto_drop_aead(&ctx->spawn);\n-\tkfree(inst);\n-}\n-\n static int pcrypt_cpumask_change_notify(struct notifier_block *self,\n \t\t\t\t\tunsigned long val, void *data)\n {\n@@ -469,7 +471,6 @@ static void pcrypt_fini_padata(struct padata_pcrypt *pcrypt)\n static struct crypto_template pcrypt_tmpl = {\n \t.name = \""pcrypt\"",\n \t.create = pcrypt_create,\n-\t.free = pcrypt_free,\n \t.module = THIS_MODULE,\n };\n ""}","static void pcrypt_free(struct crypto_instance *inst)
","static void pcrypt_free(struct crypto_instance *inst)
{
	struct pcrypt_instance_ctx *ctx = crypto_instance_ctx(inst);
	crypto_drop_aead(&ctx->spawn);
	kfree(inst);
}
",C,,"{
	struct pcrypt_instance_ctx *ctx = crypto_instance_ctx(inst);
	crypto_drop_aead(&ctx->spawn);
	kfree(inst);
}
",,"@@ -254,6 +254,14 @@ static void pcrypt_aead_exit_tfm(struct crypto_aead *tfm)
 	crypto_free_aead(ctx->child);
 }
 
+static void pcrypt_free(struct aead_instance *inst)
+{
+	struct pcrypt_instance_ctx *ctx = aead_instance_ctx(inst);
+
+	crypto_drop_aead(&ctx->spawn);
+	kfree(inst);
+}
+
 static int pcrypt_init_instance(struct crypto_instance *inst,
 				struct crypto_alg *alg)
 {
@@ -319,6 +327,8 @@ static int pcrypt_create_aead(struct crypto_template *tmpl, struct rtattr **tb,
 	inst->alg.encrypt = pcrypt_aead_encrypt;
 	inst->alg.decrypt = pcrypt_aead_decrypt;
 
+	inst->free = pcrypt_free;
+
 	err = aead_register_instance(tmpl, inst);
 	if (err)
 		goto out_drop_aead;
@@ -349,14 +359,6 @@ static int pcrypt_create(struct crypto_template *tmpl, struct rtattr **tb)
 	return -EINVAL;
 }
 
-static void pcrypt_free(struct crypto_instance *inst)
-{
-	struct pcrypt_instance_ctx *ctx = crypto_instance_ctx(inst);
-
-	crypto_drop_aead(&ctx->spawn);
-	kfree(inst);
-}
-
 static int pcrypt_cpumask_change_notify(struct notifier_block *self,
 					unsigned long val, void *data)
 {
@@ -469,7 +471,6 @@ static void pcrypt_fini_padata(struct padata_pcrypt *pcrypt)
 static struct crypto_template pcrypt_tmpl = {
 	.name = ""pcrypt"",
 	.create = pcrypt_create,
-	.free = pcrypt_free,
 	.module = THIS_MODULE,
 };
 ",linux,d76c68109f37cb85b243a1cf0f40313afd2bae68,203f45003a3d03eea8fa28d74cfc74c354416fdb,1,"static void pcrypt_free(struct crypto_instance *inst)
//flaw_line_below:
{
//flaw_line_below:
	struct pcrypt_instance_ctx *ctx = crypto_instance_ctx(inst);
//flaw_line_below:

//flaw_line_below:
	crypto_drop_aead(&ctx->spawn);
//flaw_line_below:
	kfree(inst);
//flaw_line_below:
}
"
