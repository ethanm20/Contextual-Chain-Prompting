,Unnamed: 0,Access Gained,Attack Origin,Authentication Required,Availability,CVE ID,CVE Page,CWE ID,Complexity,Confidentiality,Integrity,Known Exploits,Publish Date,Score,Summary,Update Date,Vulnerability Classification,add_lines,codeLink,commit_id,commit_message,del_lines,file_name,files_changed,func_after,func_before,lang,lines_after,lines_before,parentID,patch,project,project_after,project_before,vul,vul_func_with_fix
571,178307,,Remote,Not required,Partial,CVE-2018-5759,https://www.cvedetails.com/cve/CVE-2018-5759/,CWE-674,Medium,,,,2018-01-24,4.3,"jsparse.c in Artifex MuJS through 1.0.2 does not properly maintain the AST depth for binary expressions, which allows remote attackers to cause a denial of service (excessive recursion) via a crafted file.",2019-10-02,DoS,3,http://git.ghostscript.com/?p=mujs.git;a=commit;h=4d45a96e57fbabf00a7378b337d0ddcace6f38c1,4d45a96e57fbabf00a7378b337d0ddcace6f38c1,,0,,," static js_Ast *callexp(js_State *J)
 {
        js_Ast *a = newexp(J);
       SAVEREC();
 loop:
       INCREC();
        if (jsP_accept(J, '.')) { a = EXP2(MEMBER, a, identifiername(J)); goto loop; }
        if (jsP_accept(J, '[')) { a = EXP2(INDEX, a, expression(J, 0)); jsP_expect(J, ']'); goto loop; }
        if (jsP_accept(J, '(')) { a = EXP2(CALL, a, arguments(J)); jsP_expect(J, ')'); goto loop; }
       POPREC();
        return a;
 }
"," static js_Ast *callexp(js_State *J)
 {
        js_Ast *a = newexp(J);
 loop:
        if (jsP_accept(J, '.')) { a = EXP2(MEMBER, a, identifiername(J)); goto loop; }
        if (jsP_accept(J, '[')) { a = EXP2(INDEX, a, expression(J, 0)); jsP_expect(J, ']'); goto loop; }
        if (jsP_accept(J, '(')) { a = EXP2(CALL, a, arguments(J)); jsP_expect(J, ')'); goto loop; }
        return a;
 }
",C,"       SAVEREC();
       INCREC();
       POPREC();
",,8df3dcd8c15dbbdc883de268e7d77ee067262ebd,"@@ -25,6 +25,8 @@ JS_NORETURN static void jsP_error(js_State *J, const char *fmt, ...) JS_PRINTFLI
 
 #define INCREC() if (++J->astdepth > JS_ASTLIMIT) jsP_error(J, ""too much recursion"")
 #define DECREC() --J->astdepth
+#define SAVEREC() int SAVE=J->astdepth
+#define POPREC() J->astdepth=SAVE
 
 static void jsP_error(js_State *J, const char *fmt, ...)
 {
@@ -383,23 +385,26 @@ static js_Ast *newexp(js_State *J)
 
 static js_Ast *memberexp(js_State *J)
 {
-       js_Ast *a;
-       INCREC();
-       a = newexp(J);
+       js_Ast *a = newexp(J);
+       SAVEREC();
 loop:
+       INCREC();
        if (jsP_accept(J, '.')) { a = EXP2(MEMBER, a, identifiername(J)); goto loop; }
        if (jsP_accept(J, '[')) { a = EXP2(INDEX, a, expression(J, 0)); jsP_expect(J, ']'); goto loop; }
-       DECREC();
+       POPREC();
        return a;
 }
 
 static js_Ast *callexp(js_State *J)
 {
        js_Ast *a = newexp(J);
+       SAVEREC();
 loop:
+       INCREC();
        if (jsP_accept(J, '.')) { a = EXP2(MEMBER, a, identifiername(J)); goto loop; }
        if (jsP_accept(J, '[')) { a = EXP2(INDEX, a, expression(J, 0)); jsP_expect(J, ']'); goto loop; }
        if (jsP_accept(J, '(')) { a = EXP2(CALL, a, arguments(J)); jsP_expect(J, ')'); goto loop; }
+       POPREC();
        return a;
 }
 
@@ -432,104 +437,139 @@ static js_Ast *unary(js_State *J)
 static js_Ast *multiplicative(js_State *J)
 {
        js_Ast *a = unary(J);
+       SAVEREC();
 loop:
+       INCREC();
        if (jsP_accept(J, '*')) { a = EXP2(MUL, a, unary(J)); goto loop; }
        if (jsP_accept(J, '/')) { a = EXP2(DIV, a, unary(J)); goto loop; }
        if (jsP_accept(J, '%')) { a = EXP2(MOD, a, unary(J)); goto loop; }
+       POPREC();
        return a;
 }
 
 static js_Ast *additive(js_State *J)
 {
        js_Ast *a = multiplicative(J);
+       SAVEREC();
 loop:
+       INCREC();
        if (jsP_accept(J, '+')) { a = EXP2(ADD, a, multiplicative(J)); goto loop; }
        if (jsP_accept(J, '-')) { a = EXP2(SUB, a, multiplicative(J)); goto loop; }
+       POPREC();
        return a;
 }
 
 static js_Ast *shift(js_State *J)
 {
        js_Ast *a = additive(J);
+       SAVEREC();
 loop:
+       INCREC();
        if (jsP_accept(J, TK_SHL)) { a = EXP2(SHL, a, additive(J)); goto loop; }
        if (jsP_accept(J, TK_SHR)) { a = EXP2(SHR, a, additive(J)); goto loop; }
        if (jsP_accept(J, TK_USHR)) { a = EXP2(USHR, a, additive(J)); goto loop; }
+       POPREC();
        return a;
 }
 
 static js_Ast *relational(js_State *J, int notin)
 {
        js_Ast *a = shift(J);
+       SAVEREC();
 loop:
+       INCREC();
        if (jsP_accept(J, '<')) { a = EXP2(LT, a, shift(J)); goto loop; }
        if (jsP_accept(J, '>')) { a = EXP2(GT, a, shift(J)); goto loop; }
        if (jsP_accept(J, TK_LE)) { a = EXP2(LE, a, shift(J)); goto loop; }
        if (jsP_accept(J, TK_GE)) { a = EXP2(GE, a, shift(J)); goto loop; }
        if (jsP_accept(J, TK_INSTANCEOF)) { a = EXP2(INSTANCEOF, a, shift(J)); goto loop; }
        if (!notin && jsP_accept(J, TK_IN)) { a = EXP2(IN, a, shift(J)); goto loop; }
+       POPREC();
        return a;
 }
 
 static js_Ast *equality(js_State *J, int notin)
 {
        js_Ast *a = relational(J, notin);
+       SAVEREC();
 loop:
+       INCREC();
        if (jsP_accept(J, TK_EQ)) { a = EXP2(EQ, a, relational(J, notin)); goto loop; }
        if (jsP_accept(J, TK_NE)) { a = EXP2(NE, a, relational(J, notin)); goto loop; }
        if (jsP_accept(J, TK_STRICTEQ)) { a = EXP2(STRICTEQ, a, relational(J, notin)); goto loop; }
        if (jsP_accept(J, TK_STRICTNE)) { a = EXP2(STRICTNE, a, relational(J, notin)); goto loop; }
+       POPREC();
        return a;
 }
 
 static js_Ast *bitand(js_State *J, int notin)
 {
        js_Ast *a = equality(J, notin);
-       while (jsP_accept(J, '&'))
+       SAVEREC();
+       while (jsP_accept(J, '&')) {
+               INCREC();
                a = EXP2(BITAND, a, equality(J, notin));
+       }
+       POPREC();
        return a;
 }
 
 static js_Ast *bitxor(js_State *J, int notin)
 {
        js_Ast *a = bitand(J, notin);
-       while (jsP_accept(J, '^'))
+       SAVEREC();
+       while (jsP_accept(J, '^')) {
+               INCREC();
                a = EXP2(BITXOR, a, bitand(J, notin));
+       }
+       POPREC();
        return a;
 }
 
 static js_Ast *bitor(js_State *J, int notin)
 {
        js_Ast *a = bitxor(J, notin);
-       while (jsP_accept(J, '|'))
+       SAVEREC();
+       while (jsP_accept(J, '|')) {
+               INCREC();
                a = EXP2(BITOR, a, bitxor(J, notin));
+       }
+       POPREC();
        return a;
 }
 
 static js_Ast *logand(js_State *J, int notin)
 {
        js_Ast *a = bitor(J, notin);
-       if (jsP_accept(J, TK_AND))
+       if (jsP_accept(J, TK_AND)) {
+               INCREC();
                a = EXP2(LOGAND, a, logand(J, notin));
+               DECREC();
+       }
        return a;
 }
 
 static js_Ast *logor(js_State *J, int notin)
 {
        js_Ast *a = logand(J, notin);
-       if (jsP_accept(J, TK_OR))
+       if (jsP_accept(J, TK_OR)) {
+               INCREC();
                a = EXP2(LOGOR, a, logor(J, notin));
+               DECREC();
+       }
        return a;
 }
 
 static js_Ast *conditional(js_State *J, int notin)
 {
-       js_Ast *a, *b, *c;
-       a = logor(J, notin);
+       js_Ast *a = logor(J, notin);
        if (jsP_accept(J, '?')) {
+               js_Ast *b, *c;
+               INCREC();
                b = assignment(J, 0);
                jsP_expect(J, ':');
                c = assignment(J, notin);
+               DECREC();
                return EXP3(COND, a, b, c);
        }
        return a;
@@ -537,9 +577,8 @@ static js_Ast *conditional(js_State *J, int notin)
 
 static js_Ast *assignment(js_State *J, int notin)
 {
-       js_Ast *a;
+       js_Ast *a = conditional(J, notin);
        INCREC();
-       a = conditional(J, notin);
        if (jsP_accept(J, '=')) a = EXP2(ASS, a, assignment(J, notin));
        else if (jsP_accept(J, TK_MUL_ASS)) a = EXP2(ASS_MUL, a, assignment(J, notin));
        else if (jsP_accept(J, TK_DIV_ASS)) a = EXP2(ASS_DIV, a, assignment(J, notin));
@@ -558,12 +597,13 @@ static js_Ast *assignment(js_State *J, int notin)
 
 static js_Ast *expression(js_State *J, int notin)
 {
-       js_Ast *a;
-       INCREC();
-       a = assignment(J, notin);
-       while (jsP_accept(J, ','))
+       js_Ast *a = assignment(J, notin);
+       SAVEREC();
+       while (jsP_accept(J, ',')) {
+               INCREC();
                a = EXP2(COMMA, a, assignment(J, notin));
-       DECREC();
+       }
+       POPREC();
        return a;
 }",ghostscript,http://git.ghostscript.com/?p=mujs.git;a=blob;f=jsparse.c;h=1f460243cceb25b2d82399bdcccb3af073de5d52;hb=4d45a96e57fbabf00a7378b337d0ddcace6f38c1,http://git.ghostscript.com/?p=mujs.git;a=blob;f=jsparse.c;h=e0b950ad4f14781ca0469a6c8ce4c2d75025a345,1," static js_Ast *callexp(js_State *J)
 {
        js_Ast *a = newexp(J);
//fix_flaw_line_below:
//       SAVEREC();
 loop:
//fix_flaw_line_below:
//       INCREC();
        if (jsP_accept(J, '.')) { a = EXP2(MEMBER, a, identifiername(J)); goto loop; }
        if (jsP_accept(J, '[')) { a = EXP2(INDEX, a, expression(J, 0)); jsP_expect(J, ']'); goto loop; }
        if (jsP_accept(J, '(')) { a = EXP2(CALL, a, arguments(J)); jsP_expect(J, ')'); goto loop; }
//fix_flaw_line_below:
//       POPREC();
        return a;
 }
"
572,178308,,Remote,Not required,Partial,CVE-2018-5759,https://www.cvedetails.com/cve/CVE-2018-5759/,CWE-674,Medium,,,,2018-01-24,4.3,"jsparse.c in Artifex MuJS through 1.0.2 does not properly maintain the AST depth for binary expressions, which allows remote attackers to cause a denial of service (excessive recursion) via a crafted file.",2019-10-02,DoS,4,http://git.ghostscript.com/?p=mujs.git;a=commit;h=4d45a96e57fbabf00a7378b337d0ddcace6f38c1,4d45a96e57fbabf00a7378b337d0ddcace6f38c1,,4,,," static js_Ast *memberexp(js_State *J)
 {
       js_Ast *a = newexp(J);
       SAVEREC();
 loop:
       INCREC();
        if (jsP_accept(J, '.')) { a = EXP2(MEMBER, a, identifiername(J)); goto loop; }
        if (jsP_accept(J, '[')) { a = EXP2(INDEX, a, expression(J, 0)); jsP_expect(J, ']'); goto loop; }
       POPREC();
        return a;
 }
"," static js_Ast *memberexp(js_State *J)
 {
       js_Ast *a;
       INCREC();
       a = newexp(J);
 loop:
        if (jsP_accept(J, '.')) { a = EXP2(MEMBER, a, identifiername(J)); goto loop; }
        if (jsP_accept(J, '[')) { a = EXP2(INDEX, a, expression(J, 0)); jsP_expect(J, ']'); goto loop; }
       DECREC();
        return a;
 }
",C,"       js_Ast *a = newexp(J);
       SAVEREC();
       INCREC();
       POPREC();
","       js_Ast *a;
       INCREC();
       a = newexp(J);
       DECREC();
",8df3dcd8c15dbbdc883de268e7d77ee067262ebd,"@@ -25,6 +25,8 @@ JS_NORETURN static void jsP_error(js_State *J, const char *fmt, ...) JS_PRINTFLI
 
 #define INCREC() if (++J->astdepth > JS_ASTLIMIT) jsP_error(J, ""too much recursion"")
 #define DECREC() --J->astdepth
+#define SAVEREC() int SAVE=J->astdepth
+#define POPREC() J->astdepth=SAVE
 
 static void jsP_error(js_State *J, const char *fmt, ...)
 {
@@ -383,23 +385,26 @@ static js_Ast *newexp(js_State *J)
 
 static js_Ast *memberexp(js_State *J)
 {
-       js_Ast *a;
-       INCREC();
-       a = newexp(J);
+       js_Ast *a = newexp(J);
+       SAVEREC();
 loop:
+       INCREC();
        if (jsP_accept(J, '.')) { a = EXP2(MEMBER, a, identifiername(J)); goto loop; }
        if (jsP_accept(J, '[')) { a = EXP2(INDEX, a, expression(J, 0)); jsP_expect(J, ']'); goto loop; }
-       DECREC();
+       POPREC();
        return a;
 }
 
 static js_Ast *callexp(js_State *J)
 {
        js_Ast *a = newexp(J);
+       SAVEREC();
 loop:
+       INCREC();
        if (jsP_accept(J, '.')) { a = EXP2(MEMBER, a, identifiername(J)); goto loop; }
        if (jsP_accept(J, '[')) { a = EXP2(INDEX, a, expression(J, 0)); jsP_expect(J, ']'); goto loop; }
        if (jsP_accept(J, '(')) { a = EXP2(CALL, a, arguments(J)); jsP_expect(J, ')'); goto loop; }
+       POPREC();
        return a;
 }
 
@@ -432,104 +437,139 @@ static js_Ast *unary(js_State *J)
 static js_Ast *multiplicative(js_State *J)
 {
        js_Ast *a = unary(J);
+       SAVEREC();
 loop:
+       INCREC();
        if (jsP_accept(J, '*')) { a = EXP2(MUL, a, unary(J)); goto loop; }
        if (jsP_accept(J, '/')) { a = EXP2(DIV, a, unary(J)); goto loop; }
        if (jsP_accept(J, '%')) { a = EXP2(MOD, a, unary(J)); goto loop; }
+       POPREC();
        return a;
 }
 
 static js_Ast *additive(js_State *J)
 {
        js_Ast *a = multiplicative(J);
+       SAVEREC();
 loop:
+       INCREC();
        if (jsP_accept(J, '+')) { a = EXP2(ADD, a, multiplicative(J)); goto loop; }
        if (jsP_accept(J, '-')) { a = EXP2(SUB, a, multiplicative(J)); goto loop; }
+       POPREC();
        return a;
 }
 
 static js_Ast *shift(js_State *J)
 {
        js_Ast *a = additive(J);
+       SAVEREC();
 loop:
+       INCREC();
        if (jsP_accept(J, TK_SHL)) { a = EXP2(SHL, a, additive(J)); goto loop; }
        if (jsP_accept(J, TK_SHR)) { a = EXP2(SHR, a, additive(J)); goto loop; }
        if (jsP_accept(J, TK_USHR)) { a = EXP2(USHR, a, additive(J)); goto loop; }
+       POPREC();
        return a;
 }
 
 static js_Ast *relational(js_State *J, int notin)
 {
        js_Ast *a = shift(J);
+       SAVEREC();
 loop:
+       INCREC();
        if (jsP_accept(J, '<')) { a = EXP2(LT, a, shift(J)); goto loop; }
        if (jsP_accept(J, '>')) { a = EXP2(GT, a, shift(J)); goto loop; }
        if (jsP_accept(J, TK_LE)) { a = EXP2(LE, a, shift(J)); goto loop; }
        if (jsP_accept(J, TK_GE)) { a = EXP2(GE, a, shift(J)); goto loop; }
        if (jsP_accept(J, TK_INSTANCEOF)) { a = EXP2(INSTANCEOF, a, shift(J)); goto loop; }
        if (!notin && jsP_accept(J, TK_IN)) { a = EXP2(IN, a, shift(J)); goto loop; }
+       POPREC();
        return a;
 }
 
 static js_Ast *equality(js_State *J, int notin)
 {
        js_Ast *a = relational(J, notin);
+       SAVEREC();
 loop:
+       INCREC();
        if (jsP_accept(J, TK_EQ)) { a = EXP2(EQ, a, relational(J, notin)); goto loop; }
        if (jsP_accept(J, TK_NE)) { a = EXP2(NE, a, relational(J, notin)); goto loop; }
        if (jsP_accept(J, TK_STRICTEQ)) { a = EXP2(STRICTEQ, a, relational(J, notin)); goto loop; }
        if (jsP_accept(J, TK_STRICTNE)) { a = EXP2(STRICTNE, a, relational(J, notin)); goto loop; }
+       POPREC();
        return a;
 }
 
 static js_Ast *bitand(js_State *J, int notin)
 {
        js_Ast *a = equality(J, notin);
-       while (jsP_accept(J, '&'))
+       SAVEREC();
+       while (jsP_accept(J, '&')) {
+               INCREC();
                a = EXP2(BITAND, a, equality(J, notin));
+       }
+       POPREC();
        return a;
 }
 
 static js_Ast *bitxor(js_State *J, int notin)
 {
        js_Ast *a = bitand(J, notin);
-       while (jsP_accept(J, '^'))
+       SAVEREC();
+       while (jsP_accept(J, '^')) {
+               INCREC();
                a = EXP2(BITXOR, a, bitand(J, notin));
+       }
+       POPREC();
        return a;
 }
 
 static js_Ast *bitor(js_State *J, int notin)
 {
        js_Ast *a = bitxor(J, notin);
-       while (jsP_accept(J, '|'))
+       SAVEREC();
+       while (jsP_accept(J, '|')) {
+               INCREC();
                a = EXP2(BITOR, a, bitxor(J, notin));
+       }
+       POPREC();
        return a;
 }
 
 static js_Ast *logand(js_State *J, int notin)
 {
        js_Ast *a = bitor(J, notin);
-       if (jsP_accept(J, TK_AND))
+       if (jsP_accept(J, TK_AND)) {
+               INCREC();
                a = EXP2(LOGAND, a, logand(J, notin));
+               DECREC();
+       }
        return a;
 }
 
 static js_Ast *logor(js_State *J, int notin)
 {
        js_Ast *a = logand(J, notin);
-       if (jsP_accept(J, TK_OR))
+       if (jsP_accept(J, TK_OR)) {
+               INCREC();
                a = EXP2(LOGOR, a, logor(J, notin));
+               DECREC();
+       }
        return a;
 }
 
 static js_Ast *conditional(js_State *J, int notin)
 {
-       js_Ast *a, *b, *c;
-       a = logor(J, notin);
+       js_Ast *a = logor(J, notin);
        if (jsP_accept(J, '?')) {
+               js_Ast *b, *c;
+               INCREC();
                b = assignment(J, 0);
                jsP_expect(J, ':');
                c = assignment(J, notin);
+               DECREC();
                return EXP3(COND, a, b, c);
        }
        return a;
@@ -537,9 +577,8 @@ static js_Ast *conditional(js_State *J, int notin)
 
 static js_Ast *assignment(js_State *J, int notin)
 {
-       js_Ast *a;
+       js_Ast *a = conditional(J, notin);
        INCREC();
-       a = conditional(J, notin);
        if (jsP_accept(J, '=')) a = EXP2(ASS, a, assignment(J, notin));
        else if (jsP_accept(J, TK_MUL_ASS)) a = EXP2(ASS_MUL, a, assignment(J, notin));
        else if (jsP_accept(J, TK_DIV_ASS)) a = EXP2(ASS_DIV, a, assignment(J, notin));
@@ -558,12 +597,13 @@ static js_Ast *assignment(js_State *J, int notin)
 
 static js_Ast *expression(js_State *J, int notin)
 {
-       js_Ast *a;
-       INCREC();
-       a = assignment(J, notin);
-       while (jsP_accept(J, ','))
+       js_Ast *a = assignment(J, notin);
+       SAVEREC();
+       while (jsP_accept(J, ',')) {
+               INCREC();
                a = EXP2(COMMA, a, assignment(J, notin));
-       DECREC();
+       }
+       POPREC();
        return a;
 }",ghostscript,http://git.ghostscript.com/?p=mujs.git;a=blob;f=jsparse.c;h=1f460243cceb25b2d82399bdcccb3af073de5d52;hb=4d45a96e57fbabf00a7378b337d0ddcace6f38c1,http://git.ghostscript.com/?p=mujs.git;a=blob;f=jsparse.c;h=e0b950ad4f14781ca0469a6c8ce4c2d75025a345,1," static js_Ast *memberexp(js_State *J)
 {
//flaw_line_below:
       js_Ast *a;
//flaw_line_below:
       INCREC();
//flaw_line_below:
       a = newexp(J);
//fix_flaw_line_below:
//       js_Ast *a = newexp(J);
//fix_flaw_line_below:
//       SAVEREC();
 loop:
//fix_flaw_line_below:
//       INCREC();
        if (jsP_accept(J, '.')) { a = EXP2(MEMBER, a, identifiername(J)); goto loop; }
        if (jsP_accept(J, '[')) { a = EXP2(INDEX, a, expression(J, 0)); jsP_expect(J, ']'); goto loop; }
//flaw_line_below:
       DECREC();
//fix_flaw_line_below:
//       POPREC();
        return a;
 }
"
3536,181272,,Remote,Not required,Partial,CVE-2017-9438,https://www.cvedetails.com/cve/CVE-2017-9438/,CWE-674,Low,,,,2017-06-05,5.0,"libyara/re.c in the regexp module in YARA 3.5.0 allows remote attackers to cause a denial of service (stack consumption) via a crafted rule (involving hex strings) that is mishandled in the _yr_re_emit function, a different vulnerability than CVE-2017-9304.",2019-10-02,DoS ,14,https://github.com/VirusTotal/yara/commit/10e8bd3071677dd1fa76beeef4bc2fc427cea5e7,10e8bd3071677dd1fa76beeef4bc2fc427cea5e7,Fix issue #674 for hex strings.,14,libyara/hex_grammar.c,"{""sha"": ""48f550a51b88c7458253e70376791b308b5d49a8"", ""filename"": ""libyara/hex_grammar.c"", ""status"": ""modified"", ""additions"": 75, ""deletions"": 61, ""changes"": 136, ""blob_url"": ""https://github.com/VirusTotal/yara/blob/10e8bd3071677dd1fa76beeef4bc2fc427cea5e7/libyara/hex_grammar.c"", ""raw_url"": ""https://github.com/VirusTotal/yara/raw/10e8bd3071677dd1fa76beeef4bc2fc427cea5e7/libyara/hex_grammar.c"", ""contents_url"": ""https://api.github.com/repos/VirusTotal/yara/contents/libyara/hex_grammar.c?ref=10e8bd3071677dd1fa76beeef4bc2fc427cea5e7"", ""patch"": ""@@ -93,6 +93,13 @@\n #define mark_as_not_fast_regexp() \\\n     ((RE_AST*) yyget_extra(yyscanner))->flags &= ~RE_FLAGS_FAST_REGEXP\n \n+#define incr_ast_levels() \\\n+    if (((RE_AST*) yyget_extra(yyscanner))->levels++ > RE_MAX_AST_LEVELS) \\\n+    { \\\n+      lex_env->last_error_code = ERROR_INVALID_HEX_STRING; \\\n+      YYABORT; \\\n+    }\n+\n #define ERROR_IF(x, error) \\\n     if (x) \\\n     { \\\n@@ -107,7 +114,7 @@\n     } \\\n \n \n-#line 111 \""hex_grammar.c\"" /* yacc.c:339  */\n+#line 118 \""hex_grammar.c\"" /* yacc.c:339  */\n \n # ifndef YY_NULLPTR\n #  if defined __cplusplus && 201103L <= __cplusplus\n@@ -157,12 +164,12 @@ extern int hex_yydebug;\n \n union YYSTYPE\n {\n-#line 78 \""hex_grammar.y\"" /* yacc.c:355  */\n+#line 85 \""hex_grammar.y\"" /* yacc.c:355  */\n \n   int64_t integer;\n   RE_NODE *re_node;\n \n-#line 166 \""hex_grammar.c\"" /* yacc.c:355  */\n+#line 173 \""hex_grammar.c\"" /* yacc.c:355  */\n };\n \n typedef union YYSTYPE YYSTYPE;\n@@ -178,7 +185,7 @@ int hex_yyparse (void *yyscanner, HEX_LEX_ENVIRONMENT *lex_env);\n \n /* Copy the second part of user declarations.  */\n \n-#line 182 \""hex_grammar.c\"" /* yacc.c:358  */\n+#line 189 \""hex_grammar.c\"" /* yacc.c:358  */\n \n #ifdef short\n # undef short\n@@ -476,9 +483,9 @@ static const yytype_uint8 yytranslate[] =\n   /* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */\n static const yytype_uint16 yyrline[] =\n {\n-       0,   105,   105,   114,   118,   127,   189,   193,   206,   210,\n-     219,   233,   232,   245,   268,   300,   322,   342,   346,   360,\n-     368\n+       0,   112,   112,   121,   125,   136,   200,   204,   219,   223,\n+     232,   246,   245,   258,   281,   313,   335,   355,   359,   374,\n+     382\n };\n #endif\n \n@@ -1017,45 +1024,45 @@ yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, void *yyscanner, H\n   switch (yytype)\n     {\n           case 16: /* tokens  */\n-#line 94 \""hex_grammar.y\"" /* yacc.c:1257  */\n+#line 101 \""hex_grammar.y\"" /* yacc.c:1257  */\n       { yr_re_node_destroy(((*yyvaluep).re_node)); }\n-#line 1023 \""hex_grammar.c\"" /* yacc.c:1257  */\n+#line 1030 \""hex_grammar.c\"" /* yacc.c:1257  */\n         break;\n \n     case 17: /* token_sequence  */\n-#line 95 \""hex_grammar.y\"" /* yacc.c:1257  */\n+#line 102 \""hex_grammar.y\"" /* yacc.c:1257  */\n       { yr_re_node_destroy(((*yyvaluep).re_node)); }\n-#line 1029 \""hex_grammar.c\"" /* yacc.c:1257  */\n+#line 1036 \""hex_grammar.c\"" /* yacc.c:1257  */\n         break;\n \n     case 18: /* token_or_range  */\n-#line 96 \""hex_grammar.y\"" /* yacc.c:1257  */\n+#line 103 \""hex_grammar.y\"" /* yacc.c:1257  */\n       { yr_re_node_destroy(((*yyvaluep).re_node)); }\n-#line 1035 \""hex_grammar.c\"" /* yacc.c:1257  */\n+#line 1042 \""hex_grammar.c\"" /* yacc.c:1257  */\n         break;\n \n     case 19: /* token  */\n-#line 97 \""hex_grammar.y\"" /* yacc.c:1257  */\n+#line 104 \""hex_grammar.y\"" /* yacc.c:1257  */\n       { yr_re_node_destroy(((*yyvaluep).re_node)); }\n-#line 1041 \""hex_grammar.c\"" /* yacc.c:1257  */\n+#line 1048 \""hex_grammar.c\"" /* yacc.c:1257  */\n         break;\n \n     case 21: /* range  */\n-#line 100 \""hex_grammar.y\"" /* yacc.c:1257  */\n+#line 107 \""hex_grammar.y\"" /* yacc.c:1257  */\n       { yr_re_node_destroy(((*yyvaluep).re_node)); }\n-#line 1047 \""hex_grammar.c\"" /* yacc.c:1257  */\n+#line 1054 \""hex_grammar.c\"" /* yacc.c:1257  */\n         break;\n \n     case 22: /* alternatives  */\n-#line 99 \""hex_grammar.y\"" /* yacc.c:1257  */\n+#line 106 \""hex_grammar.y\"" /* yacc.c:1257  */\n       { yr_re_node_destroy(((*yyvaluep).re_node)); }\n-#line 1053 \""hex_grammar.c\"" /* yacc.c:1257  */\n+#line 1060 \""hex_grammar.c\"" /* yacc.c:1257  */\n         break;\n \n     case 23: /* byte  */\n-#line 98 \""hex_grammar.y\"" /* yacc.c:1257  */\n+#line 105 \""hex_grammar.y\"" /* yacc.c:1257  */\n       { yr_re_node_destroy(((*yyvaluep).re_node)); }\n-#line 1059 \""hex_grammar.c\"" /* yacc.c:1257  */\n+#line 1066 \""hex_grammar.c\"" /* yacc.c:1257  */\n         break;\n \n \n@@ -1321,42 +1328,46 @@ YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);\n   switch (yyn)\n     {\n         case 2:\n-#line 106 \""hex_grammar.y\"" /* yacc.c:1646  */\n+#line 113 \""hex_grammar.y\"" /* yacc.c:1661  */\n     {\n         RE_AST* re_ast = yyget_extra(yyscanner);\n         re_ast->root_node = (yyvsp[-1].re_node);\n       }\n-#line 1330 \""hex_grammar.c\"" /* yacc.c:1646  */\n+#line 1337 \""hex_grammar.c\"" /* yacc.c:1661  */\n     break;\n \n   case 3:\n-#line 115 \""hex_grammar.y\"" /* yacc.c:1646  */\n+#line 122 \""hex_grammar.y\"" /* yacc.c:1661  */\n     {\n         (yyval.re_node) = (yyvsp[0].re_node);\n       }\n-#line 1338 \""hex_grammar.c\"" /* yacc.c:1646  */\n+#line 1345 \""hex_grammar.c\"" /* yacc.c:1661  */\n     break;\n \n   case 4:\n-#line 119 \""hex_grammar.y\"" /* yacc.c:1646  */\n+#line 126 \""hex_grammar.y\"" /* yacc.c:1661  */\n     {\n+        incr_ast_levels();\n+\n         (yyval.re_node) = yr_re_node_create(RE_NODE_CONCAT, (yyvsp[-1].re_node), (yyvsp[0].re_node));\n \n         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-1].re_node));\n         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[0].re_node));\n \n         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n       }\n-#line 1351 \""hex_grammar.c\"" /* yacc.c:1646  */\n+#line 1360 \""hex_grammar.c\"" /* yacc.c:1661  */\n     break;\n \n   case 5:\n-#line 128 \""hex_grammar.y\"" /* yacc.c:1646  */\n+#line 137 \""hex_grammar.y\"" /* yacc.c:1661  */\n     {\n         RE_NODE* new_concat;\n         RE_NODE* leftmost_concat = NULL;\n         RE_NODE* leftmost_node = (yyvsp[-1].re_node);\n \n+        incr_ast_levels();\n+\n         (yyval.re_node) = NULL;\n \n         /*\n@@ -1409,49 +1420,51 @@ YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);\n \n         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n       }\n-#line 1413 \""hex_grammar.c\"" /* yacc.c:1646  */\n+#line 1424 \""hex_grammar.c\"" /* yacc.c:1661  */\n     break;\n \n   case 6:\n-#line 190 \""hex_grammar.y\"" /* yacc.c:1646  */\n+#line 201 \""hex_grammar.y\"" /* yacc.c:1661  */\n     {\n         (yyval.re_node) = (yyvsp[0].re_node);\n       }\n-#line 1421 \""hex_grammar.c\"" /* yacc.c:1646  */\n+#line 1432 \""hex_grammar.c\"" /* yacc.c:1661  */\n     break;\n \n   case 7:\n-#line 194 \""hex_grammar.y\"" /* yacc.c:1646  */\n+#line 205 \""hex_grammar.y\"" /* yacc.c:1661  */\n     {\n+        incr_ast_levels();\n+\n         (yyval.re_node) = yr_re_node_create(RE_NODE_CONCAT, (yyvsp[-1].re_node), (yyvsp[0].re_node));\n \n         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-1].re_node));\n         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[0].re_node));\n \n         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n       }\n-#line 1434 \""hex_grammar.c\"" /* yacc.c:1646  */\n+#line 1447 \""hex_grammar.c\"" /* yacc.c:1661  */\n     break;\n \n   case 8:\n-#line 207 \""hex_grammar.y\"" /* yacc.c:1646  */\n+#line 220 \""hex_grammar.y\"" /* yacc.c:1661  */\n     {\n         (yyval.re_node) = (yyvsp[0].re_node);\n       }\n-#line 1442 \""hex_grammar.c\"" /* yacc.c:1646  */\n+#line 1455 \""hex_grammar.c\"" /* yacc.c:1661  */\n     break;\n \n   case 9:\n-#line 211 \""hex_grammar.y\"" /* yacc.c:1646  */\n+#line 224 \""hex_grammar.y\"" /* yacc.c:1661  */\n     {\n         (yyval.re_node) = (yyvsp[0].re_node);\n         (yyval.re_node)->greedy = FALSE;\n       }\n-#line 1451 \""hex_grammar.c\"" /* yacc.c:1646  */\n+#line 1464 \""hex_grammar.c\"" /* yacc.c:1661  */\n     break;\n \n   case 10:\n-#line 220 \""hex_grammar.y\"" /* yacc.c:1646  */\n+#line 233 \""hex_grammar.y\"" /* yacc.c:1661  */\n     {\n         lex_env->token_count++;\n \n@@ -1464,28 +1477,28 @@ YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);\n \n         (yyval.re_node) = (yyvsp[0].re_node);\n       }\n-#line 1468 \""hex_grammar.c\"" /* yacc.c:1646  */\n+#line 1481 \""hex_grammar.c\"" /* yacc.c:1661  */\n     break;\n \n   case 11:\n-#line 233 \""hex_grammar.y\"" /* yacc.c:1646  */\n+#line 246 \""hex_grammar.y\"" /* yacc.c:1661  */\n     {\n         lex_env->inside_or++;\n       }\n-#line 1476 \""hex_grammar.c\"" /* yacc.c:1646  */\n+#line 1489 \""hex_grammar.c\"" /* yacc.c:1661  */\n     break;\n \n   case 12:\n-#line 237 \""hex_grammar.y\"" /* yacc.c:1646  */\n+#line 250 \""hex_grammar.y\"" /* yacc.c:1661  */\n     {\n         (yyval.re_node) = (yyvsp[-1].re_node);\n         lex_env->inside_or--;\n       }\n-#line 1485 \""hex_grammar.c\"" /* yacc.c:1646  */\n+#line 1498 \""hex_grammar.c\"" /* yacc.c:1661  */\n     break;\n \n   case 13:\n-#line 246 \""hex_grammar.y\"" /* yacc.c:1646  */\n+#line 259 \""hex_grammar.y\"" /* yacc.c:1661  */\n     {\n         if ((yyvsp[-1].integer) <= 0)\n         {\n@@ -1508,11 +1521,11 @@ YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);\n         (yyval.re_node)->start = (int) (yyvsp[-1].integer);\n         (yyval.re_node)->end = (int) (yyvsp[-1].integer);\n       }\n-#line 1512 \""hex_grammar.c\"" /* yacc.c:1646  */\n+#line 1525 \""hex_grammar.c\"" /* yacc.c:1661  */\n     break;\n \n   case 14:\n-#line 269 \""hex_grammar.y\"" /* yacc.c:1646  */\n+#line 282 \""hex_grammar.y\"" /* yacc.c:1661  */\n     {\n         if (lex_env->inside_or &&\n             ((yyvsp[-3].integer) > STRING_CHAINING_THRESHOLD ||\n@@ -1544,11 +1557,11 @@ YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);\n         (yyval.re_node)->start = (int) (yyvsp[-3].integer);\n         (yyval.re_node)->end = (int) (yyvsp[-1].integer);\n       }\n-#line 1548 \""hex_grammar.c\"" /* yacc.c:1646  */\n+#line 1561 \""hex_grammar.c\"" /* yacc.c:1661  */\n     break;\n \n   case 15:\n-#line 301 \""hex_grammar.y\"" /* yacc.c:1646  */\n+#line 314 \""hex_grammar.y\"" /* yacc.c:1661  */\n     {\n         if (lex_env->inside_or)\n         {\n@@ -1570,11 +1583,11 @@ YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);\n         (yyval.re_node)->start = (int) (yyvsp[-2].integer);\n         (yyval.re_node)->end = INT_MAX;\n       }\n-#line 1574 \""hex_grammar.c\"" /* yacc.c:1646  */\n+#line 1587 \""hex_grammar.c\"" /* yacc.c:1661  */\n     break;\n \n   case 16:\n-#line 323 \""hex_grammar.y\"" /* yacc.c:1646  */\n+#line 336 \""hex_grammar.y\"" /* yacc.c:1661  */\n     {\n         if (lex_env->inside_or)\n         {\n@@ -1590,21 +1603,22 @@ YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);\n         (yyval.re_node)->start = 0;\n         (yyval.re_node)->end = INT_MAX;\n       }\n-#line 1594 \""hex_grammar.c\"" /* yacc.c:1646  */\n+#line 1607 \""hex_grammar.c\"" /* yacc.c:1661  */\n     break;\n \n   case 17:\n-#line 343 \""hex_grammar.y\"" /* yacc.c:1646  */\n+#line 356 \""hex_grammar.y\"" /* yacc.c:1661  */\n     {\n           (yyval.re_node) = (yyvsp[0].re_node);\n       }\n-#line 1602 \""hex_grammar.c\"" /* yacc.c:1646  */\n+#line 1615 \""hex_grammar.c\"" /* yacc.c:1661  */\n     break;\n \n   case 18:\n-#line 347 \""hex_grammar.y\"" /* yacc.c:1646  */\n+#line 360 \""hex_grammar.y\"" /* yacc.c:1661  */\n     {\n         mark_as_not_fast_regexp();\n+        incr_ast_levels();\n \n         (yyval.re_node) = yr_re_node_create(RE_NODE_ALT, (yyvsp[-2].re_node), (yyvsp[0].re_node));\n \n@@ -1613,23 +1627,23 @@ YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);\n \n         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n       }\n-#line 1617 \""hex_grammar.c\"" /* yacc.c:1646  */\n+#line 1631 \""hex_grammar.c\"" /* yacc.c:1661  */\n     break;\n \n   case 19:\n-#line 361 \""hex_grammar.y\"" /* yacc.c:1646  */\n+#line 375 \""hex_grammar.y\"" /* yacc.c:1661  */\n     {\n         (yyval.re_node) = yr_re_node_create(RE_NODE_LITERAL, NULL, NULL);\n \n         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n \n         (yyval.re_node)->value = (int) (yyvsp[0].integer);\n       }\n-#line 1629 \""hex_grammar.c\"" /* yacc.c:1646  */\n+#line 1643 \""hex_grammar.c\"" /* yacc.c:1661  */\n     break;\n \n   case 20:\n-#line 369 \""hex_grammar.y\"" /* yacc.c:1646  */\n+#line 383 \""hex_grammar.y\"" /* yacc.c:1661  */\n     {\n         uint8_t mask = (uint8_t) ((yyvsp[0].integer) >> 8);\n \n@@ -1649,11 +1663,11 @@ YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);\n           (yyval.re_node)->mask = mask;\n         }\n       }\n-#line 1653 \""hex_grammar.c\"" /* yacc.c:1646  */\n+#line 1667 \""hex_grammar.c\"" /* yacc.c:1661  */\n     break;\n \n \n-#line 1657 \""hex_grammar.c\"" /* yacc.c:1646  */\n+#line 1671 \""hex_grammar.c\"" /* yacc.c:1661  */\n       default: break;\n     }\n   /* User semantic actions sometimes alter yychar, and that requires\n@@ -1881,5 +1895,5 @@ YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);\n #endif\n   return yyresult;\n }\n-#line 390 \""hex_grammar.y\"" /* yacc.c:1906  */\n+#line 404 \""hex_grammar.y\"" /* yacc.c:1906  */\n ""}<_**next**_>{""sha"": ""d37c1640c35d73ddcb4bdf0653938b6663b92294"", ""filename"": ""libyara/hex_grammar.h"", ""status"": ""modified"", ""additions"": 2, ""deletions"": 2, ""changes"": 4, ""blob_url"": ""https://github.com/VirusTotal/yara/blob/10e8bd3071677dd1fa76beeef4bc2fc427cea5e7/libyara/hex_grammar.h"", ""raw_url"": ""https://github.com/VirusTotal/yara/raw/10e8bd3071677dd1fa76beeef4bc2fc427cea5e7/libyara/hex_grammar.h"", ""contents_url"": ""https://api.github.com/repos/VirusTotal/yara/contents/libyara/hex_grammar.h?ref=10e8bd3071677dd1fa76beeef4bc2fc427cea5e7"", ""patch"": ""@@ -60,12 +60,12 @@ extern int hex_yydebug;\n \n union YYSTYPE\n {\n-#line 78 \""hex_grammar.y\"" /* yacc.c:1909  */\n+#line 85 \""hex_grammar.y\"" /* yacc.c:1915  */\n \n   int64_t integer;\n   RE_NODE *re_node;\n \n-#line 69 \""hex_grammar.h\"" /* yacc.c:1909  */\n+#line 69 \""hex_grammar.h\"" /* yacc.c:1915  */\n };\n \n typedef union YYSTYPE YYSTYPE;""}<_**next**_>{""sha"": ""bf907e934111891d9a6730bf85a465ab6e894e24"", ""filename"": ""libyara/hex_grammar.y"", ""status"": ""modified"", ""additions"": 14, ""deletions"": 0, ""changes"": 14, ""blob_url"": ""https://github.com/VirusTotal/yara/blob/10e8bd3071677dd1fa76beeef4bc2fc427cea5e7/libyara/hex_grammar.y"", ""raw_url"": ""https://github.com/VirusTotal/yara/raw/10e8bd3071677dd1fa76beeef4bc2fc427cea5e7/libyara/hex_grammar.y"", ""contents_url"": ""https://api.github.com/repos/VirusTotal/yara/contents/libyara/hex_grammar.y?ref=10e8bd3071677dd1fa76beeef4bc2fc427cea5e7"", ""patch"": ""@@ -51,6 +51,13 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n #define mark_as_not_fast_regexp() \\\n     ((RE_AST*) yyget_extra(yyscanner))->flags &= ~RE_FLAGS_FAST_REGEXP\n \n+#define incr_ast_levels() \\\n+    if (((RE_AST*) yyget_extra(yyscanner))->levels++ > RE_MAX_AST_LEVELS) \\\n+    { \\\n+      lex_env->last_error_code = ERROR_INVALID_HEX_STRING; \\\n+      YYABORT; \\\n+    }\n+\n #define ERROR_IF(x, error) \\\n     if (x) \\\n     { \\\n@@ -117,6 +124,8 @@ tokens\n       }\n     | token token\n       {\n+        incr_ast_levels();\n+\n         $$ = yr_re_node_create(RE_NODE_CONCAT, $1, $2);\n \n         DESTROY_NODE_IF($$ == NULL, $1);\n@@ -130,6 +139,8 @@ tokens\n         RE_NODE* leftmost_concat = NULL;\n         RE_NODE* leftmost_node = $2;\n \n+        incr_ast_levels();\n+\n         $$ = NULL;\n \n         /*\n@@ -192,6 +203,8 @@ token_sequence\n       }\n     | token_sequence token_or_range\n       {\n+        incr_ast_levels();\n+\n         $$ = yr_re_node_create(RE_NODE_CONCAT, $1, $2);\n \n         DESTROY_NODE_IF($$ == NULL, $1);\n@@ -346,6 +359,7 @@ alternatives\n     | alternatives '|' tokens\n       {\n         mark_as_not_fast_regexp();\n+        incr_ast_levels();\n \n         $$ = yr_re_node_create(RE_NODE_ALT, $1, $3);\n ""}","yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, void *yyscanner, HEX_LEX_ENVIRONMENT *lex_env)
{
  YYUSE (yyvaluep);
  YYUSE (yyscanner);
  YYUSE (lex_env);
  if (!yymsg)
    yymsg = ""Deleting"";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
   switch (yytype)
     {
           case 16: /* tokens  */
#line 101 ""hex_grammar.y"" /* yacc.c:1257  */
       { yr_re_node_destroy(((*yyvaluep).re_node)); }
#line 1030 ""hex_grammar.c"" /* yacc.c:1257  */
         break;
 
     case 17: /* token_sequence  */
#line 102 ""hex_grammar.y"" /* yacc.c:1257  */
       { yr_re_node_destroy(((*yyvaluep).re_node)); }
#line 1036 ""hex_grammar.c"" /* yacc.c:1257  */
         break;
 
     case 18: /* token_or_range  */
#line 103 ""hex_grammar.y"" /* yacc.c:1257  */
       { yr_re_node_destroy(((*yyvaluep).re_node)); }
#line 1042 ""hex_grammar.c"" /* yacc.c:1257  */
         break;
 
     case 19: /* token  */
#line 104 ""hex_grammar.y"" /* yacc.c:1257  */
       { yr_re_node_destroy(((*yyvaluep).re_node)); }
#line 1048 ""hex_grammar.c"" /* yacc.c:1257  */
         break;
 
     case 21: /* range  */
#line 107 ""hex_grammar.y"" /* yacc.c:1257  */
       { yr_re_node_destroy(((*yyvaluep).re_node)); }
#line 1054 ""hex_grammar.c"" /* yacc.c:1257  */
         break;
 
     case 22: /* alternatives  */
#line 106 ""hex_grammar.y"" /* yacc.c:1257  */
       { yr_re_node_destroy(((*yyvaluep).re_node)); }
#line 1060 ""hex_grammar.c"" /* yacc.c:1257  */
         break;
 
     case 23: /* byte  */
#line 105 ""hex_grammar.y"" /* yacc.c:1257  */
       { yr_re_node_destroy(((*yyvaluep).re_node)); }
#line 1066 ""hex_grammar.c"" /* yacc.c:1257  */
         break;
 
 
      default:
        break;
    }
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}
","yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, void *yyscanner, HEX_LEX_ENVIRONMENT *lex_env)
{
  YYUSE (yyvaluep);
  YYUSE (yyscanner);
  YYUSE (lex_env);
  if (!yymsg)
    yymsg = ""Deleting"";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
   switch (yytype)
     {
           case 16: /* tokens  */
#line 94 ""hex_grammar.y"" /* yacc.c:1257  */
       { yr_re_node_destroy(((*yyvaluep).re_node)); }
#line 1023 ""hex_grammar.c"" /* yacc.c:1257  */
         break;
 
     case 17: /* token_sequence  */
#line 95 ""hex_grammar.y"" /* yacc.c:1257  */
       { yr_re_node_destroy(((*yyvaluep).re_node)); }
#line 1029 ""hex_grammar.c"" /* yacc.c:1257  */
         break;
 
     case 18: /* token_or_range  */
#line 96 ""hex_grammar.y"" /* yacc.c:1257  */
       { yr_re_node_destroy(((*yyvaluep).re_node)); }
#line 1035 ""hex_grammar.c"" /* yacc.c:1257  */
         break;
 
     case 19: /* token  */
#line 97 ""hex_grammar.y"" /* yacc.c:1257  */
       { yr_re_node_destroy(((*yyvaluep).re_node)); }
#line 1041 ""hex_grammar.c"" /* yacc.c:1257  */
         break;
 
     case 21: /* range  */
#line 100 ""hex_grammar.y"" /* yacc.c:1257  */
       { yr_re_node_destroy(((*yyvaluep).re_node)); }
#line 1047 ""hex_grammar.c"" /* yacc.c:1257  */
         break;
 
     case 22: /* alternatives  */
#line 99 ""hex_grammar.y"" /* yacc.c:1257  */
       { yr_re_node_destroy(((*yyvaluep).re_node)); }
#line 1053 ""hex_grammar.c"" /* yacc.c:1257  */
         break;
 
     case 23: /* byte  */
#line 98 ""hex_grammar.y"" /* yacc.c:1257  */
       { yr_re_node_destroy(((*yyvaluep).re_node)); }
#line 1059 ""hex_grammar.c"" /* yacc.c:1257  */
         break;
 
 
      default:
        break;
    }
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}
",C,"#line 101 ""hex_grammar.y"" /* yacc.c:1257  */
#line 1030 ""hex_grammar.c"" /* yacc.c:1257  */
#line 102 ""hex_grammar.y"" /* yacc.c:1257  */
#line 1036 ""hex_grammar.c"" /* yacc.c:1257  */
#line 103 ""hex_grammar.y"" /* yacc.c:1257  */
#line 1042 ""hex_grammar.c"" /* yacc.c:1257  */
#line 104 ""hex_grammar.y"" /* yacc.c:1257  */
#line 1048 ""hex_grammar.c"" /* yacc.c:1257  */
#line 107 ""hex_grammar.y"" /* yacc.c:1257  */
#line 1054 ""hex_grammar.c"" /* yacc.c:1257  */
#line 106 ""hex_grammar.y"" /* yacc.c:1257  */
#line 1060 ""hex_grammar.c"" /* yacc.c:1257  */
#line 105 ""hex_grammar.y"" /* yacc.c:1257  */
#line 1066 ""hex_grammar.c"" /* yacc.c:1257  */
","#line 94 ""hex_grammar.y"" /* yacc.c:1257  */
#line 1023 ""hex_grammar.c"" /* yacc.c:1257  */
#line 95 ""hex_grammar.y"" /* yacc.c:1257  */
#line 1029 ""hex_grammar.c"" /* yacc.c:1257  */
#line 96 ""hex_grammar.y"" /* yacc.c:1257  */
#line 1035 ""hex_grammar.c"" /* yacc.c:1257  */
#line 97 ""hex_grammar.y"" /* yacc.c:1257  */
#line 1041 ""hex_grammar.c"" /* yacc.c:1257  */
#line 100 ""hex_grammar.y"" /* yacc.c:1257  */
#line 1047 ""hex_grammar.c"" /* yacc.c:1257  */
#line 99 ""hex_grammar.y"" /* yacc.c:1257  */
#line 1053 ""hex_grammar.c"" /* yacc.c:1257  */
#line 98 ""hex_grammar.y"" /* yacc.c:1257  */
#line 1059 ""hex_grammar.c"" /* yacc.c:1257  */
",,"@@ -93,6 +93,13 @@
 #define mark_as_not_fast_regexp() \
     ((RE_AST*) yyget_extra(yyscanner))->flags &= ~RE_FLAGS_FAST_REGEXP
 
+#define incr_ast_levels() \
+    if (((RE_AST*) yyget_extra(yyscanner))->levels++ > RE_MAX_AST_LEVELS) \
+    { \
+      lex_env->last_error_code = ERROR_INVALID_HEX_STRING; \
+      YYABORT; \
+    }
+
 #define ERROR_IF(x, error) \
     if (x) \
     { \
@@ -107,7 +114,7 @@
     } \
 
 
-#line 111 ""hex_grammar.c"" /* yacc.c:339  */
+#line 118 ""hex_grammar.c"" /* yacc.c:339  */
 
 # ifndef YY_NULLPTR
 #  if defined __cplusplus && 201103L <= __cplusplus
@@ -157,12 +164,12 @@ extern int hex_yydebug;
 
 union YYSTYPE
 {
-#line 78 ""hex_grammar.y"" /* yacc.c:355  */
+#line 85 ""hex_grammar.y"" /* yacc.c:355  */
 
   int64_t integer;
   RE_NODE *re_node;
 
-#line 166 ""hex_grammar.c"" /* yacc.c:355  */
+#line 173 ""hex_grammar.c"" /* yacc.c:355  */
 };
 
 typedef union YYSTYPE YYSTYPE;
@@ -178,7 +185,7 @@ int hex_yyparse (void *yyscanner, HEX_LEX_ENVIRONMENT *lex_env);
 
 /* Copy the second part of user declarations.  */
 
-#line 182 ""hex_grammar.c"" /* yacc.c:358  */
+#line 189 ""hex_grammar.c"" /* yacc.c:358  */
 
 #ifdef short
 # undef short
@@ -476,9 +483,9 @@ static const yytype_uint8 yytranslate[] =
   /* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
 static const yytype_uint16 yyrline[] =
 {
-       0,   105,   105,   114,   118,   127,   189,   193,   206,   210,
-     219,   233,   232,   245,   268,   300,   322,   342,   346,   360,
-     368
+       0,   112,   112,   121,   125,   136,   200,   204,   219,   223,
+     232,   246,   245,   258,   281,   313,   335,   355,   359,   374,
+     382
 };
 #endif
 
@@ -1017,45 +1024,45 @@ yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, void *yyscanner, H
   switch (yytype)
     {
           case 16: /* tokens  */
-#line 94 ""hex_grammar.y"" /* yacc.c:1257  */
+#line 101 ""hex_grammar.y"" /* yacc.c:1257  */
       { yr_re_node_destroy(((*yyvaluep).re_node)); }
-#line 1023 ""hex_grammar.c"" /* yacc.c:1257  */
+#line 1030 ""hex_grammar.c"" /* yacc.c:1257  */
         break;
 
     case 17: /* token_sequence  */
-#line 95 ""hex_grammar.y"" /* yacc.c:1257  */
+#line 102 ""hex_grammar.y"" /* yacc.c:1257  */
       { yr_re_node_destroy(((*yyvaluep).re_node)); }
-#line 1029 ""hex_grammar.c"" /* yacc.c:1257  */
+#line 1036 ""hex_grammar.c"" /* yacc.c:1257  */
         break;
 
     case 18: /* token_or_range  */
-#line 96 ""hex_grammar.y"" /* yacc.c:1257  */
+#line 103 ""hex_grammar.y"" /* yacc.c:1257  */
       { yr_re_node_destroy(((*yyvaluep).re_node)); }
-#line 1035 ""hex_grammar.c"" /* yacc.c:1257  */
+#line 1042 ""hex_grammar.c"" /* yacc.c:1257  */
         break;
 
     case 19: /* token  */
-#line 97 ""hex_grammar.y"" /* yacc.c:1257  */
+#line 104 ""hex_grammar.y"" /* yacc.c:1257  */
       { yr_re_node_destroy(((*yyvaluep).re_node)); }
-#line 1041 ""hex_grammar.c"" /* yacc.c:1257  */
+#line 1048 ""hex_grammar.c"" /* yacc.c:1257  */
         break;
 
     case 21: /* range  */
-#line 100 ""hex_grammar.y"" /* yacc.c:1257  */
+#line 107 ""hex_grammar.y"" /* yacc.c:1257  */
       { yr_re_node_destroy(((*yyvaluep).re_node)); }
-#line 1047 ""hex_grammar.c"" /* yacc.c:1257  */
+#line 1054 ""hex_grammar.c"" /* yacc.c:1257  */
         break;
 
     case 22: /* alternatives  */
-#line 99 ""hex_grammar.y"" /* yacc.c:1257  */
+#line 106 ""hex_grammar.y"" /* yacc.c:1257  */
       { yr_re_node_destroy(((*yyvaluep).re_node)); }
-#line 1053 ""hex_grammar.c"" /* yacc.c:1257  */
+#line 1060 ""hex_grammar.c"" /* yacc.c:1257  */
         break;
 
     case 23: /* byte  */
-#line 98 ""hex_grammar.y"" /* yacc.c:1257  */
+#line 105 ""hex_grammar.y"" /* yacc.c:1257  */
       { yr_re_node_destroy(((*yyvaluep).re_node)); }
-#line 1059 ""hex_grammar.c"" /* yacc.c:1257  */
+#line 1066 ""hex_grammar.c"" /* yacc.c:1257  */
         break;
 
 
@@ -1321,42 +1328,46 @@ YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);
   switch (yyn)
     {
         case 2:
-#line 106 ""hex_grammar.y"" /* yacc.c:1646  */
+#line 113 ""hex_grammar.y"" /* yacc.c:1661  */
     {
         RE_AST* re_ast = yyget_extra(yyscanner);
         re_ast->root_node = (yyvsp[-1].re_node);
       }
-#line 1330 ""hex_grammar.c"" /* yacc.c:1646  */
+#line 1337 ""hex_grammar.c"" /* yacc.c:1661  */
     break;
 
   case 3:
-#line 115 ""hex_grammar.y"" /* yacc.c:1646  */
+#line 122 ""hex_grammar.y"" /* yacc.c:1661  */
     {
         (yyval.re_node) = (yyvsp[0].re_node);
       }
-#line 1338 ""hex_grammar.c"" /* yacc.c:1646  */
+#line 1345 ""hex_grammar.c"" /* yacc.c:1661  */
     break;
 
   case 4:
-#line 119 ""hex_grammar.y"" /* yacc.c:1646  */
+#line 126 ""hex_grammar.y"" /* yacc.c:1661  */
     {
+        incr_ast_levels();
+
         (yyval.re_node) = yr_re_node_create(RE_NODE_CONCAT, (yyvsp[-1].re_node), (yyvsp[0].re_node));
 
         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-1].re_node));
         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[0].re_node));
 
         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
       }
-#line 1351 ""hex_grammar.c"" /* yacc.c:1646  */
+#line 1360 ""hex_grammar.c"" /* yacc.c:1661  */
     break;
 
   case 5:
-#line 128 ""hex_grammar.y"" /* yacc.c:1646  */
+#line 137 ""hex_grammar.y"" /* yacc.c:1661  */
     {
         RE_NODE* new_concat;
         RE_NODE* leftmost_concat = NULL;
         RE_NODE* leftmost_node = (yyvsp[-1].re_node);
 
+        incr_ast_levels();
+
         (yyval.re_node) = NULL;
 
         /*
@@ -1409,49 +1420,51 @@ YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);
 
         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
       }
-#line 1413 ""hex_grammar.c"" /* yacc.c:1646  */
+#line 1424 ""hex_grammar.c"" /* yacc.c:1661  */
     break;
 
   case 6:
-#line 190 ""hex_grammar.y"" /* yacc.c:1646  */
+#line 201 ""hex_grammar.y"" /* yacc.c:1661  */
     {
         (yyval.re_node) = (yyvsp[0].re_node);
       }
-#line 1421 ""hex_grammar.c"" /* yacc.c:1646  */
+#line 1432 ""hex_grammar.c"" /* yacc.c:1661  */
     break;
 
   case 7:
-#line 194 ""hex_grammar.y"" /* yacc.c:1646  */
+#line 205 ""hex_grammar.y"" /* yacc.c:1661  */
     {
+        incr_ast_levels();
+
         (yyval.re_node) = yr_re_node_create(RE_NODE_CONCAT, (yyvsp[-1].re_node), (yyvsp[0].re_node));
 
         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-1].re_node));
         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[0].re_node));
 
         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
       }
-#line 1434 ""hex_grammar.c"" /* yacc.c:1646  */
+#line 1447 ""hex_grammar.c"" /* yacc.c:1661  */
     break;
 
   case 8:
-#line 207 ""hex_grammar.y"" /* yacc.c:1646  */
+#line 220 ""hex_grammar.y"" /* yacc.c:1661  */
     {
         (yyval.re_node) = (yyvsp[0].re_node);
       }
-#line 1442 ""hex_grammar.c"" /* yacc.c:1646  */
+#line 1455 ""hex_grammar.c"" /* yacc.c:1661  */
     break;
 
   case 9:
-#line 211 ""hex_grammar.y"" /* yacc.c:1646  */
+#line 224 ""hex_grammar.y"" /* yacc.c:1661  */
     {
         (yyval.re_node) = (yyvsp[0].re_node);
         (yyval.re_node)->greedy = FALSE;
       }
-#line 1451 ""hex_grammar.c"" /* yacc.c:1646  */
+#line 1464 ""hex_grammar.c"" /* yacc.c:1661  */
     break;
 
   case 10:
-#line 220 ""hex_grammar.y"" /* yacc.c:1646  */
+#line 233 ""hex_grammar.y"" /* yacc.c:1661  */
     {
         lex_env->token_count++;
 
@@ -1464,28 +1477,28 @@ YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);
 
         (yyval.re_node) = (yyvsp[0].re_node);
       }
-#line 1468 ""hex_grammar.c"" /* yacc.c:1646  */
+#line 1481 ""hex_grammar.c"" /* yacc.c:1661  */
     break;
 
   case 11:
-#line 233 ""hex_grammar.y"" /* yacc.c:1646  */
+#line 246 ""hex_grammar.y"" /* yacc.c:1661  */
     {
         lex_env->inside_or++;
       }
-#line 1476 ""hex_grammar.c"" /* yacc.c:1646  */
+#line 1489 ""hex_grammar.c"" /* yacc.c:1661  */
     break;
 
   case 12:
-#line 237 ""hex_grammar.y"" /* yacc.c:1646  */
+#line 250 ""hex_grammar.y"" /* yacc.c:1661  */
     {
         (yyval.re_node) = (yyvsp[-1].re_node);
         lex_env->inside_or--;
       }
-#line 1485 ""hex_grammar.c"" /* yacc.c:1646  */
+#line 1498 ""hex_grammar.c"" /* yacc.c:1661  */
     break;
 
   case 13:
-#line 246 ""hex_grammar.y"" /* yacc.c:1646  */
+#line 259 ""hex_grammar.y"" /* yacc.c:1661  */
     {
         if ((yyvsp[-1].integer) <= 0)
         {
@@ -1508,11 +1521,11 @@ YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);
         (yyval.re_node)->start = (int) (yyvsp[-1].integer);
         (yyval.re_node)->end = (int) (yyvsp[-1].integer);
       }
-#line 1512 ""hex_grammar.c"" /* yacc.c:1646  */
+#line 1525 ""hex_grammar.c"" /* yacc.c:1661  */
     break;
 
   case 14:
-#line 269 ""hex_grammar.y"" /* yacc.c:1646  */
+#line 282 ""hex_grammar.y"" /* yacc.c:1661  */
     {
         if (lex_env->inside_or &&
             ((yyvsp[-3].integer) > STRING_CHAINING_THRESHOLD ||
@@ -1544,11 +1557,11 @@ YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);
         (yyval.re_node)->start = (int) (yyvsp[-3].integer);
         (yyval.re_node)->end = (int) (yyvsp[-1].integer);
       }
-#line 1548 ""hex_grammar.c"" /* yacc.c:1646  */
+#line 1561 ""hex_grammar.c"" /* yacc.c:1661  */
     break;
 
   case 15:
-#line 301 ""hex_grammar.y"" /* yacc.c:1646  */
+#line 314 ""hex_grammar.y"" /* yacc.c:1661  */
     {
         if (lex_env->inside_or)
         {
@@ -1570,11 +1583,11 @@ YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);
         (yyval.re_node)->start = (int) (yyvsp[-2].integer);
         (yyval.re_node)->end = INT_MAX;
       }
-#line 1574 ""hex_grammar.c"" /* yacc.c:1646  */
+#line 1587 ""hex_grammar.c"" /* yacc.c:1661  */
     break;
 
   case 16:
-#line 323 ""hex_grammar.y"" /* yacc.c:1646  */
+#line 336 ""hex_grammar.y"" /* yacc.c:1661  */
     {
         if (lex_env->inside_or)
         {
@@ -1590,21 +1603,22 @@ YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);
         (yyval.re_node)->start = 0;
         (yyval.re_node)->end = INT_MAX;
       }
-#line 1594 ""hex_grammar.c"" /* yacc.c:1646  */
+#line 1607 ""hex_grammar.c"" /* yacc.c:1661  */
     break;
 
   case 17:
-#line 343 ""hex_grammar.y"" /* yacc.c:1646  */
+#line 356 ""hex_grammar.y"" /* yacc.c:1661  */
     {
           (yyval.re_node) = (yyvsp[0].re_node);
       }
-#line 1602 ""hex_grammar.c"" /* yacc.c:1646  */
+#line 1615 ""hex_grammar.c"" /* yacc.c:1661  */
     break;
 
   case 18:
-#line 347 ""hex_grammar.y"" /* yacc.c:1646  */
+#line 360 ""hex_grammar.y"" /* yacc.c:1661  */
     {
         mark_as_not_fast_regexp();
+        incr_ast_levels();
 
         (yyval.re_node) = yr_re_node_create(RE_NODE_ALT, (yyvsp[-2].re_node), (yyvsp[0].re_node));
 
@@ -1613,23 +1627,23 @@ YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);
 
         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
       }
-#line 1617 ""hex_grammar.c"" /* yacc.c:1646  */
+#line 1631 ""hex_grammar.c"" /* yacc.c:1661  */
     break;
 
   case 19:
-#line 361 ""hex_grammar.y"" /* yacc.c:1646  */
+#line 375 ""hex_grammar.y"" /* yacc.c:1661  */
     {
         (yyval.re_node) = yr_re_node_create(RE_NODE_LITERAL, NULL, NULL);
 
         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
 
         (yyval.re_node)->value = (int) (yyvsp[0].integer);
       }
-#line 1629 ""hex_grammar.c"" /* yacc.c:1646  */
+#line 1643 ""hex_grammar.c"" /* yacc.c:1661  */
     break;
 
   case 20:
-#line 369 ""hex_grammar.y"" /* yacc.c:1646  */
+#line 383 ""hex_grammar.y"" /* yacc.c:1661  */
     {
         uint8_t mask = (uint8_t) ((yyvsp[0].integer) >> 8);
 
@@ -1649,11 +1663,11 @@ YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);
           (yyval.re_node)->mask = mask;
         }
       }
-#line 1653 ""hex_grammar.c"" /* yacc.c:1646  */
+#line 1667 ""hex_grammar.c"" /* yacc.c:1661  */
     break;
 
 
-#line 1657 ""hex_grammar.c"" /* yacc.c:1646  */
+#line 1671 ""hex_grammar.c"" /* yacc.c:1661  */
       default: break;
     }
   /* User semantic actions sometimes alter yychar, and that requires
@@ -1881,5 +1895,5 @@ YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);
 #endif
   return yyresult;
 }
-#line 390 ""hex_grammar.y"" /* yacc.c:1906  */
+#line 404 ""hex_grammar.y"" /* yacc.c:1906  */
 ",yara,10e8bd3071677dd1fa76beeef4bc2fc427cea5e7,5e2d2798048dbba3aa8428aa563c0ebfbae37027,1,"yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, void *yyscanner, HEX_LEX_ENVIRONMENT *lex_env)
{
  YYUSE (yyvaluep);
  YYUSE (yyscanner);
  YYUSE (lex_env);
  if (!yymsg)
    yymsg = ""Deleting"";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
   switch (yytype)
     {
           case 16: /* tokens  */
//flaw_line_below:
#line 94 ""hex_grammar.y"" /* yacc.c:1257  */
//fix_flaw_line_below:
//#line 101 ""hex_grammar.y"" /* yacc.c:1257  */
       { yr_re_node_destroy(((*yyvaluep).re_node)); }
//flaw_line_below:
#line 1023 ""hex_grammar.c"" /* yacc.c:1257  */
//fix_flaw_line_below:
//#line 1030 ""hex_grammar.c"" /* yacc.c:1257  */
         break;
 
     case 17: /* token_sequence  */
//flaw_line_below:
#line 95 ""hex_grammar.y"" /* yacc.c:1257  */
//fix_flaw_line_below:
//#line 102 ""hex_grammar.y"" /* yacc.c:1257  */
       { yr_re_node_destroy(((*yyvaluep).re_node)); }
//flaw_line_below:
#line 1029 ""hex_grammar.c"" /* yacc.c:1257  */
//fix_flaw_line_below:
//#line 1036 ""hex_grammar.c"" /* yacc.c:1257  */
         break;
 
     case 18: /* token_or_range  */
//flaw_line_below:
#line 96 ""hex_grammar.y"" /* yacc.c:1257  */
//fix_flaw_line_below:
//#line 103 ""hex_grammar.y"" /* yacc.c:1257  */
       { yr_re_node_destroy(((*yyvaluep).re_node)); }
//flaw_line_below:
#line 1035 ""hex_grammar.c"" /* yacc.c:1257  */
//fix_flaw_line_below:
//#line 1042 ""hex_grammar.c"" /* yacc.c:1257  */
         break;
 
     case 19: /* token  */
//flaw_line_below:
#line 97 ""hex_grammar.y"" /* yacc.c:1257  */
//fix_flaw_line_below:
//#line 104 ""hex_grammar.y"" /* yacc.c:1257  */
       { yr_re_node_destroy(((*yyvaluep).re_node)); }
//flaw_line_below:
#line 1041 ""hex_grammar.c"" /* yacc.c:1257  */
//fix_flaw_line_below:
//#line 1048 ""hex_grammar.c"" /* yacc.c:1257  */
         break;
 
     case 21: /* range  */
//flaw_line_below:
#line 100 ""hex_grammar.y"" /* yacc.c:1257  */
//fix_flaw_line_below:
//#line 107 ""hex_grammar.y"" /* yacc.c:1257  */
       { yr_re_node_destroy(((*yyvaluep).re_node)); }
//flaw_line_below:
#line 1047 ""hex_grammar.c"" /* yacc.c:1257  */
//fix_flaw_line_below:
//#line 1054 ""hex_grammar.c"" /* yacc.c:1257  */
         break;
 
     case 22: /* alternatives  */
//flaw_line_below:
#line 99 ""hex_grammar.y"" /* yacc.c:1257  */
//fix_flaw_line_below:
//#line 106 ""hex_grammar.y"" /* yacc.c:1257  */
       { yr_re_node_destroy(((*yyvaluep).re_node)); }
//flaw_line_below:
#line 1053 ""hex_grammar.c"" /* yacc.c:1257  */
//fix_flaw_line_below:
//#line 1060 ""hex_grammar.c"" /* yacc.c:1257  */
         break;
 
     case 23: /* byte  */
//flaw_line_below:
#line 98 ""hex_grammar.y"" /* yacc.c:1257  */
//fix_flaw_line_below:
//#line 105 ""hex_grammar.y"" /* yacc.c:1257  */
       { yr_re_node_destroy(((*yyvaluep).re_node)); }
//flaw_line_below:
#line 1059 ""hex_grammar.c"" /* yacc.c:1257  */
//fix_flaw_line_below:
//#line 1066 ""hex_grammar.c"" /* yacc.c:1257  */
         break;
 
 
      default:
        break;
    }
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}
"
3537,181273,,Remote,Not required,Partial,CVE-2017-9438,https://www.cvedetails.com/cve/CVE-2017-9438/,CWE-674,Low,,,,2017-06-05,5.0,"libyara/re.c in the regexp module in YARA 3.5.0 allows remote attackers to cause a denial of service (stack consumption) via a crafted rule (involving hex strings) that is mishandled in the _yr_re_emit function, a different vulnerability than CVE-2017-9304.",2019-10-02,DoS ,46,https://github.com/VirusTotal/yara/commit/10e8bd3071677dd1fa76beeef4bc2fc427cea5e7,10e8bd3071677dd1fa76beeef4bc2fc427cea5e7,Fix issue #674 for hex strings.,39,libyara/hex_grammar.c,"{""sha"": ""48f550a51b88c7458253e70376791b308b5d49a8"", ""filename"": ""libyara/hex_grammar.c"", ""status"": ""modified"", ""additions"": 75, ""deletions"": 61, ""changes"": 136, ""blob_url"": ""https://github.com/VirusTotal/yara/blob/10e8bd3071677dd1fa76beeef4bc2fc427cea5e7/libyara/hex_grammar.c"", ""raw_url"": ""https://github.com/VirusTotal/yara/raw/10e8bd3071677dd1fa76beeef4bc2fc427cea5e7/libyara/hex_grammar.c"", ""contents_url"": ""https://api.github.com/repos/VirusTotal/yara/contents/libyara/hex_grammar.c?ref=10e8bd3071677dd1fa76beeef4bc2fc427cea5e7"", ""patch"": ""@@ -93,6 +93,13 @@\n #define mark_as_not_fast_regexp() \\\n     ((RE_AST*) yyget_extra(yyscanner))->flags &= ~RE_FLAGS_FAST_REGEXP\n \n+#define incr_ast_levels() \\\n+    if (((RE_AST*) yyget_extra(yyscanner))->levels++ > RE_MAX_AST_LEVELS) \\\n+    { \\\n+      lex_env->last_error_code = ERROR_INVALID_HEX_STRING; \\\n+      YYABORT; \\\n+    }\n+\n #define ERROR_IF(x, error) \\\n     if (x) \\\n     { \\\n@@ -107,7 +114,7 @@\n     } \\\n \n \n-#line 111 \""hex_grammar.c\"" /* yacc.c:339  */\n+#line 118 \""hex_grammar.c\"" /* yacc.c:339  */\n \n # ifndef YY_NULLPTR\n #  if defined __cplusplus && 201103L <= __cplusplus\n@@ -157,12 +164,12 @@ extern int hex_yydebug;\n \n union YYSTYPE\n {\n-#line 78 \""hex_grammar.y\"" /* yacc.c:355  */\n+#line 85 \""hex_grammar.y\"" /* yacc.c:355  */\n \n   int64_t integer;\n   RE_NODE *re_node;\n \n-#line 166 \""hex_grammar.c\"" /* yacc.c:355  */\n+#line 173 \""hex_grammar.c\"" /* yacc.c:355  */\n };\n \n typedef union YYSTYPE YYSTYPE;\n@@ -178,7 +185,7 @@ int hex_yyparse (void *yyscanner, HEX_LEX_ENVIRONMENT *lex_env);\n \n /* Copy the second part of user declarations.  */\n \n-#line 182 \""hex_grammar.c\"" /* yacc.c:358  */\n+#line 189 \""hex_grammar.c\"" /* yacc.c:358  */\n \n #ifdef short\n # undef short\n@@ -476,9 +483,9 @@ static const yytype_uint8 yytranslate[] =\n   /* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */\n static const yytype_uint16 yyrline[] =\n {\n-       0,   105,   105,   114,   118,   127,   189,   193,   206,   210,\n-     219,   233,   232,   245,   268,   300,   322,   342,   346,   360,\n-     368\n+       0,   112,   112,   121,   125,   136,   200,   204,   219,   223,\n+     232,   246,   245,   258,   281,   313,   335,   355,   359,   374,\n+     382\n };\n #endif\n \n@@ -1017,45 +1024,45 @@ yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, void *yyscanner, H\n   switch (yytype)\n     {\n           case 16: /* tokens  */\n-#line 94 \""hex_grammar.y\"" /* yacc.c:1257  */\n+#line 101 \""hex_grammar.y\"" /* yacc.c:1257  */\n       { yr_re_node_destroy(((*yyvaluep).re_node)); }\n-#line 1023 \""hex_grammar.c\"" /* yacc.c:1257  */\n+#line 1030 \""hex_grammar.c\"" /* yacc.c:1257  */\n         break;\n \n     case 17: /* token_sequence  */\n-#line 95 \""hex_grammar.y\"" /* yacc.c:1257  */\n+#line 102 \""hex_grammar.y\"" /* yacc.c:1257  */\n       { yr_re_node_destroy(((*yyvaluep).re_node)); }\n-#line 1029 \""hex_grammar.c\"" /* yacc.c:1257  */\n+#line 1036 \""hex_grammar.c\"" /* yacc.c:1257  */\n         break;\n \n     case 18: /* token_or_range  */\n-#line 96 \""hex_grammar.y\"" /* yacc.c:1257  */\n+#line 103 \""hex_grammar.y\"" /* yacc.c:1257  */\n       { yr_re_node_destroy(((*yyvaluep).re_node)); }\n-#line 1035 \""hex_grammar.c\"" /* yacc.c:1257  */\n+#line 1042 \""hex_grammar.c\"" /* yacc.c:1257  */\n         break;\n \n     case 19: /* token  */\n-#line 97 \""hex_grammar.y\"" /* yacc.c:1257  */\n+#line 104 \""hex_grammar.y\"" /* yacc.c:1257  */\n       { yr_re_node_destroy(((*yyvaluep).re_node)); }\n-#line 1041 \""hex_grammar.c\"" /* yacc.c:1257  */\n+#line 1048 \""hex_grammar.c\"" /* yacc.c:1257  */\n         break;\n \n     case 21: /* range  */\n-#line 100 \""hex_grammar.y\"" /* yacc.c:1257  */\n+#line 107 \""hex_grammar.y\"" /* yacc.c:1257  */\n       { yr_re_node_destroy(((*yyvaluep).re_node)); }\n-#line 1047 \""hex_grammar.c\"" /* yacc.c:1257  */\n+#line 1054 \""hex_grammar.c\"" /* yacc.c:1257  */\n         break;\n \n     case 22: /* alternatives  */\n-#line 99 \""hex_grammar.y\"" /* yacc.c:1257  */\n+#line 106 \""hex_grammar.y\"" /* yacc.c:1257  */\n       { yr_re_node_destroy(((*yyvaluep).re_node)); }\n-#line 1053 \""hex_grammar.c\"" /* yacc.c:1257  */\n+#line 1060 \""hex_grammar.c\"" /* yacc.c:1257  */\n         break;\n \n     case 23: /* byte  */\n-#line 98 \""hex_grammar.y\"" /* yacc.c:1257  */\n+#line 105 \""hex_grammar.y\"" /* yacc.c:1257  */\n       { yr_re_node_destroy(((*yyvaluep).re_node)); }\n-#line 1059 \""hex_grammar.c\"" /* yacc.c:1257  */\n+#line 1066 \""hex_grammar.c\"" /* yacc.c:1257  */\n         break;\n \n \n@@ -1321,42 +1328,46 @@ YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);\n   switch (yyn)\n     {\n         case 2:\n-#line 106 \""hex_grammar.y\"" /* yacc.c:1646  */\n+#line 113 \""hex_grammar.y\"" /* yacc.c:1661  */\n     {\n         RE_AST* re_ast = yyget_extra(yyscanner);\n         re_ast->root_node = (yyvsp[-1].re_node);\n       }\n-#line 1330 \""hex_grammar.c\"" /* yacc.c:1646  */\n+#line 1337 \""hex_grammar.c\"" /* yacc.c:1661  */\n     break;\n \n   case 3:\n-#line 115 \""hex_grammar.y\"" /* yacc.c:1646  */\n+#line 122 \""hex_grammar.y\"" /* yacc.c:1661  */\n     {\n         (yyval.re_node) = (yyvsp[0].re_node);\n       }\n-#line 1338 \""hex_grammar.c\"" /* yacc.c:1646  */\n+#line 1345 \""hex_grammar.c\"" /* yacc.c:1661  */\n     break;\n \n   case 4:\n-#line 119 \""hex_grammar.y\"" /* yacc.c:1646  */\n+#line 126 \""hex_grammar.y\"" /* yacc.c:1661  */\n     {\n+        incr_ast_levels();\n+\n         (yyval.re_node) = yr_re_node_create(RE_NODE_CONCAT, (yyvsp[-1].re_node), (yyvsp[0].re_node));\n \n         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-1].re_node));\n         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[0].re_node));\n \n         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n       }\n-#line 1351 \""hex_grammar.c\"" /* yacc.c:1646  */\n+#line 1360 \""hex_grammar.c\"" /* yacc.c:1661  */\n     break;\n \n   case 5:\n-#line 128 \""hex_grammar.y\"" /* yacc.c:1646  */\n+#line 137 \""hex_grammar.y\"" /* yacc.c:1661  */\n     {\n         RE_NODE* new_concat;\n         RE_NODE* leftmost_concat = NULL;\n         RE_NODE* leftmost_node = (yyvsp[-1].re_node);\n \n+        incr_ast_levels();\n+\n         (yyval.re_node) = NULL;\n \n         /*\n@@ -1409,49 +1420,51 @@ YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);\n \n         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n       }\n-#line 1413 \""hex_grammar.c\"" /* yacc.c:1646  */\n+#line 1424 \""hex_grammar.c\"" /* yacc.c:1661  */\n     break;\n \n   case 6:\n-#line 190 \""hex_grammar.y\"" /* yacc.c:1646  */\n+#line 201 \""hex_grammar.y\"" /* yacc.c:1661  */\n     {\n         (yyval.re_node) = (yyvsp[0].re_node);\n       }\n-#line 1421 \""hex_grammar.c\"" /* yacc.c:1646  */\n+#line 1432 \""hex_grammar.c\"" /* yacc.c:1661  */\n     break;\n \n   case 7:\n-#line 194 \""hex_grammar.y\"" /* yacc.c:1646  */\n+#line 205 \""hex_grammar.y\"" /* yacc.c:1661  */\n     {\n+        incr_ast_levels();\n+\n         (yyval.re_node) = yr_re_node_create(RE_NODE_CONCAT, (yyvsp[-1].re_node), (yyvsp[0].re_node));\n \n         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-1].re_node));\n         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[0].re_node));\n \n         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n       }\n-#line 1434 \""hex_grammar.c\"" /* yacc.c:1646  */\n+#line 1447 \""hex_grammar.c\"" /* yacc.c:1661  */\n     break;\n \n   case 8:\n-#line 207 \""hex_grammar.y\"" /* yacc.c:1646  */\n+#line 220 \""hex_grammar.y\"" /* yacc.c:1661  */\n     {\n         (yyval.re_node) = (yyvsp[0].re_node);\n       }\n-#line 1442 \""hex_grammar.c\"" /* yacc.c:1646  */\n+#line 1455 \""hex_grammar.c\"" /* yacc.c:1661  */\n     break;\n \n   case 9:\n-#line 211 \""hex_grammar.y\"" /* yacc.c:1646  */\n+#line 224 \""hex_grammar.y\"" /* yacc.c:1661  */\n     {\n         (yyval.re_node) = (yyvsp[0].re_node);\n         (yyval.re_node)->greedy = FALSE;\n       }\n-#line 1451 \""hex_grammar.c\"" /* yacc.c:1646  */\n+#line 1464 \""hex_grammar.c\"" /* yacc.c:1661  */\n     break;\n \n   case 10:\n-#line 220 \""hex_grammar.y\"" /* yacc.c:1646  */\n+#line 233 \""hex_grammar.y\"" /* yacc.c:1661  */\n     {\n         lex_env->token_count++;\n \n@@ -1464,28 +1477,28 @@ YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);\n \n         (yyval.re_node) = (yyvsp[0].re_node);\n       }\n-#line 1468 \""hex_grammar.c\"" /* yacc.c:1646  */\n+#line 1481 \""hex_grammar.c\"" /* yacc.c:1661  */\n     break;\n \n   case 11:\n-#line 233 \""hex_grammar.y\"" /* yacc.c:1646  */\n+#line 246 \""hex_grammar.y\"" /* yacc.c:1661  */\n     {\n         lex_env->inside_or++;\n       }\n-#line 1476 \""hex_grammar.c\"" /* yacc.c:1646  */\n+#line 1489 \""hex_grammar.c\"" /* yacc.c:1661  */\n     break;\n \n   case 12:\n-#line 237 \""hex_grammar.y\"" /* yacc.c:1646  */\n+#line 250 \""hex_grammar.y\"" /* yacc.c:1661  */\n     {\n         (yyval.re_node) = (yyvsp[-1].re_node);\n         lex_env->inside_or--;\n       }\n-#line 1485 \""hex_grammar.c\"" /* yacc.c:1646  */\n+#line 1498 \""hex_grammar.c\"" /* yacc.c:1661  */\n     break;\n \n   case 13:\n-#line 246 \""hex_grammar.y\"" /* yacc.c:1646  */\n+#line 259 \""hex_grammar.y\"" /* yacc.c:1661  */\n     {\n         if ((yyvsp[-1].integer) <= 0)\n         {\n@@ -1508,11 +1521,11 @@ YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);\n         (yyval.re_node)->start = (int) (yyvsp[-1].integer);\n         (yyval.re_node)->end = (int) (yyvsp[-1].integer);\n       }\n-#line 1512 \""hex_grammar.c\"" /* yacc.c:1646  */\n+#line 1525 \""hex_grammar.c\"" /* yacc.c:1661  */\n     break;\n \n   case 14:\n-#line 269 \""hex_grammar.y\"" /* yacc.c:1646  */\n+#line 282 \""hex_grammar.y\"" /* yacc.c:1661  */\n     {\n         if (lex_env->inside_or &&\n             ((yyvsp[-3].integer) > STRING_CHAINING_THRESHOLD ||\n@@ -1544,11 +1557,11 @@ YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);\n         (yyval.re_node)->start = (int) (yyvsp[-3].integer);\n         (yyval.re_node)->end = (int) (yyvsp[-1].integer);\n       }\n-#line 1548 \""hex_grammar.c\"" /* yacc.c:1646  */\n+#line 1561 \""hex_grammar.c\"" /* yacc.c:1661  */\n     break;\n \n   case 15:\n-#line 301 \""hex_grammar.y\"" /* yacc.c:1646  */\n+#line 314 \""hex_grammar.y\"" /* yacc.c:1661  */\n     {\n         if (lex_env->inside_or)\n         {\n@@ -1570,11 +1583,11 @@ YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);\n         (yyval.re_node)->start = (int) (yyvsp[-2].integer);\n         (yyval.re_node)->end = INT_MAX;\n       }\n-#line 1574 \""hex_grammar.c\"" /* yacc.c:1646  */\n+#line 1587 \""hex_grammar.c\"" /* yacc.c:1661  */\n     break;\n \n   case 16:\n-#line 323 \""hex_grammar.y\"" /* yacc.c:1646  */\n+#line 336 \""hex_grammar.y\"" /* yacc.c:1661  */\n     {\n         if (lex_env->inside_or)\n         {\n@@ -1590,21 +1603,22 @@ YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);\n         (yyval.re_node)->start = 0;\n         (yyval.re_node)->end = INT_MAX;\n       }\n-#line 1594 \""hex_grammar.c\"" /* yacc.c:1646  */\n+#line 1607 \""hex_grammar.c\"" /* yacc.c:1661  */\n     break;\n \n   case 17:\n-#line 343 \""hex_grammar.y\"" /* yacc.c:1646  */\n+#line 356 \""hex_grammar.y\"" /* yacc.c:1661  */\n     {\n           (yyval.re_node) = (yyvsp[0].re_node);\n       }\n-#line 1602 \""hex_grammar.c\"" /* yacc.c:1646  */\n+#line 1615 \""hex_grammar.c\"" /* yacc.c:1661  */\n     break;\n \n   case 18:\n-#line 347 \""hex_grammar.y\"" /* yacc.c:1646  */\n+#line 360 \""hex_grammar.y\"" /* yacc.c:1661  */\n     {\n         mark_as_not_fast_regexp();\n+        incr_ast_levels();\n \n         (yyval.re_node) = yr_re_node_create(RE_NODE_ALT, (yyvsp[-2].re_node), (yyvsp[0].re_node));\n \n@@ -1613,23 +1627,23 @@ YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);\n \n         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n       }\n-#line 1617 \""hex_grammar.c\"" /* yacc.c:1646  */\n+#line 1631 \""hex_grammar.c\"" /* yacc.c:1661  */\n     break;\n \n   case 19:\n-#line 361 \""hex_grammar.y\"" /* yacc.c:1646  */\n+#line 375 \""hex_grammar.y\"" /* yacc.c:1661  */\n     {\n         (yyval.re_node) = yr_re_node_create(RE_NODE_LITERAL, NULL, NULL);\n \n         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n \n         (yyval.re_node)->value = (int) (yyvsp[0].integer);\n       }\n-#line 1629 \""hex_grammar.c\"" /* yacc.c:1646  */\n+#line 1643 \""hex_grammar.c\"" /* yacc.c:1661  */\n     break;\n \n   case 20:\n-#line 369 \""hex_grammar.y\"" /* yacc.c:1646  */\n+#line 383 \""hex_grammar.y\"" /* yacc.c:1661  */\n     {\n         uint8_t mask = (uint8_t) ((yyvsp[0].integer) >> 8);\n \n@@ -1649,11 +1663,11 @@ YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);\n           (yyval.re_node)->mask = mask;\n         }\n       }\n-#line 1653 \""hex_grammar.c\"" /* yacc.c:1646  */\n+#line 1667 \""hex_grammar.c\"" /* yacc.c:1661  */\n     break;\n \n \n-#line 1657 \""hex_grammar.c\"" /* yacc.c:1646  */\n+#line 1671 \""hex_grammar.c\"" /* yacc.c:1661  */\n       default: break;\n     }\n   /* User semantic actions sometimes alter yychar, and that requires\n@@ -1881,5 +1895,5 @@ YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);\n #endif\n   return yyresult;\n }\n-#line 390 \""hex_grammar.y\"" /* yacc.c:1906  */\n+#line 404 \""hex_grammar.y\"" /* yacc.c:1906  */\n ""}<_**next**_>{""sha"": ""d37c1640c35d73ddcb4bdf0653938b6663b92294"", ""filename"": ""libyara/hex_grammar.h"", ""status"": ""modified"", ""additions"": 2, ""deletions"": 2, ""changes"": 4, ""blob_url"": ""https://github.com/VirusTotal/yara/blob/10e8bd3071677dd1fa76beeef4bc2fc427cea5e7/libyara/hex_grammar.h"", ""raw_url"": ""https://github.com/VirusTotal/yara/raw/10e8bd3071677dd1fa76beeef4bc2fc427cea5e7/libyara/hex_grammar.h"", ""contents_url"": ""https://api.github.com/repos/VirusTotal/yara/contents/libyara/hex_grammar.h?ref=10e8bd3071677dd1fa76beeef4bc2fc427cea5e7"", ""patch"": ""@@ -60,12 +60,12 @@ extern int hex_yydebug;\n \n union YYSTYPE\n {\n-#line 78 \""hex_grammar.y\"" /* yacc.c:1909  */\n+#line 85 \""hex_grammar.y\"" /* yacc.c:1915  */\n \n   int64_t integer;\n   RE_NODE *re_node;\n \n-#line 69 \""hex_grammar.h\"" /* yacc.c:1909  */\n+#line 69 \""hex_grammar.h\"" /* yacc.c:1915  */\n };\n \n typedef union YYSTYPE YYSTYPE;""}<_**next**_>{""sha"": ""bf907e934111891d9a6730bf85a465ab6e894e24"", ""filename"": ""libyara/hex_grammar.y"", ""status"": ""modified"", ""additions"": 14, ""deletions"": 0, ""changes"": 14, ""blob_url"": ""https://github.com/VirusTotal/yara/blob/10e8bd3071677dd1fa76beeef4bc2fc427cea5e7/libyara/hex_grammar.y"", ""raw_url"": ""https://github.com/VirusTotal/yara/raw/10e8bd3071677dd1fa76beeef4bc2fc427cea5e7/libyara/hex_grammar.y"", ""contents_url"": ""https://api.github.com/repos/VirusTotal/yara/contents/libyara/hex_grammar.y?ref=10e8bd3071677dd1fa76beeef4bc2fc427cea5e7"", ""patch"": ""@@ -51,6 +51,13 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n #define mark_as_not_fast_regexp() \\\n     ((RE_AST*) yyget_extra(yyscanner))->flags &= ~RE_FLAGS_FAST_REGEXP\n \n+#define incr_ast_levels() \\\n+    if (((RE_AST*) yyget_extra(yyscanner))->levels++ > RE_MAX_AST_LEVELS) \\\n+    { \\\n+      lex_env->last_error_code = ERROR_INVALID_HEX_STRING; \\\n+      YYABORT; \\\n+    }\n+\n #define ERROR_IF(x, error) \\\n     if (x) \\\n     { \\\n@@ -117,6 +124,8 @@ tokens\n       }\n     | token token\n       {\n+        incr_ast_levels();\n+\n         $$ = yr_re_node_create(RE_NODE_CONCAT, $1, $2);\n \n         DESTROY_NODE_IF($$ == NULL, $1);\n@@ -130,6 +139,8 @@ tokens\n         RE_NODE* leftmost_concat = NULL;\n         RE_NODE* leftmost_node = $2;\n \n+        incr_ast_levels();\n+\n         $$ = NULL;\n \n         /*\n@@ -192,6 +203,8 @@ token_sequence\n       }\n     | token_sequence token_or_range\n       {\n+        incr_ast_levels();\n+\n         $$ = yr_re_node_create(RE_NODE_CONCAT, $1, $2);\n \n         DESTROY_NODE_IF($$ == NULL, $1);\n@@ -346,6 +359,7 @@ alternatives\n     | alternatives '|' tokens\n       {\n         mark_as_not_fast_regexp();\n+        incr_ast_levels();\n \n         $$ = yr_re_node_create(RE_NODE_ALT, $1, $3);\n ""}","yyparse (void *yyscanner, HEX_LEX_ENVIRONMENT *lex_env)
{
/* The lookahead symbol.  */
int yychar;


/* The semantic value of the lookahead symbol.  */
/* Default value used for initialization, for pacifying older GCCs
   or non-GCC compilers.  */
YY_INITIAL_VALUE (static YYSTYPE yyval_default;)
YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);

    /* Number of syntax errors so far.  */
    int yynerrs;

    int yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       'yyss': related to states.
       'yyvs': related to semantic values.

       Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yytype_int16 yyssa[YYINITDEPTH];
    yytype_int16 *yyss;
    yytype_int16 *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    YYSIZE_T yystacksize;

  int yyn;
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken = 0;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;

#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yyssp = yyss = yyssa;
  yyvsp = yyvs = yyvsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF ((stderr, ""Starting parse\n""));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY; /* Cause a token to be read.  */
  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
        /* Give user a chance to reallocate the stack.  Use copies of
           these so that the &'s don't force the real ones into
           memory.  */
        YYSTYPE *yyvs1 = yyvs;
        yytype_int16 *yyss1 = yyss;

        /* Each stack pointer address is followed by the size of the
           data in use in that stack, in bytes.  This used to be a
           conditional around just the two extra args, but that might
           be undefined if yyoverflow is a macro.  */
        yyoverflow (YY_(""memory exhausted""),
                    &yyss1, yysize * sizeof (*yyssp),
                    &yyvs1, yysize * sizeof (*yyvsp),
                    &yystacksize);

        yyss = yyss1;
        yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
        goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
        yystacksize = YYMAXDEPTH;

      {
        yytype_int16 *yyss1 = yyss;
        union yyalloc *yyptr =
          (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
        if (! yyptr)
          goto yyexhaustedlab;
        YYSTACK_RELOCATE (yyss_alloc, yyss);
        YYSTACK_RELOCATE (yyvs_alloc, yyvs);
#  undef YYSTACK_RELOCATE
        if (yyss1 != yyssa)
          YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;

      YYDPRINTF ((stderr, ""Stack size increased to %lu\n"",
                  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
        YYABORT;
    }

  YYDPRINTF ((stderr, ""Entering state %d\n"", yystate));

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, ""Reading a token: ""));
      yychar = yylex (&yylval, yyscanner, lex_env);
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, ""Now at end of input.\n""));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT (""Next token is"", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT (""Shifting"", yytoken, &yylval, &yylloc);

  /* Discard the shifted token.  */
  yychar = YYEMPTY;

  yystate = yyn;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END

  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     '$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];


  YY_REDUCE_PRINT (yyn);
   switch (yyn)
     {
         case 2:
#line 113 ""hex_grammar.y"" /* yacc.c:1661  */
     {
         RE_AST* re_ast = yyget_extra(yyscanner);
         re_ast->root_node = (yyvsp[-1].re_node);
       }
#line 1337 ""hex_grammar.c"" /* yacc.c:1661  */
     break;
 
   case 3:
#line 122 ""hex_grammar.y"" /* yacc.c:1661  */
     {
         (yyval.re_node) = (yyvsp[0].re_node);
       }
#line 1345 ""hex_grammar.c"" /* yacc.c:1661  */
     break;
 
   case 4:
#line 126 ""hex_grammar.y"" /* yacc.c:1661  */
     {
        incr_ast_levels();

         (yyval.re_node) = yr_re_node_create(RE_NODE_CONCAT, (yyvsp[-1].re_node), (yyvsp[0].re_node));
 
         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-1].re_node));
         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[0].re_node));
 
         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
       }
#line 1360 ""hex_grammar.c"" /* yacc.c:1661  */
     break;
 
   case 5:
#line 137 ""hex_grammar.y"" /* yacc.c:1661  */
     {
         RE_NODE* new_concat;
         RE_NODE* leftmost_concat = NULL;
         RE_NODE* leftmost_node = (yyvsp[-1].re_node);
 
        incr_ast_levels();

         (yyval.re_node) = NULL;
 
         /*
        Some portions of the code (i.e: yr_re_split_at_chaining_point)
        expect a left-unbalanced tree where the right child of a concat node
        can't be another concat node. A concat node must be always the left
        child of its parent if the parent is also a concat. For this reason
        the can't simply create two new concat nodes arranged like this:

                concat
                 /   \
                /     \
            token's    \
            subtree  concat
                     /    \
                    /      \
                   /        \
           token_sequence's  token's
               subtree       subtree

        Instead we must insert the subtree for the first token as the
        leftmost node of the token_sequence subtree.
        */

        while (leftmost_node->type == RE_NODE_CONCAT)
        {
          leftmost_concat = leftmost_node;
          leftmost_node = leftmost_node->left;
        }

        new_concat = yr_re_node_create(
            RE_NODE_CONCAT, (yyvsp[-2].re_node), leftmost_node);

        if (new_concat != NULL)
        {
          if (leftmost_concat != NULL)
          {
            leftmost_concat->left = new_concat;
            (yyval.re_node) = yr_re_node_create(RE_NODE_CONCAT, (yyvsp[-1].re_node), (yyvsp[0].re_node));
          }
          else
          {
            (yyval.re_node) = yr_re_node_create(RE_NODE_CONCAT, new_concat, (yyvsp[0].re_node));
          }
        }

        DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-2].re_node));
        DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-1].re_node));
        DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[0].re_node));
 
         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
       }
#line 1424 ""hex_grammar.c"" /* yacc.c:1661  */
     break;
 
   case 6:
#line 201 ""hex_grammar.y"" /* yacc.c:1661  */
     {
         (yyval.re_node) = (yyvsp[0].re_node);
       }
#line 1432 ""hex_grammar.c"" /* yacc.c:1661  */
     break;
 
   case 7:
#line 205 ""hex_grammar.y"" /* yacc.c:1661  */
     {
        incr_ast_levels();

         (yyval.re_node) = yr_re_node_create(RE_NODE_CONCAT, (yyvsp[-1].re_node), (yyvsp[0].re_node));
 
         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-1].re_node));
         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[0].re_node));
 
         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
       }
#line 1447 ""hex_grammar.c"" /* yacc.c:1661  */
     break;
 
   case 8:
#line 220 ""hex_grammar.y"" /* yacc.c:1661  */
     {
         (yyval.re_node) = (yyvsp[0].re_node);
       }
#line 1455 ""hex_grammar.c"" /* yacc.c:1661  */
     break;
 
   case 9:
#line 224 ""hex_grammar.y"" /* yacc.c:1661  */
     {
         (yyval.re_node) = (yyvsp[0].re_node);
         (yyval.re_node)->greedy = FALSE;
       }
#line 1464 ""hex_grammar.c"" /* yacc.c:1661  */
     break;
 
   case 10:
#line 233 ""hex_grammar.y"" /* yacc.c:1661  */
     {
         lex_env->token_count++;
 
        if (lex_env->token_count > MAX_HEX_STRING_TOKENS)
        {
          yr_re_node_destroy((yyvsp[0].re_node));
          yyerror(yyscanner, lex_env, ""string too long"");
          YYABORT;
        }
 
         (yyval.re_node) = (yyvsp[0].re_node);
       }
#line 1481 ""hex_grammar.c"" /* yacc.c:1661  */
     break;
 
   case 11:
#line 246 ""hex_grammar.y"" /* yacc.c:1661  */
     {
         lex_env->inside_or++;
       }
#line 1489 ""hex_grammar.c"" /* yacc.c:1661  */
     break;
 
   case 12:
#line 250 ""hex_grammar.y"" /* yacc.c:1661  */
     {
         (yyval.re_node) = (yyvsp[-1].re_node);
         lex_env->inside_or--;
       }
#line 1498 ""hex_grammar.c"" /* yacc.c:1661  */
     break;
 
   case 13:
#line 259 ""hex_grammar.y"" /* yacc.c:1661  */
     {
         if ((yyvsp[-1].integer) <= 0)
         {
          yyerror(yyscanner, lex_env, ""invalid jump length"");
          YYABORT;
        }

        if (lex_env->inside_or && (yyvsp[-1].integer) > STRING_CHAINING_THRESHOLD)
        {
          yyerror(yyscanner, lex_env, ""jumps over ""
              STR(STRING_CHAINING_THRESHOLD)
              "" now allowed inside alternation (|)"");
          YYABORT;
        }

        (yyval.re_node) = yr_re_node_create(RE_NODE_RANGE_ANY, NULL, NULL);

        ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);

         (yyval.re_node)->start = (int) (yyvsp[-1].integer);
         (yyval.re_node)->end = (int) (yyvsp[-1].integer);
       }
#line 1525 ""hex_grammar.c"" /* yacc.c:1661  */
     break;
 
   case 14:
#line 282 ""hex_grammar.y"" /* yacc.c:1661  */
     {
         if (lex_env->inside_or &&
             ((yyvsp[-3].integer) > STRING_CHAINING_THRESHOLD ||
             (yyvsp[-1].integer) > STRING_CHAINING_THRESHOLD) )
        {
          yyerror(yyscanner, lex_env, ""jumps over ""
              STR(STRING_CHAINING_THRESHOLD)
              "" now allowed inside alternation (|)"");

          YYABORT;
        }

        if ((yyvsp[-3].integer) < 0 || (yyvsp[-1].integer) < 0)
        {
          yyerror(yyscanner, lex_env, ""invalid negative jump length"");
          YYABORT;
        }

        if ((yyvsp[-3].integer) > (yyvsp[-1].integer))
        {
          yyerror(yyscanner, lex_env, ""invalid jump range"");
          YYABORT;
        }

        (yyval.re_node) = yr_re_node_create(RE_NODE_RANGE_ANY, NULL, NULL);

        ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);

         (yyval.re_node)->start = (int) (yyvsp[-3].integer);
         (yyval.re_node)->end = (int) (yyvsp[-1].integer);
       }
#line 1561 ""hex_grammar.c"" /* yacc.c:1661  */
     break;
 
   case 15:
#line 314 ""hex_grammar.y"" /* yacc.c:1661  */
     {
         if (lex_env->inside_or)
         {
          yyerror(yyscanner, lex_env,
              ""unbounded jumps not allowed inside alternation (|)"");
          YYABORT;
        }

        if ((yyvsp[-2].integer) < 0)
        {
          yyerror(yyscanner, lex_env, ""invalid negative jump length"");
          YYABORT;
        }

        (yyval.re_node) = yr_re_node_create(RE_NODE_RANGE_ANY, NULL, NULL);

        ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);

         (yyval.re_node)->start = (int) (yyvsp[-2].integer);
         (yyval.re_node)->end = INT_MAX;
       }
#line 1587 ""hex_grammar.c"" /* yacc.c:1661  */
     break;
 
   case 16:
#line 336 ""hex_grammar.y"" /* yacc.c:1661  */
     {
         if (lex_env->inside_or)
         {
          yyerror(yyscanner, lex_env,
              ""unbounded jumps not allowed inside alternation (|)"");
          YYABORT;
        }

        (yyval.re_node) = yr_re_node_create(RE_NODE_RANGE_ANY, NULL, NULL);

        ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);

         (yyval.re_node)->start = 0;
         (yyval.re_node)->end = INT_MAX;
       }
#line 1607 ""hex_grammar.c"" /* yacc.c:1661  */
     break;
 
   case 17:
#line 356 ""hex_grammar.y"" /* yacc.c:1661  */
     {
           (yyval.re_node) = (yyvsp[0].re_node);
       }
#line 1615 ""hex_grammar.c"" /* yacc.c:1661  */
     break;
 
   case 18:
#line 360 ""hex_grammar.y"" /* yacc.c:1661  */
     {
         mark_as_not_fast_regexp();
        incr_ast_levels();
 
         (yyval.re_node) = yr_re_node_create(RE_NODE_ALT, (yyvsp[-2].re_node), (yyvsp[0].re_node));
 
        DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-2].re_node));
        DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[0].re_node));
 
         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
       }
#line 1631 ""hex_grammar.c"" /* yacc.c:1661  */
     break;
 
   case 19:
#line 375 ""hex_grammar.y"" /* yacc.c:1661  */
     {
         (yyval.re_node) = yr_re_node_create(RE_NODE_LITERAL, NULL, NULL);
 
         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
 
         (yyval.re_node)->value = (int) (yyvsp[0].integer);
       }
#line 1643 ""hex_grammar.c"" /* yacc.c:1661  */
     break;
 
   case 20:
#line 383 ""hex_grammar.y"" /* yacc.c:1661  */
     {
         uint8_t mask = (uint8_t) ((yyvsp[0].integer) >> 8);
 
        if (mask == 0x00)
        {
          (yyval.re_node) = yr_re_node_create(RE_NODE_ANY, NULL, NULL);

          ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
        }
        else
        {
          (yyval.re_node) = yr_re_node_create(RE_NODE_MASKED_LITERAL, NULL, NULL);

          ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);

          (yyval.re_node)->value = (yyvsp[0].integer) & 0xFF;
           (yyval.re_node)->mask = mask;
         }
       }
#line 1667 ""hex_grammar.c"" /* yacc.c:1661  */
     break;
 
 
#line 1671 ""hex_grammar.c"" /* yacc.c:1661  */
       default: break;
     }
   /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT (""-> $$ ="", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;

  /* Now 'shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*--------------------------------------.
| yyerrlab -- here on detecting error.  |
`--------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYEMPTY : YYTRANSLATE (yychar);

  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (yyscanner, lex_env, YY_(""syntax error""));
#else
# define YYSYNTAX_ERROR yysyntax_error (&yymsg_alloc, &yymsg, \
                                        yyssp, yytoken)
      {
        char const *yymsgp = YY_(""syntax error"");
        int yysyntax_error_status;
        yysyntax_error_status = YYSYNTAX_ERROR;
        if (yysyntax_error_status == 0)
          yymsgp = yymsg;
        else if (yysyntax_error_status == 1)
          {
            if (yymsg != yymsgbuf)
              YYSTACK_FREE (yymsg);
            yymsg = (char *) YYSTACK_ALLOC (yymsg_alloc);
            if (!yymsg)
              {
                yymsg = yymsgbuf;
                yymsg_alloc = sizeof yymsgbuf;
                yysyntax_error_status = 2;
              }
            else
              {
                yysyntax_error_status = YYSYNTAX_ERROR;
                yymsgp = yymsg;
              }
          }
        yyerror (yyscanner, lex_env, yymsgp);
        if (yysyntax_error_status == 2)
          goto yyexhaustedlab;
      }
# undef YYSYNTAX_ERROR
#endif
    }



  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
         error, discard it.  */

      if (yychar <= YYEOF)
        {
          /* Return failure if at end of input.  */
          if (yychar == YYEOF)
            YYABORT;
        }
      else
        {
          yydestruct (""Error: discarding"",
                      yytoken, &yylval, yyscanner, lex_env);
          yychar = YYEMPTY;
        }
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  /* Do not reclaim the symbols of the rule whose action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;      /* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
        {
          yyn += YYTERROR;
          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
            {
              yyn = yytable[yyn];
              if (0 < yyn)
                break;
            }
        }

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
        YYABORT;


      yydestruct (""Error: popping"",
                  yystos[yystate], yyvsp, yyscanner, lex_env);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END


  /* Shift the error token.  */
  YY_SYMBOL_PRINT (""Shifting"", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#if !defined yyoverflow || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (yyscanner, lex_env, YY_(""memory exhausted""));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct (""Cleanup: discarding lookahead"",
                  yytoken, &yylval, yyscanner, lex_env);
    }
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct (""Cleanup: popping"",
                  yystos[*yyssp], yyvsp, yyscanner, lex_env);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
 #endif
   return yyresult;
 }
","yyparse (void *yyscanner, HEX_LEX_ENVIRONMENT *lex_env)
{
/* The lookahead symbol.  */
int yychar;


/* The semantic value of the lookahead symbol.  */
/* Default value used for initialization, for pacifying older GCCs
   or non-GCC compilers.  */
YY_INITIAL_VALUE (static YYSTYPE yyval_default;)
YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);

    /* Number of syntax errors so far.  */
    int yynerrs;

    int yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       'yyss': related to states.
       'yyvs': related to semantic values.

       Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yytype_int16 yyssa[YYINITDEPTH];
    yytype_int16 *yyss;
    yytype_int16 *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    YYSIZE_T yystacksize;

  int yyn;
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken = 0;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;

#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yyssp = yyss = yyssa;
  yyvsp = yyvs = yyvsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF ((stderr, ""Starting parse\n""));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY; /* Cause a token to be read.  */
  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
        /* Give user a chance to reallocate the stack.  Use copies of
           these so that the &'s don't force the real ones into
           memory.  */
        YYSTYPE *yyvs1 = yyvs;
        yytype_int16 *yyss1 = yyss;

        /* Each stack pointer address is followed by the size of the
           data in use in that stack, in bytes.  This used to be a
           conditional around just the two extra args, but that might
           be undefined if yyoverflow is a macro.  */
        yyoverflow (YY_(""memory exhausted""),
                    &yyss1, yysize * sizeof (*yyssp),
                    &yyvs1, yysize * sizeof (*yyvsp),
                    &yystacksize);

        yyss = yyss1;
        yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
        goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
        yystacksize = YYMAXDEPTH;

      {
        yytype_int16 *yyss1 = yyss;
        union yyalloc *yyptr =
          (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
        if (! yyptr)
          goto yyexhaustedlab;
        YYSTACK_RELOCATE (yyss_alloc, yyss);
        YYSTACK_RELOCATE (yyvs_alloc, yyvs);
#  undef YYSTACK_RELOCATE
        if (yyss1 != yyssa)
          YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;

      YYDPRINTF ((stderr, ""Stack size increased to %lu\n"",
                  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
        YYABORT;
    }

  YYDPRINTF ((stderr, ""Entering state %d\n"", yystate));

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, ""Reading a token: ""));
      yychar = yylex (&yylval, yyscanner, lex_env);
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, ""Now at end of input.\n""));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT (""Next token is"", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT (""Shifting"", yytoken, &yylval, &yylloc);

  /* Discard the shifted token.  */
  yychar = YYEMPTY;

  yystate = yyn;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END

  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     '$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];


  YY_REDUCE_PRINT (yyn);
   switch (yyn)
     {
         case 2:
#line 106 ""hex_grammar.y"" /* yacc.c:1646  */
     {
         RE_AST* re_ast = yyget_extra(yyscanner);
         re_ast->root_node = (yyvsp[-1].re_node);
       }
#line 1330 ""hex_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 3:
#line 115 ""hex_grammar.y"" /* yacc.c:1646  */
     {
         (yyval.re_node) = (yyvsp[0].re_node);
       }
#line 1338 ""hex_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 4:
#line 119 ""hex_grammar.y"" /* yacc.c:1646  */
     {
         (yyval.re_node) = yr_re_node_create(RE_NODE_CONCAT, (yyvsp[-1].re_node), (yyvsp[0].re_node));
 
         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-1].re_node));
         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[0].re_node));
 
         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
       }
#line 1351 ""hex_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 5:
#line 128 ""hex_grammar.y"" /* yacc.c:1646  */
     {
         RE_NODE* new_concat;
         RE_NODE* leftmost_concat = NULL;
         RE_NODE* leftmost_node = (yyvsp[-1].re_node);
 
         (yyval.re_node) = NULL;
 
         /*
        Some portions of the code (i.e: yr_re_split_at_chaining_point)
        expect a left-unbalanced tree where the right child of a concat node
        can't be another concat node. A concat node must be always the left
        child of its parent if the parent is also a concat. For this reason
        the can't simply create two new concat nodes arranged like this:

                concat
                 /   \
                /     \
            token's    \
            subtree  concat
                     /    \
                    /      \
                   /        \
           token_sequence's  token's
               subtree       subtree

        Instead we must insert the subtree for the first token as the
        leftmost node of the token_sequence subtree.
        */

        while (leftmost_node->type == RE_NODE_CONCAT)
        {
          leftmost_concat = leftmost_node;
          leftmost_node = leftmost_node->left;
        }

        new_concat = yr_re_node_create(
            RE_NODE_CONCAT, (yyvsp[-2].re_node), leftmost_node);

        if (new_concat != NULL)
        {
          if (leftmost_concat != NULL)
          {
            leftmost_concat->left = new_concat;
            (yyval.re_node) = yr_re_node_create(RE_NODE_CONCAT, (yyvsp[-1].re_node), (yyvsp[0].re_node));
          }
          else
          {
            (yyval.re_node) = yr_re_node_create(RE_NODE_CONCAT, new_concat, (yyvsp[0].re_node));
          }
        }

        DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-2].re_node));
        DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-1].re_node));
        DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[0].re_node));
 
         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
       }
#line 1413 ""hex_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 6:
#line 190 ""hex_grammar.y"" /* yacc.c:1646  */
     {
         (yyval.re_node) = (yyvsp[0].re_node);
       }
#line 1421 ""hex_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 7:
#line 194 ""hex_grammar.y"" /* yacc.c:1646  */
     {
         (yyval.re_node) = yr_re_node_create(RE_NODE_CONCAT, (yyvsp[-1].re_node), (yyvsp[0].re_node));
 
         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-1].re_node));
         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[0].re_node));
 
         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
       }
#line 1434 ""hex_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 8:
#line 207 ""hex_grammar.y"" /* yacc.c:1646  */
     {
         (yyval.re_node) = (yyvsp[0].re_node);
       }
#line 1442 ""hex_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 9:
#line 211 ""hex_grammar.y"" /* yacc.c:1646  */
     {
         (yyval.re_node) = (yyvsp[0].re_node);
         (yyval.re_node)->greedy = FALSE;
       }
#line 1451 ""hex_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 10:
#line 220 ""hex_grammar.y"" /* yacc.c:1646  */
     {
         lex_env->token_count++;
 
        if (lex_env->token_count > MAX_HEX_STRING_TOKENS)
        {
          yr_re_node_destroy((yyvsp[0].re_node));
          yyerror(yyscanner, lex_env, ""string too long"");
          YYABORT;
        }
 
         (yyval.re_node) = (yyvsp[0].re_node);
       }
#line 1468 ""hex_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 11:
#line 233 ""hex_grammar.y"" /* yacc.c:1646  */
     {
         lex_env->inside_or++;
       }
#line 1476 ""hex_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 12:
#line 237 ""hex_grammar.y"" /* yacc.c:1646  */
     {
         (yyval.re_node) = (yyvsp[-1].re_node);
         lex_env->inside_or--;
       }
#line 1485 ""hex_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 13:
#line 246 ""hex_grammar.y"" /* yacc.c:1646  */
     {
         if ((yyvsp[-1].integer) <= 0)
         {
          yyerror(yyscanner, lex_env, ""invalid jump length"");
          YYABORT;
        }

        if (lex_env->inside_or && (yyvsp[-1].integer) > STRING_CHAINING_THRESHOLD)
        {
          yyerror(yyscanner, lex_env, ""jumps over ""
              STR(STRING_CHAINING_THRESHOLD)
              "" now allowed inside alternation (|)"");
          YYABORT;
        }

        (yyval.re_node) = yr_re_node_create(RE_NODE_RANGE_ANY, NULL, NULL);

        ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);

         (yyval.re_node)->start = (int) (yyvsp[-1].integer);
         (yyval.re_node)->end = (int) (yyvsp[-1].integer);
       }
#line 1512 ""hex_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 14:
#line 269 ""hex_grammar.y"" /* yacc.c:1646  */
     {
         if (lex_env->inside_or &&
             ((yyvsp[-3].integer) > STRING_CHAINING_THRESHOLD ||
             (yyvsp[-1].integer) > STRING_CHAINING_THRESHOLD) )
        {
          yyerror(yyscanner, lex_env, ""jumps over ""
              STR(STRING_CHAINING_THRESHOLD)
              "" now allowed inside alternation (|)"");

          YYABORT;
        }

        if ((yyvsp[-3].integer) < 0 || (yyvsp[-1].integer) < 0)
        {
          yyerror(yyscanner, lex_env, ""invalid negative jump length"");
          YYABORT;
        }

        if ((yyvsp[-3].integer) > (yyvsp[-1].integer))
        {
          yyerror(yyscanner, lex_env, ""invalid jump range"");
          YYABORT;
        }

        (yyval.re_node) = yr_re_node_create(RE_NODE_RANGE_ANY, NULL, NULL);

        ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);

         (yyval.re_node)->start = (int) (yyvsp[-3].integer);
         (yyval.re_node)->end = (int) (yyvsp[-1].integer);
       }
#line 1548 ""hex_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 15:
#line 301 ""hex_grammar.y"" /* yacc.c:1646  */
     {
         if (lex_env->inside_or)
         {
          yyerror(yyscanner, lex_env,
              ""unbounded jumps not allowed inside alternation (|)"");
          YYABORT;
        }

        if ((yyvsp[-2].integer) < 0)
        {
          yyerror(yyscanner, lex_env, ""invalid negative jump length"");
          YYABORT;
        }

        (yyval.re_node) = yr_re_node_create(RE_NODE_RANGE_ANY, NULL, NULL);

        ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);

         (yyval.re_node)->start = (int) (yyvsp[-2].integer);
         (yyval.re_node)->end = INT_MAX;
       }
#line 1574 ""hex_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 16:
#line 323 ""hex_grammar.y"" /* yacc.c:1646  */
     {
         if (lex_env->inside_or)
         {
          yyerror(yyscanner, lex_env,
              ""unbounded jumps not allowed inside alternation (|)"");
          YYABORT;
        }

        (yyval.re_node) = yr_re_node_create(RE_NODE_RANGE_ANY, NULL, NULL);

        ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);

         (yyval.re_node)->start = 0;
         (yyval.re_node)->end = INT_MAX;
       }
#line 1594 ""hex_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 17:
#line 343 ""hex_grammar.y"" /* yacc.c:1646  */
     {
           (yyval.re_node) = (yyvsp[0].re_node);
       }
#line 1602 ""hex_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 18:
#line 347 ""hex_grammar.y"" /* yacc.c:1646  */
     {
         mark_as_not_fast_regexp();
 
         (yyval.re_node) = yr_re_node_create(RE_NODE_ALT, (yyvsp[-2].re_node), (yyvsp[0].re_node));
 
        DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-2].re_node));
        DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[0].re_node));
 
         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
       }
#line 1617 ""hex_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 19:
#line 361 ""hex_grammar.y"" /* yacc.c:1646  */
     {
         (yyval.re_node) = yr_re_node_create(RE_NODE_LITERAL, NULL, NULL);
 
         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
 
         (yyval.re_node)->value = (int) (yyvsp[0].integer);
       }
#line 1629 ""hex_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 20:
#line 369 ""hex_grammar.y"" /* yacc.c:1646  */
     {
         uint8_t mask = (uint8_t) ((yyvsp[0].integer) >> 8);
 
        if (mask == 0x00)
        {
          (yyval.re_node) = yr_re_node_create(RE_NODE_ANY, NULL, NULL);

          ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
        }
        else
        {
          (yyval.re_node) = yr_re_node_create(RE_NODE_MASKED_LITERAL, NULL, NULL);

          ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);

          (yyval.re_node)->value = (yyvsp[0].integer) & 0xFF;
           (yyval.re_node)->mask = mask;
         }
       }
#line 1653 ""hex_grammar.c"" /* yacc.c:1646  */
     break;
 
 
#line 1657 ""hex_grammar.c"" /* yacc.c:1646  */
       default: break;
     }
   /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT (""-> $$ ="", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;

  /* Now 'shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*--------------------------------------.
| yyerrlab -- here on detecting error.  |
`--------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYEMPTY : YYTRANSLATE (yychar);

  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (yyscanner, lex_env, YY_(""syntax error""));
#else
# define YYSYNTAX_ERROR yysyntax_error (&yymsg_alloc, &yymsg, \
                                        yyssp, yytoken)
      {
        char const *yymsgp = YY_(""syntax error"");
        int yysyntax_error_status;
        yysyntax_error_status = YYSYNTAX_ERROR;
        if (yysyntax_error_status == 0)
          yymsgp = yymsg;
        else if (yysyntax_error_status == 1)
          {
            if (yymsg != yymsgbuf)
              YYSTACK_FREE (yymsg);
            yymsg = (char *) YYSTACK_ALLOC (yymsg_alloc);
            if (!yymsg)
              {
                yymsg = yymsgbuf;
                yymsg_alloc = sizeof yymsgbuf;
                yysyntax_error_status = 2;
              }
            else
              {
                yysyntax_error_status = YYSYNTAX_ERROR;
                yymsgp = yymsg;
              }
          }
        yyerror (yyscanner, lex_env, yymsgp);
        if (yysyntax_error_status == 2)
          goto yyexhaustedlab;
      }
# undef YYSYNTAX_ERROR
#endif
    }



  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
         error, discard it.  */

      if (yychar <= YYEOF)
        {
          /* Return failure if at end of input.  */
          if (yychar == YYEOF)
            YYABORT;
        }
      else
        {
          yydestruct (""Error: discarding"",
                      yytoken, &yylval, yyscanner, lex_env);
          yychar = YYEMPTY;
        }
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  /* Do not reclaim the symbols of the rule whose action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;      /* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
        {
          yyn += YYTERROR;
          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
            {
              yyn = yytable[yyn];
              if (0 < yyn)
                break;
            }
        }

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
        YYABORT;


      yydestruct (""Error: popping"",
                  yystos[yystate], yyvsp, yyscanner, lex_env);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END


  /* Shift the error token.  */
  YY_SYMBOL_PRINT (""Shifting"", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#if !defined yyoverflow || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (yyscanner, lex_env, YY_(""memory exhausted""));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct (""Cleanup: discarding lookahead"",
                  yytoken, &yylval, yyscanner, lex_env);
    }
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct (""Cleanup: popping"",
                  yystos[*yyssp], yyvsp, yyscanner, lex_env);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
 #endif
   return yyresult;
 }
",C,"#line 113 ""hex_grammar.y"" /* yacc.c:1661  */
#line 1337 ""hex_grammar.c"" /* yacc.c:1661  */
#line 122 ""hex_grammar.y"" /* yacc.c:1661  */
#line 1345 ""hex_grammar.c"" /* yacc.c:1661  */
#line 126 ""hex_grammar.y"" /* yacc.c:1661  */
        incr_ast_levels();

#line 1360 ""hex_grammar.c"" /* yacc.c:1661  */
#line 137 ""hex_grammar.y"" /* yacc.c:1661  */
        incr_ast_levels();

#line 1424 ""hex_grammar.c"" /* yacc.c:1661  */
#line 201 ""hex_grammar.y"" /* yacc.c:1661  */
#line 1432 ""hex_grammar.c"" /* yacc.c:1661  */
#line 205 ""hex_grammar.y"" /* yacc.c:1661  */
        incr_ast_levels();

#line 1447 ""hex_grammar.c"" /* yacc.c:1661  */
#line 220 ""hex_grammar.y"" /* yacc.c:1661  */
#line 1455 ""hex_grammar.c"" /* yacc.c:1661  */
#line 224 ""hex_grammar.y"" /* yacc.c:1661  */
#line 1464 ""hex_grammar.c"" /* yacc.c:1661  */
#line 233 ""hex_grammar.y"" /* yacc.c:1661  */
#line 1481 ""hex_grammar.c"" /* yacc.c:1661  */
#line 246 ""hex_grammar.y"" /* yacc.c:1661  */
#line 1489 ""hex_grammar.c"" /* yacc.c:1661  */
#line 250 ""hex_grammar.y"" /* yacc.c:1661  */
#line 1498 ""hex_grammar.c"" /* yacc.c:1661  */
#line 259 ""hex_grammar.y"" /* yacc.c:1661  */
#line 1525 ""hex_grammar.c"" /* yacc.c:1661  */
#line 282 ""hex_grammar.y"" /* yacc.c:1661  */
#line 1561 ""hex_grammar.c"" /* yacc.c:1661  */
#line 314 ""hex_grammar.y"" /* yacc.c:1661  */
#line 1587 ""hex_grammar.c"" /* yacc.c:1661  */
#line 336 ""hex_grammar.y"" /* yacc.c:1661  */
#line 1607 ""hex_grammar.c"" /* yacc.c:1661  */
#line 356 ""hex_grammar.y"" /* yacc.c:1661  */
#line 1615 ""hex_grammar.c"" /* yacc.c:1661  */
#line 360 ""hex_grammar.y"" /* yacc.c:1661  */
        incr_ast_levels();
#line 1631 ""hex_grammar.c"" /* yacc.c:1661  */
#line 375 ""hex_grammar.y"" /* yacc.c:1661  */
#line 1643 ""hex_grammar.c"" /* yacc.c:1661  */
#line 383 ""hex_grammar.y"" /* yacc.c:1661  */
#line 1667 ""hex_grammar.c"" /* yacc.c:1661  */
#line 1671 ""hex_grammar.c"" /* yacc.c:1661  */
","#line 106 ""hex_grammar.y"" /* yacc.c:1646  */
#line 1330 ""hex_grammar.c"" /* yacc.c:1646  */
#line 115 ""hex_grammar.y"" /* yacc.c:1646  */
#line 1338 ""hex_grammar.c"" /* yacc.c:1646  */
#line 119 ""hex_grammar.y"" /* yacc.c:1646  */
#line 1351 ""hex_grammar.c"" /* yacc.c:1646  */
#line 128 ""hex_grammar.y"" /* yacc.c:1646  */
#line 1413 ""hex_grammar.c"" /* yacc.c:1646  */
#line 190 ""hex_grammar.y"" /* yacc.c:1646  */
#line 1421 ""hex_grammar.c"" /* yacc.c:1646  */
#line 194 ""hex_grammar.y"" /* yacc.c:1646  */
#line 1434 ""hex_grammar.c"" /* yacc.c:1646  */
#line 207 ""hex_grammar.y"" /* yacc.c:1646  */
#line 1442 ""hex_grammar.c"" /* yacc.c:1646  */
#line 211 ""hex_grammar.y"" /* yacc.c:1646  */
#line 1451 ""hex_grammar.c"" /* yacc.c:1646  */
#line 220 ""hex_grammar.y"" /* yacc.c:1646  */
#line 1468 ""hex_grammar.c"" /* yacc.c:1646  */
#line 233 ""hex_grammar.y"" /* yacc.c:1646  */
#line 1476 ""hex_grammar.c"" /* yacc.c:1646  */
#line 237 ""hex_grammar.y"" /* yacc.c:1646  */
#line 1485 ""hex_grammar.c"" /* yacc.c:1646  */
#line 246 ""hex_grammar.y"" /* yacc.c:1646  */
#line 1512 ""hex_grammar.c"" /* yacc.c:1646  */
#line 269 ""hex_grammar.y"" /* yacc.c:1646  */
#line 1548 ""hex_grammar.c"" /* yacc.c:1646  */
#line 301 ""hex_grammar.y"" /* yacc.c:1646  */
#line 1574 ""hex_grammar.c"" /* yacc.c:1646  */
#line 323 ""hex_grammar.y"" /* yacc.c:1646  */
#line 1594 ""hex_grammar.c"" /* yacc.c:1646  */
#line 343 ""hex_grammar.y"" /* yacc.c:1646  */
#line 1602 ""hex_grammar.c"" /* yacc.c:1646  */
#line 347 ""hex_grammar.y"" /* yacc.c:1646  */
#line 1617 ""hex_grammar.c"" /* yacc.c:1646  */
#line 361 ""hex_grammar.y"" /* yacc.c:1646  */
#line 1629 ""hex_grammar.c"" /* yacc.c:1646  */
#line 369 ""hex_grammar.y"" /* yacc.c:1646  */
#line 1653 ""hex_grammar.c"" /* yacc.c:1646  */
#line 1657 ""hex_grammar.c"" /* yacc.c:1646  */
",,"@@ -93,6 +93,13 @@
 #define mark_as_not_fast_regexp() \
     ((RE_AST*) yyget_extra(yyscanner))->flags &= ~RE_FLAGS_FAST_REGEXP
 
+#define incr_ast_levels() \
+    if (((RE_AST*) yyget_extra(yyscanner))->levels++ > RE_MAX_AST_LEVELS) \
+    { \
+      lex_env->last_error_code = ERROR_INVALID_HEX_STRING; \
+      YYABORT; \
+    }
+
 #define ERROR_IF(x, error) \
     if (x) \
     { \
@@ -107,7 +114,7 @@
     } \
 
 
-#line 111 ""hex_grammar.c"" /* yacc.c:339  */
+#line 118 ""hex_grammar.c"" /* yacc.c:339  */
 
 # ifndef YY_NULLPTR
 #  if defined __cplusplus && 201103L <= __cplusplus
@@ -157,12 +164,12 @@ extern int hex_yydebug;
 
 union YYSTYPE
 {
-#line 78 ""hex_grammar.y"" /* yacc.c:355  */
+#line 85 ""hex_grammar.y"" /* yacc.c:355  */
 
   int64_t integer;
   RE_NODE *re_node;
 
-#line 166 ""hex_grammar.c"" /* yacc.c:355  */
+#line 173 ""hex_grammar.c"" /* yacc.c:355  */
 };
 
 typedef union YYSTYPE YYSTYPE;
@@ -178,7 +185,7 @@ int hex_yyparse (void *yyscanner, HEX_LEX_ENVIRONMENT *lex_env);
 
 /* Copy the second part of user declarations.  */
 
-#line 182 ""hex_grammar.c"" /* yacc.c:358  */
+#line 189 ""hex_grammar.c"" /* yacc.c:358  */
 
 #ifdef short
 # undef short
@@ -476,9 +483,9 @@ static const yytype_uint8 yytranslate[] =
   /* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
 static const yytype_uint16 yyrline[] =
 {
-       0,   105,   105,   114,   118,   127,   189,   193,   206,   210,
-     219,   233,   232,   245,   268,   300,   322,   342,   346,   360,
-     368
+       0,   112,   112,   121,   125,   136,   200,   204,   219,   223,
+     232,   246,   245,   258,   281,   313,   335,   355,   359,   374,
+     382
 };
 #endif
 
@@ -1017,45 +1024,45 @@ yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, void *yyscanner, H
   switch (yytype)
     {
           case 16: /* tokens  */
-#line 94 ""hex_grammar.y"" /* yacc.c:1257  */
+#line 101 ""hex_grammar.y"" /* yacc.c:1257  */
       { yr_re_node_destroy(((*yyvaluep).re_node)); }
-#line 1023 ""hex_grammar.c"" /* yacc.c:1257  */
+#line 1030 ""hex_grammar.c"" /* yacc.c:1257  */
         break;
 
     case 17: /* token_sequence  */
-#line 95 ""hex_grammar.y"" /* yacc.c:1257  */
+#line 102 ""hex_grammar.y"" /* yacc.c:1257  */
       { yr_re_node_destroy(((*yyvaluep).re_node)); }
-#line 1029 ""hex_grammar.c"" /* yacc.c:1257  */
+#line 1036 ""hex_grammar.c"" /* yacc.c:1257  */
         break;
 
     case 18: /* token_or_range  */
-#line 96 ""hex_grammar.y"" /* yacc.c:1257  */
+#line 103 ""hex_grammar.y"" /* yacc.c:1257  */
       { yr_re_node_destroy(((*yyvaluep).re_node)); }
-#line 1035 ""hex_grammar.c"" /* yacc.c:1257  */
+#line 1042 ""hex_grammar.c"" /* yacc.c:1257  */
         break;
 
     case 19: /* token  */
-#line 97 ""hex_grammar.y"" /* yacc.c:1257  */
+#line 104 ""hex_grammar.y"" /* yacc.c:1257  */
       { yr_re_node_destroy(((*yyvaluep).re_node)); }
-#line 1041 ""hex_grammar.c"" /* yacc.c:1257  */
+#line 1048 ""hex_grammar.c"" /* yacc.c:1257  */
         break;
 
     case 21: /* range  */
-#line 100 ""hex_grammar.y"" /* yacc.c:1257  */
+#line 107 ""hex_grammar.y"" /* yacc.c:1257  */
       { yr_re_node_destroy(((*yyvaluep).re_node)); }
-#line 1047 ""hex_grammar.c"" /* yacc.c:1257  */
+#line 1054 ""hex_grammar.c"" /* yacc.c:1257  */
         break;
 
     case 22: /* alternatives  */
-#line 99 ""hex_grammar.y"" /* yacc.c:1257  */
+#line 106 ""hex_grammar.y"" /* yacc.c:1257  */
       { yr_re_node_destroy(((*yyvaluep).re_node)); }
-#line 1053 ""hex_grammar.c"" /* yacc.c:1257  */
+#line 1060 ""hex_grammar.c"" /* yacc.c:1257  */
         break;
 
     case 23: /* byte  */
-#line 98 ""hex_grammar.y"" /* yacc.c:1257  */
+#line 105 ""hex_grammar.y"" /* yacc.c:1257  */
       { yr_re_node_destroy(((*yyvaluep).re_node)); }
-#line 1059 ""hex_grammar.c"" /* yacc.c:1257  */
+#line 1066 ""hex_grammar.c"" /* yacc.c:1257  */
         break;
 
 
@@ -1321,42 +1328,46 @@ YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);
   switch (yyn)
     {
         case 2:
-#line 106 ""hex_grammar.y"" /* yacc.c:1646  */
+#line 113 ""hex_grammar.y"" /* yacc.c:1661  */
     {
         RE_AST* re_ast = yyget_extra(yyscanner);
         re_ast->root_node = (yyvsp[-1].re_node);
       }
-#line 1330 ""hex_grammar.c"" /* yacc.c:1646  */
+#line 1337 ""hex_grammar.c"" /* yacc.c:1661  */
     break;
 
   case 3:
-#line 115 ""hex_grammar.y"" /* yacc.c:1646  */
+#line 122 ""hex_grammar.y"" /* yacc.c:1661  */
     {
         (yyval.re_node) = (yyvsp[0].re_node);
       }
-#line 1338 ""hex_grammar.c"" /* yacc.c:1646  */
+#line 1345 ""hex_grammar.c"" /* yacc.c:1661  */
     break;
 
   case 4:
-#line 119 ""hex_grammar.y"" /* yacc.c:1646  */
+#line 126 ""hex_grammar.y"" /* yacc.c:1661  */
     {
+        incr_ast_levels();
+
         (yyval.re_node) = yr_re_node_create(RE_NODE_CONCAT, (yyvsp[-1].re_node), (yyvsp[0].re_node));
 
         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-1].re_node));
         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[0].re_node));
 
         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
       }
-#line 1351 ""hex_grammar.c"" /* yacc.c:1646  */
+#line 1360 ""hex_grammar.c"" /* yacc.c:1661  */
     break;
 
   case 5:
-#line 128 ""hex_grammar.y"" /* yacc.c:1646  */
+#line 137 ""hex_grammar.y"" /* yacc.c:1661  */
     {
         RE_NODE* new_concat;
         RE_NODE* leftmost_concat = NULL;
         RE_NODE* leftmost_node = (yyvsp[-1].re_node);
 
+        incr_ast_levels();
+
         (yyval.re_node) = NULL;
 
         /*
@@ -1409,49 +1420,51 @@ YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);
 
         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
       }
-#line 1413 ""hex_grammar.c"" /* yacc.c:1646  */
+#line 1424 ""hex_grammar.c"" /* yacc.c:1661  */
     break;
 
   case 6:
-#line 190 ""hex_grammar.y"" /* yacc.c:1646  */
+#line 201 ""hex_grammar.y"" /* yacc.c:1661  */
     {
         (yyval.re_node) = (yyvsp[0].re_node);
       }
-#line 1421 ""hex_grammar.c"" /* yacc.c:1646  */
+#line 1432 ""hex_grammar.c"" /* yacc.c:1661  */
     break;
 
   case 7:
-#line 194 ""hex_grammar.y"" /* yacc.c:1646  */
+#line 205 ""hex_grammar.y"" /* yacc.c:1661  */
     {
+        incr_ast_levels();
+
         (yyval.re_node) = yr_re_node_create(RE_NODE_CONCAT, (yyvsp[-1].re_node), (yyvsp[0].re_node));
 
         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-1].re_node));
         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[0].re_node));
 
         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
       }
-#line 1434 ""hex_grammar.c"" /* yacc.c:1646  */
+#line 1447 ""hex_grammar.c"" /* yacc.c:1661  */
     break;
 
   case 8:
-#line 207 ""hex_grammar.y"" /* yacc.c:1646  */
+#line 220 ""hex_grammar.y"" /* yacc.c:1661  */
     {
         (yyval.re_node) = (yyvsp[0].re_node);
       }
-#line 1442 ""hex_grammar.c"" /* yacc.c:1646  */
+#line 1455 ""hex_grammar.c"" /* yacc.c:1661  */
     break;
 
   case 9:
-#line 211 ""hex_grammar.y"" /* yacc.c:1646  */
+#line 224 ""hex_grammar.y"" /* yacc.c:1661  */
     {
         (yyval.re_node) = (yyvsp[0].re_node);
         (yyval.re_node)->greedy = FALSE;
       }
-#line 1451 ""hex_grammar.c"" /* yacc.c:1646  */
+#line 1464 ""hex_grammar.c"" /* yacc.c:1661  */
     break;
 
   case 10:
-#line 220 ""hex_grammar.y"" /* yacc.c:1646  */
+#line 233 ""hex_grammar.y"" /* yacc.c:1661  */
     {
         lex_env->token_count++;
 
@@ -1464,28 +1477,28 @@ YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);
 
         (yyval.re_node) = (yyvsp[0].re_node);
       }
-#line 1468 ""hex_grammar.c"" /* yacc.c:1646  */
+#line 1481 ""hex_grammar.c"" /* yacc.c:1661  */
     break;
 
   case 11:
-#line 233 ""hex_grammar.y"" /* yacc.c:1646  */
+#line 246 ""hex_grammar.y"" /* yacc.c:1661  */
     {
         lex_env->inside_or++;
       }
-#line 1476 ""hex_grammar.c"" /* yacc.c:1646  */
+#line 1489 ""hex_grammar.c"" /* yacc.c:1661  */
     break;
 
   case 12:
-#line 237 ""hex_grammar.y"" /* yacc.c:1646  */
+#line 250 ""hex_grammar.y"" /* yacc.c:1661  */
     {
         (yyval.re_node) = (yyvsp[-1].re_node);
         lex_env->inside_or--;
       }
-#line 1485 ""hex_grammar.c"" /* yacc.c:1646  */
+#line 1498 ""hex_grammar.c"" /* yacc.c:1661  */
     break;
 
   case 13:
-#line 246 ""hex_grammar.y"" /* yacc.c:1646  */
+#line 259 ""hex_grammar.y"" /* yacc.c:1661  */
     {
         if ((yyvsp[-1].integer) <= 0)
         {
@@ -1508,11 +1521,11 @@ YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);
         (yyval.re_node)->start = (int) (yyvsp[-1].integer);
         (yyval.re_node)->end = (int) (yyvsp[-1].integer);
       }
-#line 1512 ""hex_grammar.c"" /* yacc.c:1646  */
+#line 1525 ""hex_grammar.c"" /* yacc.c:1661  */
     break;
 
   case 14:
-#line 269 ""hex_grammar.y"" /* yacc.c:1646  */
+#line 282 ""hex_grammar.y"" /* yacc.c:1661  */
     {
         if (lex_env->inside_or &&
             ((yyvsp[-3].integer) > STRING_CHAINING_THRESHOLD ||
@@ -1544,11 +1557,11 @@ YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);
         (yyval.re_node)->start = (int) (yyvsp[-3].integer);
         (yyval.re_node)->end = (int) (yyvsp[-1].integer);
       }
-#line 1548 ""hex_grammar.c"" /* yacc.c:1646  */
+#line 1561 ""hex_grammar.c"" /* yacc.c:1661  */
     break;
 
   case 15:
-#line 301 ""hex_grammar.y"" /* yacc.c:1646  */
+#line 314 ""hex_grammar.y"" /* yacc.c:1661  */
     {
         if (lex_env->inside_or)
         {
@@ -1570,11 +1583,11 @@ YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);
         (yyval.re_node)->start = (int) (yyvsp[-2].integer);
         (yyval.re_node)->end = INT_MAX;
       }
-#line 1574 ""hex_grammar.c"" /* yacc.c:1646  */
+#line 1587 ""hex_grammar.c"" /* yacc.c:1661  */
     break;
 
   case 16:
-#line 323 ""hex_grammar.y"" /* yacc.c:1646  */
+#line 336 ""hex_grammar.y"" /* yacc.c:1661  */
     {
         if (lex_env->inside_or)
         {
@@ -1590,21 +1603,22 @@ YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);
         (yyval.re_node)->start = 0;
         (yyval.re_node)->end = INT_MAX;
       }
-#line 1594 ""hex_grammar.c"" /* yacc.c:1646  */
+#line 1607 ""hex_grammar.c"" /* yacc.c:1661  */
     break;
 
   case 17:
-#line 343 ""hex_grammar.y"" /* yacc.c:1646  */
+#line 356 ""hex_grammar.y"" /* yacc.c:1661  */
     {
           (yyval.re_node) = (yyvsp[0].re_node);
       }
-#line 1602 ""hex_grammar.c"" /* yacc.c:1646  */
+#line 1615 ""hex_grammar.c"" /* yacc.c:1661  */
     break;
 
   case 18:
-#line 347 ""hex_grammar.y"" /* yacc.c:1646  */
+#line 360 ""hex_grammar.y"" /* yacc.c:1661  */
     {
         mark_as_not_fast_regexp();
+        incr_ast_levels();
 
         (yyval.re_node) = yr_re_node_create(RE_NODE_ALT, (yyvsp[-2].re_node), (yyvsp[0].re_node));
 
@@ -1613,23 +1627,23 @@ YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);
 
         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
       }
-#line 1617 ""hex_grammar.c"" /* yacc.c:1646  */
+#line 1631 ""hex_grammar.c"" /* yacc.c:1661  */
     break;
 
   case 19:
-#line 361 ""hex_grammar.y"" /* yacc.c:1646  */
+#line 375 ""hex_grammar.y"" /* yacc.c:1661  */
     {
         (yyval.re_node) = yr_re_node_create(RE_NODE_LITERAL, NULL, NULL);
 
         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
 
         (yyval.re_node)->value = (int) (yyvsp[0].integer);
       }
-#line 1629 ""hex_grammar.c"" /* yacc.c:1646  */
+#line 1643 ""hex_grammar.c"" /* yacc.c:1661  */
     break;
 
   case 20:
-#line 369 ""hex_grammar.y"" /* yacc.c:1646  */
+#line 383 ""hex_grammar.y"" /* yacc.c:1661  */
     {
         uint8_t mask = (uint8_t) ((yyvsp[0].integer) >> 8);
 
@@ -1649,11 +1663,11 @@ YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);
           (yyval.re_node)->mask = mask;
         }
       }
-#line 1653 ""hex_grammar.c"" /* yacc.c:1646  */
+#line 1667 ""hex_grammar.c"" /* yacc.c:1661  */
     break;
 
 
-#line 1657 ""hex_grammar.c"" /* yacc.c:1646  */
+#line 1671 ""hex_grammar.c"" /* yacc.c:1661  */
       default: break;
     }
   /* User semantic actions sometimes alter yychar, and that requires
@@ -1881,5 +1895,5 @@ YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);
 #endif
   return yyresult;
 }
-#line 390 ""hex_grammar.y"" /* yacc.c:1906  */
+#line 404 ""hex_grammar.y"" /* yacc.c:1906  */
 ",yara,10e8bd3071677dd1fa76beeef4bc2fc427cea5e7,5e2d2798048dbba3aa8428aa563c0ebfbae37027,1,"yyparse (void *yyscanner, HEX_LEX_ENVIRONMENT *lex_env)
{
/* The lookahead symbol.  */
int yychar;


/* The semantic value of the lookahead symbol.  */
/* Default value used for initialization, for pacifying older GCCs
   or non-GCC compilers.  */
YY_INITIAL_VALUE (static YYSTYPE yyval_default;)
YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);

    /* Number of syntax errors so far.  */
    int yynerrs;

    int yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       'yyss': related to states.
       'yyvs': related to semantic values.

       Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yytype_int16 yyssa[YYINITDEPTH];
    yytype_int16 *yyss;
    yytype_int16 *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    YYSIZE_T yystacksize;

  int yyn;
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken = 0;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;

#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yyssp = yyss = yyssa;
  yyvsp = yyvs = yyvsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF ((stderr, ""Starting parse\n""));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY; /* Cause a token to be read.  */
  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
        /* Give user a chance to reallocate the stack.  Use copies of
           these so that the &'s don't force the real ones into
           memory.  */
        YYSTYPE *yyvs1 = yyvs;
        yytype_int16 *yyss1 = yyss;

        /* Each stack pointer address is followed by the size of the
           data in use in that stack, in bytes.  This used to be a
           conditional around just the two extra args, but that might
           be undefined if yyoverflow is a macro.  */
        yyoverflow (YY_(""memory exhausted""),
                    &yyss1, yysize * sizeof (*yyssp),
                    &yyvs1, yysize * sizeof (*yyvsp),
                    &yystacksize);

        yyss = yyss1;
        yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
        goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
        yystacksize = YYMAXDEPTH;

      {
        yytype_int16 *yyss1 = yyss;
        union yyalloc *yyptr =
          (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
        if (! yyptr)
          goto yyexhaustedlab;
        YYSTACK_RELOCATE (yyss_alloc, yyss);
        YYSTACK_RELOCATE (yyvs_alloc, yyvs);
#  undef YYSTACK_RELOCATE
        if (yyss1 != yyssa)
          YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;

      YYDPRINTF ((stderr, ""Stack size increased to %lu\n"",
                  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
        YYABORT;
    }

  YYDPRINTF ((stderr, ""Entering state %d\n"", yystate));

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, ""Reading a token: ""));
      yychar = yylex (&yylval, yyscanner, lex_env);
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, ""Now at end of input.\n""));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT (""Next token is"", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT (""Shifting"", yytoken, &yylval, &yylloc);

  /* Discard the shifted token.  */
  yychar = YYEMPTY;

  yystate = yyn;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END

  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     '$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];


  YY_REDUCE_PRINT (yyn);
   switch (yyn)
     {
         case 2:
//flaw_line_below:
#line 106 ""hex_grammar.y"" /* yacc.c:1646  */
//fix_flaw_line_below:
//#line 113 ""hex_grammar.y"" /* yacc.c:1661  */
     {
         RE_AST* re_ast = yyget_extra(yyscanner);
         re_ast->root_node = (yyvsp[-1].re_node);
       }
//flaw_line_below:
#line 1330 ""hex_grammar.c"" /* yacc.c:1646  */
//fix_flaw_line_below:
//#line 1337 ""hex_grammar.c"" /* yacc.c:1661  */
     break;
 
   case 3:
//flaw_line_below:
#line 115 ""hex_grammar.y"" /* yacc.c:1646  */
//fix_flaw_line_below:
//#line 122 ""hex_grammar.y"" /* yacc.c:1661  */
     {
         (yyval.re_node) = (yyvsp[0].re_node);
       }
//flaw_line_below:
#line 1338 ""hex_grammar.c"" /* yacc.c:1646  */
//fix_flaw_line_below:
//#line 1345 ""hex_grammar.c"" /* yacc.c:1661  */
     break;
 
   case 4:
//flaw_line_below:
#line 119 ""hex_grammar.y"" /* yacc.c:1646  */
//fix_flaw_line_below:
//#line 126 ""hex_grammar.y"" /* yacc.c:1661  */
     {
//fix_flaw_line_below:
//        incr_ast_levels();
//fix_flaw_line_below:
//
         (yyval.re_node) = yr_re_node_create(RE_NODE_CONCAT, (yyvsp[-1].re_node), (yyvsp[0].re_node));
 
         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-1].re_node));
         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[0].re_node));
 
         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
       }
//flaw_line_below:
#line 1351 ""hex_grammar.c"" /* yacc.c:1646  */
//fix_flaw_line_below:
//#line 1360 ""hex_grammar.c"" /* yacc.c:1661  */
     break;
 
   case 5:
//flaw_line_below:
#line 128 ""hex_grammar.y"" /* yacc.c:1646  */
//fix_flaw_line_below:
//#line 137 ""hex_grammar.y"" /* yacc.c:1661  */
     {
         RE_NODE* new_concat;
         RE_NODE* leftmost_concat = NULL;
         RE_NODE* leftmost_node = (yyvsp[-1].re_node);
 
//fix_flaw_line_below:
//        incr_ast_levels();
//fix_flaw_line_below:
//
         (yyval.re_node) = NULL;
 
         /*
        Some portions of the code (i.e: yr_re_split_at_chaining_point)
        expect a left-unbalanced tree where the right child of a concat node
        can't be another concat node. A concat node must be always the left
        child of its parent if the parent is also a concat. For this reason
        the can't simply create two new concat nodes arranged like this:

                concat
                 /   \
                /     \
            token's    \
            subtree  concat
                     /    \
                    /      \
                   /        \
           token_sequence's  token's
               subtree       subtree

        Instead we must insert the subtree for the first token as the
        leftmost node of the token_sequence subtree.
        */

        while (leftmost_node->type == RE_NODE_CONCAT)
        {
          leftmost_concat = leftmost_node;
          leftmost_node = leftmost_node->left;
        }

        new_concat = yr_re_node_create(
            RE_NODE_CONCAT, (yyvsp[-2].re_node), leftmost_node);

        if (new_concat != NULL)
        {
          if (leftmost_concat != NULL)
          {
            leftmost_concat->left = new_concat;
            (yyval.re_node) = yr_re_node_create(RE_NODE_CONCAT, (yyvsp[-1].re_node), (yyvsp[0].re_node));
          }
          else
          {
            (yyval.re_node) = yr_re_node_create(RE_NODE_CONCAT, new_concat, (yyvsp[0].re_node));
          }
        }

        DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-2].re_node));
        DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-1].re_node));
        DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[0].re_node));
 
         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
       }
//flaw_line_below:
#line 1413 ""hex_grammar.c"" /* yacc.c:1646  */
//fix_flaw_line_below:
//#line 1424 ""hex_grammar.c"" /* yacc.c:1661  */
     break;
 
   case 6:
//flaw_line_below:
#line 190 ""hex_grammar.y"" /* yacc.c:1646  */
//fix_flaw_line_below:
//#line 201 ""hex_grammar.y"" /* yacc.c:1661  */
     {
         (yyval.re_node) = (yyvsp[0].re_node);
       }
//flaw_line_below:
#line 1421 ""hex_grammar.c"" /* yacc.c:1646  */
//fix_flaw_line_below:
//#line 1432 ""hex_grammar.c"" /* yacc.c:1661  */
     break;
 
   case 7:
//flaw_line_below:
#line 194 ""hex_grammar.y"" /* yacc.c:1646  */
//fix_flaw_line_below:
//#line 205 ""hex_grammar.y"" /* yacc.c:1661  */
     {
//fix_flaw_line_below:
//        incr_ast_levels();
//fix_flaw_line_below:
//
         (yyval.re_node) = yr_re_node_create(RE_NODE_CONCAT, (yyvsp[-1].re_node), (yyvsp[0].re_node));
 
         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-1].re_node));
         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[0].re_node));
 
         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
       }
//flaw_line_below:
#line 1434 ""hex_grammar.c"" /* yacc.c:1646  */
//fix_flaw_line_below:
//#line 1447 ""hex_grammar.c"" /* yacc.c:1661  */
     break;
 
   case 8:
//flaw_line_below:
#line 207 ""hex_grammar.y"" /* yacc.c:1646  */
//fix_flaw_line_below:
//#line 220 ""hex_grammar.y"" /* yacc.c:1661  */
     {
         (yyval.re_node) = (yyvsp[0].re_node);
       }
//flaw_line_below:
#line 1442 ""hex_grammar.c"" /* yacc.c:1646  */
//fix_flaw_line_below:
//#line 1455 ""hex_grammar.c"" /* yacc.c:1661  */
     break;
 
   case 9:
//flaw_line_below:
#line 211 ""hex_grammar.y"" /* yacc.c:1646  */
//fix_flaw_line_below:
//#line 224 ""hex_grammar.y"" /* yacc.c:1661  */
     {
         (yyval.re_node) = (yyvsp[0].re_node);
         (yyval.re_node)->greedy = FALSE;
       }
//flaw_line_below:
#line 1451 ""hex_grammar.c"" /* yacc.c:1646  */
//fix_flaw_line_below:
//#line 1464 ""hex_grammar.c"" /* yacc.c:1661  */
     break;
 
   case 10:
//flaw_line_below:
#line 220 ""hex_grammar.y"" /* yacc.c:1646  */
//fix_flaw_line_below:
//#line 233 ""hex_grammar.y"" /* yacc.c:1661  */
     {
         lex_env->token_count++;
 
        if (lex_env->token_count > MAX_HEX_STRING_TOKENS)
        {
          yr_re_node_destroy((yyvsp[0].re_node));
          yyerror(yyscanner, lex_env, ""string too long"");
          YYABORT;
        }
 
         (yyval.re_node) = (yyvsp[0].re_node);
       }
//flaw_line_below:
#line 1468 ""hex_grammar.c"" /* yacc.c:1646  */
//fix_flaw_line_below:
//#line 1481 ""hex_grammar.c"" /* yacc.c:1661  */
     break;
 
   case 11:
//flaw_line_below:
#line 233 ""hex_grammar.y"" /* yacc.c:1646  */
//fix_flaw_line_below:
//#line 246 ""hex_grammar.y"" /* yacc.c:1661  */
     {
         lex_env->inside_or++;
       }
//flaw_line_below:
#line 1476 ""hex_grammar.c"" /* yacc.c:1646  */
//fix_flaw_line_below:
//#line 1489 ""hex_grammar.c"" /* yacc.c:1661  */
     break;
 
   case 12:
//flaw_line_below:
#line 237 ""hex_grammar.y"" /* yacc.c:1646  */
//fix_flaw_line_below:
//#line 250 ""hex_grammar.y"" /* yacc.c:1661  */
     {
         (yyval.re_node) = (yyvsp[-1].re_node);
         lex_env->inside_or--;
       }
//flaw_line_below:
#line 1485 ""hex_grammar.c"" /* yacc.c:1646  */
//fix_flaw_line_below:
//#line 1498 ""hex_grammar.c"" /* yacc.c:1661  */
     break;
 
   case 13:
//flaw_line_below:
#line 246 ""hex_grammar.y"" /* yacc.c:1646  */
//fix_flaw_line_below:
//#line 259 ""hex_grammar.y"" /* yacc.c:1661  */
     {
         if ((yyvsp[-1].integer) <= 0)
         {
          yyerror(yyscanner, lex_env, ""invalid jump length"");
          YYABORT;
        }

        if (lex_env->inside_or && (yyvsp[-1].integer) > STRING_CHAINING_THRESHOLD)
        {
          yyerror(yyscanner, lex_env, ""jumps over ""
              STR(STRING_CHAINING_THRESHOLD)
              "" now allowed inside alternation (|)"");
          YYABORT;
        }

        (yyval.re_node) = yr_re_node_create(RE_NODE_RANGE_ANY, NULL, NULL);

        ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);

         (yyval.re_node)->start = (int) (yyvsp[-1].integer);
         (yyval.re_node)->end = (int) (yyvsp[-1].integer);
       }
//flaw_line_below:
#line 1512 ""hex_grammar.c"" /* yacc.c:1646  */
//fix_flaw_line_below:
//#line 1525 ""hex_grammar.c"" /* yacc.c:1661  */
     break;
 
   case 14:
//flaw_line_below:
#line 269 ""hex_grammar.y"" /* yacc.c:1646  */
//fix_flaw_line_below:
//#line 282 ""hex_grammar.y"" /* yacc.c:1661  */
     {
         if (lex_env->inside_or &&
             ((yyvsp[-3].integer) > STRING_CHAINING_THRESHOLD ||
             (yyvsp[-1].integer) > STRING_CHAINING_THRESHOLD) )
        {
          yyerror(yyscanner, lex_env, ""jumps over ""
              STR(STRING_CHAINING_THRESHOLD)
              "" now allowed inside alternation (|)"");

          YYABORT;
        }

        if ((yyvsp[-3].integer) < 0 || (yyvsp[-1].integer) < 0)
        {
          yyerror(yyscanner, lex_env, ""invalid negative jump length"");
          YYABORT;
        }

        if ((yyvsp[-3].integer) > (yyvsp[-1].integer))
        {
          yyerror(yyscanner, lex_env, ""invalid jump range"");
          YYABORT;
        }

        (yyval.re_node) = yr_re_node_create(RE_NODE_RANGE_ANY, NULL, NULL);

        ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);

         (yyval.re_node)->start = (int) (yyvsp[-3].integer);
         (yyval.re_node)->end = (int) (yyvsp[-1].integer);
       }
//flaw_line_below:
#line 1548 ""hex_grammar.c"" /* yacc.c:1646  */
//fix_flaw_line_below:
//#line 1561 ""hex_grammar.c"" /* yacc.c:1661  */
     break;
 
   case 15:
//flaw_line_below:
#line 301 ""hex_grammar.y"" /* yacc.c:1646  */
//fix_flaw_line_below:
//#line 314 ""hex_grammar.y"" /* yacc.c:1661  */
     {
         if (lex_env->inside_or)
         {
          yyerror(yyscanner, lex_env,
              ""unbounded jumps not allowed inside alternation (|)"");
          YYABORT;
        }

        if ((yyvsp[-2].integer) < 0)
        {
          yyerror(yyscanner, lex_env, ""invalid negative jump length"");
          YYABORT;
        }

        (yyval.re_node) = yr_re_node_create(RE_NODE_RANGE_ANY, NULL, NULL);

        ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);

         (yyval.re_node)->start = (int) (yyvsp[-2].integer);
         (yyval.re_node)->end = INT_MAX;
       }
//flaw_line_below:
#line 1574 ""hex_grammar.c"" /* yacc.c:1646  */
//fix_flaw_line_below:
//#line 1587 ""hex_grammar.c"" /* yacc.c:1661  */
     break;
 
   case 16:
//flaw_line_below:
#line 323 ""hex_grammar.y"" /* yacc.c:1646  */
//fix_flaw_line_below:
//#line 336 ""hex_grammar.y"" /* yacc.c:1661  */
     {
         if (lex_env->inside_or)
         {
          yyerror(yyscanner, lex_env,
              ""unbounded jumps not allowed inside alternation (|)"");
          YYABORT;
        }

        (yyval.re_node) = yr_re_node_create(RE_NODE_RANGE_ANY, NULL, NULL);

        ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);

         (yyval.re_node)->start = 0;
         (yyval.re_node)->end = INT_MAX;
       }
//flaw_line_below:
#line 1594 ""hex_grammar.c"" /* yacc.c:1646  */
//fix_flaw_line_below:
//#line 1607 ""hex_grammar.c"" /* yacc.c:1661  */
     break;
 
   case 17:
//flaw_line_below:
#line 343 ""hex_grammar.y"" /* yacc.c:1646  */
//fix_flaw_line_below:
//#line 356 ""hex_grammar.y"" /* yacc.c:1661  */
     {
           (yyval.re_node) = (yyvsp[0].re_node);
       }
//flaw_line_below:
#line 1602 ""hex_grammar.c"" /* yacc.c:1646  */
//fix_flaw_line_below:
//#line 1615 ""hex_grammar.c"" /* yacc.c:1661  */
     break;
 
   case 18:
//flaw_line_below:
#line 347 ""hex_grammar.y"" /* yacc.c:1646  */
//fix_flaw_line_below:
//#line 360 ""hex_grammar.y"" /* yacc.c:1661  */
     {
         mark_as_not_fast_regexp();
//fix_flaw_line_below:
//        incr_ast_levels();
 
         (yyval.re_node) = yr_re_node_create(RE_NODE_ALT, (yyvsp[-2].re_node), (yyvsp[0].re_node));
 
        DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-2].re_node));
        DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[0].re_node));
 
         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
       }
//flaw_line_below:
#line 1617 ""hex_grammar.c"" /* yacc.c:1646  */
//fix_flaw_line_below:
//#line 1631 ""hex_grammar.c"" /* yacc.c:1661  */
     break;
 
   case 19:
//flaw_line_below:
#line 361 ""hex_grammar.y"" /* yacc.c:1646  */
//fix_flaw_line_below:
//#line 375 ""hex_grammar.y"" /* yacc.c:1661  */
     {
         (yyval.re_node) = yr_re_node_create(RE_NODE_LITERAL, NULL, NULL);
 
         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
 
         (yyval.re_node)->value = (int) (yyvsp[0].integer);
       }
//flaw_line_below:
#line 1629 ""hex_grammar.c"" /* yacc.c:1646  */
//fix_flaw_line_below:
//#line 1643 ""hex_grammar.c"" /* yacc.c:1661  */
     break;
 
   case 20:
//flaw_line_below:
#line 369 ""hex_grammar.y"" /* yacc.c:1646  */
//fix_flaw_line_below:
//#line 383 ""hex_grammar.y"" /* yacc.c:1661  */
     {
         uint8_t mask = (uint8_t) ((yyvsp[0].integer) >> 8);
 
        if (mask == 0x00)
        {
          (yyval.re_node) = yr_re_node_create(RE_NODE_ANY, NULL, NULL);

          ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
        }
        else
        {
          (yyval.re_node) = yr_re_node_create(RE_NODE_MASKED_LITERAL, NULL, NULL);

          ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);

          (yyval.re_node)->value = (yyvsp[0].integer) & 0xFF;
           (yyval.re_node)->mask = mask;
         }
       }
//flaw_line_below:
#line 1653 ""hex_grammar.c"" /* yacc.c:1646  */
//fix_flaw_line_below:
//#line 1667 ""hex_grammar.c"" /* yacc.c:1661  */
     break;
 
 
//flaw_line_below:
#line 1657 ""hex_grammar.c"" /* yacc.c:1646  */
//fix_flaw_line_below:
//#line 1671 ""hex_grammar.c"" /* yacc.c:1661  */
       default: break;
     }
   /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT (""-> $$ ="", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;

  /* Now 'shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*--------------------------------------.
| yyerrlab -- here on detecting error.  |
`--------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYEMPTY : YYTRANSLATE (yychar);

  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (yyscanner, lex_env, YY_(""syntax error""));
#else
# define YYSYNTAX_ERROR yysyntax_error (&yymsg_alloc, &yymsg, \
                                        yyssp, yytoken)
      {
        char const *yymsgp = YY_(""syntax error"");
        int yysyntax_error_status;
        yysyntax_error_status = YYSYNTAX_ERROR;
        if (yysyntax_error_status == 0)
          yymsgp = yymsg;
        else if (yysyntax_error_status == 1)
          {
            if (yymsg != yymsgbuf)
              YYSTACK_FREE (yymsg);
            yymsg = (char *) YYSTACK_ALLOC (yymsg_alloc);
            if (!yymsg)
              {
                yymsg = yymsgbuf;
                yymsg_alloc = sizeof yymsgbuf;
                yysyntax_error_status = 2;
              }
            else
              {
                yysyntax_error_status = YYSYNTAX_ERROR;
                yymsgp = yymsg;
              }
          }
        yyerror (yyscanner, lex_env, yymsgp);
        if (yysyntax_error_status == 2)
          goto yyexhaustedlab;
      }
# undef YYSYNTAX_ERROR
#endif
    }



  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
         error, discard it.  */

      if (yychar <= YYEOF)
        {
          /* Return failure if at end of input.  */
          if (yychar == YYEOF)
            YYABORT;
        }
      else
        {
          yydestruct (""Error: discarding"",
                      yytoken, &yylval, yyscanner, lex_env);
          yychar = YYEMPTY;
        }
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  /* Do not reclaim the symbols of the rule whose action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;      /* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
        {
          yyn += YYTERROR;
          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
            {
              yyn = yytable[yyn];
              if (0 < yyn)
                break;
            }
        }

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
        YYABORT;


      yydestruct (""Error: popping"",
                  yystos[yystate], yyvsp, yyscanner, lex_env);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END


  /* Shift the error token.  */
  YY_SYMBOL_PRINT (""Shifting"", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#if !defined yyoverflow || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (yyscanner, lex_env, YY_(""memory exhausted""));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct (""Cleanup: discarding lookahead"",
                  yytoken, &yylval, yyscanner, lex_env);
    }
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct (""Cleanup: popping"",
                  yystos[*yyssp], yyvsp, yyscanner, lex_env);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
 #endif
   return yyresult;
 }
"
3538,181274,,Remote,Not required,Partial,CVE-2017-9304,https://www.cvedetails.com/cve/CVE-2017-9304/,CWE-674,Low,,,,2017-05-31,5.0,libyara/re.c in the regexp module in YARA 3.5.0 allows remote attackers to cause a denial of service (stack consumption) via a crafted rule that is mishandled in the _yr_re_emit function.,2019-10-02,DoS ,1,https://github.com/VirusTotal/yara/commit/925bcf3c3b0a28b5b78e25d9efda5c0bf27ae699,925bcf3c3b0a28b5b78e25d9efda5c0bf27ae699,Fix issue #674. Move regexp limits to limits.h.,0,libyara/re.c,"{""sha"": ""ae4d1ac1d591cf30f433ace23bf227b102af2129"", ""filename"": ""libyara/include/yara/limits.h"", ""status"": ""modified"", ""additions"": 20, ""deletions"": 0, ""changes"": 20, ""blob_url"": ""https://github.com/VirusTotal/yara/blob/925bcf3c3b0a28b5b78e25d9efda5c0bf27ae699/libyara/include/yara/limits.h"", ""raw_url"": ""https://github.com/VirusTotal/yara/raw/925bcf3c3b0a28b5b78e25d9efda5c0bf27ae699/libyara/include/yara/limits.h"", ""contents_url"": ""https://api.github.com/repos/VirusTotal/yara/contents/libyara/include/yara/limits.h?ref=925bcf3c3b0a28b5b78e25d9efda5c0bf27ae699"", ""patch"": ""@@ -65,4 +65,24 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n #define LEX_BUF_SIZE                    8192\n \n \n+// Maximum allowed split ID, also limiting the number of split instructions\n+// allowed in a regular expression. This number can't be increased\n+// over 255 without changing RE_SPLIT_ID_TYPE.\n+#define RE_MAX_SPLIT_ID                 128\n+\n+// Maximum stack size for regexp evaluation\n+#define RE_MAX_STACK                    1024\n+\n+// Maximum code size for a compiled regexp\n+#define RE_MAX_CODE_SIZE                32768\n+\n+// Maximum input size scanned by yr_re_exec\n+#define RE_SCAN_LIMIT                   4096\n+\n+// Maximum number of fibers\n+#define RE_MAX_FIBERS                   1024\n+\n+// Maximum number of levels in regexp's AST\n+#define RE_MAX_AST_LEVELS               2000\n+\n #endif""}<_**next**_>{""sha"": ""ebdb1fd8e8b31574dcea152a60c6bbe91353ed3c"", ""filename"": ""libyara/include/yara/re.h"", ""status"": ""modified"", ""additions"": 1, ""deletions"": 0, ""changes"": 1, ""blob_url"": ""https://github.com/VirusTotal/yara/blob/925bcf3c3b0a28b5b78e25d9efda5c0bf27ae699/libyara/include/yara/re.h"", ""raw_url"": ""https://github.com/VirusTotal/yara/raw/925bcf3c3b0a28b5b78e25d9efda5c0bf27ae699/libyara/include/yara/re.h"", ""contents_url"": ""https://api.github.com/repos/VirusTotal/yara/contents/libyara/include/yara/re.h?ref=925bcf3c3b0a28b5b78e25d9efda5c0bf27ae699"", ""patch"": ""@@ -136,6 +136,7 @@ struct RE_NODE\n struct RE_AST\n {\n   uint32_t flags;\n+  uint16_t levels;\n   RE_NODE* root_node;\n };\n ""}<_**next**_>{""sha"": ""959979ba288815450a8ca5e6b991519911e98b55"", ""filename"": ""libyara/re.c"", ""status"": ""modified"", ""additions"": 1, ""deletions"": 17, ""changes"": 18, ""blob_url"": ""https://github.com/VirusTotal/yara/blob/925bcf3c3b0a28b5b78e25d9efda5c0bf27ae699/libyara/re.c"", ""raw_url"": ""https://github.com/VirusTotal/yara/raw/925bcf3c3b0a28b5b78e25d9efda5c0bf27ae699/libyara/re.c"", ""contents_url"": ""https://api.github.com/repos/VirusTotal/yara/contents/libyara/re.c?ref=925bcf3c3b0a28b5b78e25d9efda5c0bf27ae699"", ""patch"": ""@@ -52,23 +52,6 @@ order to avoid confusion with operating system threads.\n #include <yara/re_lexer.h>\n #include <yara/hex_lexer.h>\n \n-// Maximum allowed split ID, also limiting the number of split instructions\n-// allowed in a regular expression. This number can't be increased\n-// over 255 without changing RE_SPLIT_ID_TYPE.\n-#define RE_MAX_SPLIT_ID     128\n-\n-// Maximum stack size for regexp evaluation\n-#define RE_MAX_STACK      1024\n-\n-// Maximum code size for a compiled regexp\n-#define RE_MAX_CODE_SIZE  32768\n-\n-// Maximum input size scanned by yr_re_exec\n-#define RE_SCAN_LIMIT     4096\n-\n-// Maximum number of fibers\n-#define RE_MAX_FIBERS     1024\n-\n \n #define EMIT_BACKWARDS                  0x01\n #define EMIT_DONT_SET_FORWARDS_CODE     0x02\n@@ -268,6 +251,7 @@ int yr_re_ast_create(\n     return ERROR_INSUFFICIENT_MEMORY;\n \n   (*re_ast)->flags = 0;\n+  (*re_ast)->levels = 0;\n   (*re_ast)->root_node = NULL;\n \n   return ERROR_SUCCESS;""}<_**next**_>{""sha"": ""51839f6f00a0b73ea33191076f115e7115a15720"", ""filename"": ""libyara/re_grammar.c"", ""status"": ""modified"", ""additions"": 92, ""deletions"": 78, ""changes"": 170, ""blob_url"": ""https://github.com/VirusTotal/yara/blob/925bcf3c3b0a28b5b78e25d9efda5c0bf27ae699/libyara/re_grammar.c"", ""raw_url"": ""https://github.com/VirusTotal/yara/raw/925bcf3c3b0a28b5b78e25d9efda5c0bf27ae699/libyara/re_grammar.c"", ""contents_url"": ""https://api.github.com/repos/VirusTotal/yara/contents/libyara/re_grammar.c?ref=925bcf3c3b0a28b5b78e25d9efda5c0bf27ae699"", ""patch"": ""@@ -88,6 +88,14 @@\n #define mark_as_not_fast_regexp() \\\n     ((RE_AST*) yyget_extra(yyscanner))->flags &= ~RE_FLAGS_FAST_REGEXP\n \n+#define incr_ast_levels() \\\n+    if (((RE_AST*) yyget_extra(yyscanner))->levels++ > RE_MAX_AST_LEVELS) \\\n+    { \\\n+      lex_env->last_error_code = ERROR_INVALID_REGULAR_EXPRESSION; \\\n+      YYABORT; \\\n+    }\n+\n+\n #define ERROR_IF(x, error) \\\n     if (x) \\\n     { \\\n@@ -102,7 +110,7 @@\n     } \\\n \n \n-#line 106 \""re_grammar.c\"" /* yacc.c:339  */\n+#line 114 \""re_grammar.c\"" /* yacc.c:339  */\n \n # ifndef YY_NULLPTR\n #  if defined __cplusplus && 201103L <= __cplusplus\n@@ -170,14 +178,14 @@ extern int re_yydebug;\n \n union YYSTYPE\n {\n-#line 73 \""re_grammar.y\"" /* yacc.c:355  */\n+#line 81 \""re_grammar.y\"" /* yacc.c:355  */\n \n   int integer;\n   uint32_t range;\n   RE_NODE* re_node;\n   uint8_t* class_vector;\n \n-#line 181 \""re_grammar.c\"" /* yacc.c:355  */\n+#line 189 \""re_grammar.c\"" /* yacc.c:355  */\n };\n \n typedef union YYSTYPE YYSTYPE;\n@@ -193,7 +201,7 @@ int re_yyparse (void *yyscanner, RE_LEX_ENVIRONMENT *lex_env);\n \n /* Copy the second part of user declarations.  */\n \n-#line 197 \""re_grammar.c\"" /* yacc.c:358  */\n+#line 205 \""re_grammar.c\"" /* yacc.c:358  */\n \n #ifdef short\n # undef short\n@@ -491,10 +499,10 @@ static const yytype_uint8 yytranslate[] =\n   /* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */\n static const yytype_uint16 yyrline[] =\n {\n-       0,   104,   104,   109,   113,   117,   128,   146,   150,   161,\n-     175,   191,   205,   221,   244,   268,   290,   313,   317,   323,\n-     329,   335,   344,   348,   354,   362,   368,   374,   380,   386,\n-     392,   398\n+       0,   112,   112,   117,   121,   125,   137,   156,   160,   173,\n+     187,   203,   217,   233,   256,   280,   302,   325,   329,   335,\n+     341,   347,   356,   362,   368,   376,   382,   388,   394,   400,\n+     406,   412\n };\n #endif\n \n@@ -1039,33 +1047,33 @@ yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, void *yyscanner, R\n   switch (yytype)\n     {\n           case 6: /* _CLASS_  */\n-#line 96 \""re_grammar.y\"" /* yacc.c:1257  */\n+#line 104 \""re_grammar.y\"" /* yacc.c:1257  */\n       { yr_free(((*yyvaluep).class_vector)); }\n-#line 1045 \""re_grammar.c\"" /* yacc.c:1257  */\n+#line 1053 \""re_grammar.c\"" /* yacc.c:1257  */\n         break;\n \n     case 26: /* alternative  */\n-#line 97 \""re_grammar.y\"" /* yacc.c:1257  */\n+#line 105 \""re_grammar.y\"" /* yacc.c:1257  */\n       { yr_re_node_destroy(((*yyvaluep).re_node)); }\n-#line 1051 \""re_grammar.c\"" /* yacc.c:1257  */\n+#line 1059 \""re_grammar.c\"" /* yacc.c:1257  */\n         break;\n \n     case 27: /* concatenation  */\n-#line 98 \""re_grammar.y\"" /* yacc.c:1257  */\n+#line 106 \""re_grammar.y\"" /* yacc.c:1257  */\n       { yr_re_node_destroy(((*yyvaluep).re_node)); }\n-#line 1057 \""re_grammar.c\"" /* yacc.c:1257  */\n+#line 1065 \""re_grammar.c\"" /* yacc.c:1257  */\n         break;\n \n     case 28: /* repeat  */\n-#line 99 \""re_grammar.y\"" /* yacc.c:1257  */\n+#line 107 \""re_grammar.y\"" /* yacc.c:1257  */\n       { yr_re_node_destroy(((*yyvaluep).re_node)); }\n-#line 1063 \""re_grammar.c\"" /* yacc.c:1257  */\n+#line 1071 \""re_grammar.c\"" /* yacc.c:1257  */\n         break;\n \n     case 29: /* single  */\n-#line 100 \""re_grammar.y\"" /* yacc.c:1257  */\n+#line 108 \""re_grammar.y\"" /* yacc.c:1257  */\n       { yr_re_node_destroy(((*yyvaluep).re_node)); }\n-#line 1069 \""re_grammar.c\"" /* yacc.c:1257  */\n+#line 1077 \""re_grammar.c\"" /* yacc.c:1257  */\n         break;\n \n \n@@ -1331,26 +1339,27 @@ YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);\n   switch (yyn)\n     {\n         case 2:\n-#line 105 \""re_grammar.y\"" /* yacc.c:1646  */\n+#line 113 \""re_grammar.y\"" /* yacc.c:1646  */\n     {\n         RE_AST* re_ast = yyget_extra(yyscanner);\n         re_ast->root_node = (yyvsp[0].re_node);\n       }\n-#line 1340 \""re_grammar.c\"" /* yacc.c:1646  */\n+#line 1348 \""re_grammar.c\"" /* yacc.c:1646  */\n     break;\n \n   case 4:\n-#line 114 \""re_grammar.y\"" /* yacc.c:1646  */\n+#line 122 \""re_grammar.y\"" /* yacc.c:1646  */\n     {\n         (yyval.re_node) = (yyvsp[0].re_node);\n       }\n-#line 1348 \""re_grammar.c\"" /* yacc.c:1646  */\n+#line 1356 \""re_grammar.c\"" /* yacc.c:1646  */\n     break;\n \n   case 5:\n-#line 118 \""re_grammar.y\"" /* yacc.c:1646  */\n+#line 126 \""re_grammar.y\"" /* yacc.c:1646  */\n     {\n         mark_as_not_fast_regexp();\n+        incr_ast_levels();\n \n         (yyval.re_node) = yr_re_node_create(RE_NODE_ALT, (yyvsp[-2].re_node), (yyvsp[0].re_node));\n \n@@ -1359,15 +1368,16 @@ YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);\n \n         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n       }\n-#line 1363 \""re_grammar.c\"" /* yacc.c:1646  */\n+#line 1372 \""re_grammar.c\"" /* yacc.c:1646  */\n     break;\n \n   case 6:\n-#line 129 \""re_grammar.y\"" /* yacc.c:1646  */\n+#line 138 \""re_grammar.y\"" /* yacc.c:1646  */\n     {\n         RE_NODE* node;\n \n         mark_as_not_fast_regexp();\n+        incr_ast_levels();\n \n         node = yr_re_node_create(RE_NODE_EMPTY, NULL, NULL);\n \n@@ -1378,31 +1388,33 @@ YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);\n \n         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n       }\n-#line 1382 \""re_grammar.c\"" /* yacc.c:1646  */\n+#line 1392 \""re_grammar.c\"" /* yacc.c:1646  */\n     break;\n \n   case 7:\n-#line 147 \""re_grammar.y\"" /* yacc.c:1646  */\n+#line 157 \""re_grammar.y\"" /* yacc.c:1646  */\n     {\n         (yyval.re_node) = (yyvsp[0].re_node);\n       }\n-#line 1390 \""re_grammar.c\"" /* yacc.c:1646  */\n+#line 1400 \""re_grammar.c\"" /* yacc.c:1646  */\n     break;\n \n   case 8:\n-#line 151 \""re_grammar.y\"" /* yacc.c:1646  */\n+#line 161 \""re_grammar.y\"" /* yacc.c:1646  */\n     {\n+        incr_ast_levels();\n+\n         (yyval.re_node) = yr_re_node_create(RE_NODE_CONCAT, (yyvsp[-1].re_node), (yyvsp[0].re_node));\n \n         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-1].re_node));\n         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[0].re_node));\n         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n       }\n-#line 1402 \""re_grammar.c\"" /* yacc.c:1646  */\n+#line 1414 \""re_grammar.c\"" /* yacc.c:1646  */\n     break;\n \n   case 9:\n-#line 162 \""re_grammar.y\"" /* yacc.c:1646  */\n+#line 174 \""re_grammar.y\"" /* yacc.c:1646  */\n     {\n         RE_AST* re_ast;\n \n@@ -1416,11 +1428,11 @@ YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);\n         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-1].re_node));\n         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n       }\n-#line 1420 \""re_grammar.c\"" /* yacc.c:1646  */\n+#line 1432 \""re_grammar.c\"" /* yacc.c:1646  */\n     break;\n \n   case 10:\n-#line 176 \""re_grammar.y\"" /* yacc.c:1646  */\n+#line 188 \""re_grammar.y\"" /* yacc.c:1646  */\n     {\n         RE_AST* re_ast;\n \n@@ -1436,11 +1448,11 @@ YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);\n \n         (yyval.re_node)->greedy = FALSE;\n       }\n-#line 1440 \""re_grammar.c\"" /* yacc.c:1646  */\n+#line 1452 \""re_grammar.c\"" /* yacc.c:1646  */\n     break;\n \n   case 11:\n-#line 192 \""re_grammar.y\"" /* yacc.c:1646  */\n+#line 204 \""re_grammar.y\"" /* yacc.c:1646  */\n     {\n         RE_AST* re_ast;\n \n@@ -1454,11 +1466,11 @@ YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);\n         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-1].re_node));\n         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n       }\n-#line 1458 \""re_grammar.c\"" /* yacc.c:1646  */\n+#line 1470 \""re_grammar.c\"" /* yacc.c:1646  */\n     break;\n \n   case 12:\n-#line 206 \""re_grammar.y\"" /* yacc.c:1646  */\n+#line 218 \""re_grammar.y\"" /* yacc.c:1646  */\n     {\n         RE_AST* re_ast;\n \n@@ -1474,11 +1486,11 @@ YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);\n \n         (yyval.re_node)->greedy = FALSE;\n       }\n-#line 1478 \""re_grammar.c\"" /* yacc.c:1646  */\n+#line 1490 \""re_grammar.c\"" /* yacc.c:1646  */\n     break;\n \n   case 13:\n-#line 222 \""re_grammar.y\"" /* yacc.c:1646  */\n+#line 234 \""re_grammar.y\"" /* yacc.c:1646  */\n     {\n         RE_AST* re_ast = yyget_extra(yyscanner);\n         re_ast->flags |= RE_FLAGS_GREEDY;\n@@ -1501,11 +1513,11 @@ YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);\n         (yyval.re_node)->start = 0;\n         (yyval.re_node)->end = 1;\n       }\n-#line 1505 \""re_grammar.c\"" /* yacc.c:1646  */\n+#line 1517 \""re_grammar.c\"" /* yacc.c:1646  */\n     break;\n \n   case 14:\n-#line 245 \""re_grammar.y\"" /* yacc.c:1646  */\n+#line 257 \""re_grammar.y\"" /* yacc.c:1646  */\n     {\n         RE_AST* re_ast = yyget_extra(yyscanner);\n         re_ast->flags |= RE_FLAGS_UNGREEDY;\n@@ -1529,11 +1541,11 @@ YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);\n         (yyval.re_node)->end = 1;\n         (yyval.re_node)->greedy = FALSE;\n       }\n-#line 1533 \""re_grammar.c\"" /* yacc.c:1646  */\n+#line 1545 \""re_grammar.c\"" /* yacc.c:1646  */\n     break;\n \n   case 15:\n-#line 269 \""re_grammar.y\"" /* yacc.c:1646  */\n+#line 281 \""re_grammar.y\"" /* yacc.c:1646  */\n     {\n         RE_AST* re_ast = yyget_extra(yyscanner);\n         re_ast->flags |= RE_FLAGS_GREEDY;\n@@ -1555,11 +1567,11 @@ YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);\n         (yyval.re_node)->start = (yyvsp[0].range) & 0xFFFF;;\n         (yyval.re_node)->end = (yyvsp[0].range) >> 16;;\n       }\n-#line 1559 \""re_grammar.c\"" /* yacc.c:1646  */\n+#line 1571 \""re_grammar.c\"" /* yacc.c:1646  */\n     break;\n \n   case 16:\n-#line 291 \""re_grammar.y\"" /* yacc.c:1646  */\n+#line 303 \""re_grammar.y\"" /* yacc.c:1646  */\n     {\n         RE_AST* re_ast = yyget_extra(yyscanner);\n         re_ast->flags |= RE_FLAGS_UNGREEDY;\n@@ -1582,161 +1594,163 @@ YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);\n         (yyval.re_node)->end = (yyvsp[-1].range) >> 16;;\n         (yyval.re_node)->greedy = FALSE;\n       }\n-#line 1586 \""re_grammar.c\"" /* yacc.c:1646  */\n+#line 1598 \""re_grammar.c\"" /* yacc.c:1646  */\n     break;\n \n   case 17:\n-#line 314 \""re_grammar.y\"" /* yacc.c:1646  */\n+#line 326 \""re_grammar.y\"" /* yacc.c:1646  */\n     {\n         (yyval.re_node) = (yyvsp[0].re_node);\n       }\n-#line 1594 \""re_grammar.c\"" /* yacc.c:1646  */\n+#line 1606 \""re_grammar.c\"" /* yacc.c:1646  */\n     break;\n \n   case 18:\n-#line 318 \""re_grammar.y\"" /* yacc.c:1646  */\n+#line 330 \""re_grammar.y\"" /* yacc.c:1646  */\n     {\n         (yyval.re_node) = yr_re_node_create(RE_NODE_WORD_BOUNDARY, NULL, NULL);\n \n         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n       }\n-#line 1604 \""re_grammar.c\"" /* yacc.c:1646  */\n+#line 1616 \""re_grammar.c\"" /* yacc.c:1646  */\n     break;\n \n   case 19:\n-#line 324 \""re_grammar.y\"" /* yacc.c:1646  */\n+#line 336 \""re_grammar.y\"" /* yacc.c:1646  */\n     {\n         (yyval.re_node) = yr_re_node_create(RE_NODE_NON_WORD_BOUNDARY, NULL, NULL);\n \n         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n       }\n-#line 1614 \""re_grammar.c\"" /* yacc.c:1646  */\n+#line 1626 \""re_grammar.c\"" /* yacc.c:1646  */\n     break;\n \n   case 20:\n-#line 330 \""re_grammar.y\"" /* yacc.c:1646  */\n+#line 342 \""re_grammar.y\"" /* yacc.c:1646  */\n     {\n         (yyval.re_node) = yr_re_node_create(RE_NODE_ANCHOR_START, NULL, NULL);\n \n         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n       }\n-#line 1624 \""re_grammar.c\"" /* yacc.c:1646  */\n+#line 1636 \""re_grammar.c\"" /* yacc.c:1646  */\n     break;\n \n   case 21:\n-#line 336 \""re_grammar.y\"" /* yacc.c:1646  */\n+#line 348 \""re_grammar.y\"" /* yacc.c:1646  */\n     {\n         (yyval.re_node) = yr_re_node_create(RE_NODE_ANCHOR_END, NULL, NULL);\n \n         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n       }\n-#line 1634 \""re_grammar.c\"" /* yacc.c:1646  */\n+#line 1646 \""re_grammar.c\"" /* yacc.c:1646  */\n     break;\n \n   case 22:\n-#line 345 \""re_grammar.y\"" /* yacc.c:1646  */\n+#line 357 \""re_grammar.y\"" /* yacc.c:1646  */\n     {\n+        incr_ast_levels();\n+\n         (yyval.re_node) = (yyvsp[-1].re_node);\n       }\n-#line 1642 \""re_grammar.c\"" /* yacc.c:1646  */\n+#line 1656 \""re_grammar.c\"" /* yacc.c:1646  */\n     break;\n \n   case 23:\n-#line 349 \""re_grammar.y\"" /* yacc.c:1646  */\n+#line 363 \""re_grammar.y\"" /* yacc.c:1646  */\n     {\n         (yyval.re_node) = yr_re_node_create(RE_NODE_ANY, NULL, NULL);\n \n         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n       }\n-#line 1652 \""re_grammar.c\"" /* yacc.c:1646  */\n+#line 1666 \""re_grammar.c\"" /* yacc.c:1646  */\n     break;\n \n   case 24:\n-#line 355 \""re_grammar.y\"" /* yacc.c:1646  */\n+#line 369 \""re_grammar.y\"" /* yacc.c:1646  */\n     {\n         (yyval.re_node) = yr_re_node_create(RE_NODE_LITERAL, NULL, NULL);\n \n         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n \n         (yyval.re_node)->value = (yyvsp[0].integer);\n       }\n-#line 1664 \""re_grammar.c\"" /* yacc.c:1646  */\n+#line 1678 \""re_grammar.c\"" /* yacc.c:1646  */\n     break;\n \n   case 25:\n-#line 363 \""re_grammar.y\"" /* yacc.c:1646  */\n+#line 377 \""re_grammar.y\"" /* yacc.c:1646  */\n     {\n         (yyval.re_node) = yr_re_node_create(RE_NODE_WORD_CHAR, NULL, NULL);\n \n         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n       }\n-#line 1674 \""re_grammar.c\"" /* yacc.c:1646  */\n+#line 1688 \""re_grammar.c\"" /* yacc.c:1646  */\n     break;\n \n   case 26:\n-#line 369 \""re_grammar.y\"" /* yacc.c:1646  */\n+#line 383 \""re_grammar.y\"" /* yacc.c:1646  */\n     {\n         (yyval.re_node) = yr_re_node_create(RE_NODE_NON_WORD_CHAR, NULL, NULL);\n \n         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n       }\n-#line 1684 \""re_grammar.c\"" /* yacc.c:1646  */\n+#line 1698 \""re_grammar.c\"" /* yacc.c:1646  */\n     break;\n \n   case 27:\n-#line 375 \""re_grammar.y\"" /* yacc.c:1646  */\n+#line 389 \""re_grammar.y\"" /* yacc.c:1646  */\n     {\n         (yyval.re_node) = yr_re_node_create(RE_NODE_SPACE, NULL, NULL);\n \n         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n       }\n-#line 1694 \""re_grammar.c\"" /* yacc.c:1646  */\n+#line 1708 \""re_grammar.c\"" /* yacc.c:1646  */\n     break;\n \n   case 28:\n-#line 381 \""re_grammar.y\"" /* yacc.c:1646  */\n+#line 395 \""re_grammar.y\"" /* yacc.c:1646  */\n     {\n          (yyval.re_node) = yr_re_node_create(RE_NODE_NON_SPACE, NULL, NULL);\n \n          ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n       }\n-#line 1704 \""re_grammar.c\"" /* yacc.c:1646  */\n+#line 1718 \""re_grammar.c\"" /* yacc.c:1646  */\n     break;\n \n   case 29:\n-#line 387 \""re_grammar.y\"" /* yacc.c:1646  */\n+#line 401 \""re_grammar.y\"" /* yacc.c:1646  */\n     {\n         (yyval.re_node) = yr_re_node_create(RE_NODE_DIGIT, NULL, NULL);\n \n         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n       }\n-#line 1714 \""re_grammar.c\"" /* yacc.c:1646  */\n+#line 1728 \""re_grammar.c\"" /* yacc.c:1646  */\n     break;\n \n   case 30:\n-#line 393 \""re_grammar.y\"" /* yacc.c:1646  */\n+#line 407 \""re_grammar.y\"" /* yacc.c:1646  */\n     {\n         (yyval.re_node) = yr_re_node_create(RE_NODE_NON_DIGIT, NULL, NULL);\n \n         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n       }\n-#line 1724 \""re_grammar.c\"" /* yacc.c:1646  */\n+#line 1738 \""re_grammar.c\"" /* yacc.c:1646  */\n     break;\n \n   case 31:\n-#line 399 \""re_grammar.y\"" /* yacc.c:1646  */\n+#line 413 \""re_grammar.y\"" /* yacc.c:1646  */\n     {\n         (yyval.re_node) = yr_re_node_create(RE_NODE_CLASS, NULL, NULL);\n \n         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n \n         (yyval.re_node)->class_vector = (yyvsp[0].class_vector);\n       }\n-#line 1736 \""re_grammar.c\"" /* yacc.c:1646  */\n+#line 1750 \""re_grammar.c\"" /* yacc.c:1646  */\n     break;\n \n \n-#line 1740 \""re_grammar.c\"" /* yacc.c:1646  */\n+#line 1754 \""re_grammar.c\"" /* yacc.c:1646  */\n       default: break;\n     }\n   /* User semantic actions sometimes alter yychar, and that requires\n@@ -1964,5 +1978,5 @@ YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);\n #endif\n   return yyresult;\n }\n-#line 407 \""re_grammar.y\"" /* yacc.c:1906  */\n+#line 421 \""re_grammar.y\"" /* yacc.c:1906  */\n ""}<_**next**_>{""sha"": ""8ba1c56dec721cdf3fc4c84cfbb00a224e790a2c"", ""filename"": ""libyara/re_grammar.h"", ""status"": ""modified"", ""additions"": 1, ""deletions"": 1, ""changes"": 2, ""blob_url"": ""https://github.com/VirusTotal/yara/blob/925bcf3c3b0a28b5b78e25d9efda5c0bf27ae699/libyara/re_grammar.h"", ""raw_url"": ""https://github.com/VirusTotal/yara/raw/925bcf3c3b0a28b5b78e25d9efda5c0bf27ae699/libyara/re_grammar.h"", ""contents_url"": ""https://api.github.com/repos/VirusTotal/yara/contents/libyara/re_grammar.h?ref=925bcf3c3b0a28b5b78e25d9efda5c0bf27ae699"", ""patch"": ""@@ -78,7 +78,7 @@ extern int re_yydebug;\n \n union YYSTYPE\n {\n-#line 73 \""re_grammar.y\"" /* yacc.c:1909  */\n+#line 81 \""re_grammar.y\"" /* yacc.c:1909  */\n \n   int integer;\n   uint32_t range;""}<_**next**_>{""sha"": ""9e88d24e85306ee241cab15c9296e8142a49d1ae"", ""filename"": ""libyara/re_grammar.y"", ""status"": ""modified"", ""additions"": 14, ""deletions"": 0, ""changes"": 14, ""blob_url"": ""https://github.com/VirusTotal/yara/blob/925bcf3c3b0a28b5b78e25d9efda5c0bf27ae699/libyara/re_grammar.y"", ""raw_url"": ""https://github.com/VirusTotal/yara/raw/925bcf3c3b0a28b5b78e25d9efda5c0bf27ae699/libyara/re_grammar.y"", ""contents_url"": ""https://api.github.com/repos/VirusTotal/yara/contents/libyara/re_grammar.y?ref=925bcf3c3b0a28b5b78e25d9efda5c0bf27ae699"", ""patch"": ""@@ -46,6 +46,14 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n #define mark_as_not_fast_regexp() \\\n     ((RE_AST*) yyget_extra(yyscanner))->flags &= ~RE_FLAGS_FAST_REGEXP\n \n+#define incr_ast_levels() \\\n+    if (((RE_AST*) yyget_extra(yyscanner))->levels++ > RE_MAX_AST_LEVELS) \\\n+    { \\\n+      lex_env->last_error_code = ERROR_INVALID_REGULAR_EXPRESSION; \\\n+      YYABORT; \\\n+    }\n+\n+\n #define ERROR_IF(x, error) \\\n     if (x) \\\n     { \\\n@@ -117,6 +125,7 @@ alternative\n     | alternative '|' concatenation\n       {\n         mark_as_not_fast_regexp();\n+        incr_ast_levels();\n \n         $$ = yr_re_node_create(RE_NODE_ALT, $1, $3);\n \n@@ -130,6 +139,7 @@ alternative\n         RE_NODE* node;\n \n         mark_as_not_fast_regexp();\n+        incr_ast_levels();\n \n         node = yr_re_node_create(RE_NODE_EMPTY, NULL, NULL);\n \n@@ -149,6 +159,8 @@ concatenation\n       }\n     | concatenation repeat\n       {\n+        incr_ast_levels();\n+\n         $$ = yr_re_node_create(RE_NODE_CONCAT, $1, $2);\n \n         DESTROY_NODE_IF($$ == NULL, $1);\n@@ -343,6 +355,8 @@ repeat\n single\n     : '(' alternative ')'\n       {\n+        incr_ast_levels();\n+\n         $$ = $2;\n       }\n     | '.'""}","int yr_re_ast_create(
    RE_AST** re_ast)
{
  *re_ast = (RE_AST*) yr_malloc(sizeof(RE_AST));

  if (*re_ast == NULL)
     return ERROR_INSUFFICIENT_MEMORY;
 
   (*re_ast)->flags = 0;
  (*re_ast)->levels = 0;
   (*re_ast)->root_node = NULL;
 
   return ERROR_SUCCESS;
}
","int yr_re_ast_create(
    RE_AST** re_ast)
{
  *re_ast = (RE_AST*) yr_malloc(sizeof(RE_AST));

  if (*re_ast == NULL)
     return ERROR_INSUFFICIENT_MEMORY;
 
   (*re_ast)->flags = 0;
   (*re_ast)->root_node = NULL;
 
   return ERROR_SUCCESS;
}
",C,"  (*re_ast)->levels = 0;
",,,"@@ -52,23 +52,6 @@ order to avoid confusion with operating system threads.
 #include <yara/re_lexer.h>
 #include <yara/hex_lexer.h>
 
-// Maximum allowed split ID, also limiting the number of split instructions
-// allowed in a regular expression. This number can't be increased
-// over 255 without changing RE_SPLIT_ID_TYPE.
-#define RE_MAX_SPLIT_ID     128
-
-// Maximum stack size for regexp evaluation
-#define RE_MAX_STACK      1024
-
-// Maximum code size for a compiled regexp
-#define RE_MAX_CODE_SIZE  32768
-
-// Maximum input size scanned by yr_re_exec
-#define RE_SCAN_LIMIT     4096
-
-// Maximum number of fibers
-#define RE_MAX_FIBERS     1024
-
 
 #define EMIT_BACKWARDS                  0x01
 #define EMIT_DONT_SET_FORWARDS_CODE     0x02
@@ -268,6 +251,7 @@ int yr_re_ast_create(
     return ERROR_INSUFFICIENT_MEMORY;
 
   (*re_ast)->flags = 0;
+  (*re_ast)->levels = 0;
   (*re_ast)->root_node = NULL;
 
   return ERROR_SUCCESS;",yara,925bcf3c3b0a28b5b78e25d9efda5c0bf27ae699,aa871746d89010ea96272344d993675e982fbe52,1,"int yr_re_ast_create(
    RE_AST** re_ast)
{
  *re_ast = (RE_AST*) yr_malloc(sizeof(RE_AST));

  if (*re_ast == NULL)
     return ERROR_INSUFFICIENT_MEMORY;
 
   (*re_ast)->flags = 0;
//fix_flaw_line_below:
//  (*re_ast)->levels = 0;
   (*re_ast)->root_node = NULL;
 
   return ERROR_SUCCESS;
}
"
3539,181275,,Remote,Not required,Partial,CVE-2017-9304,https://www.cvedetails.com/cve/CVE-2017-9304/,CWE-674,Low,,,,2017-05-31,5.0,libyara/re.c in the regexp module in YARA 3.5.0 allows remote attackers to cause a denial of service (stack consumption) via a crafted rule that is mishandled in the _yr_re_emit function.,2019-10-02,DoS ,10,https://github.com/VirusTotal/yara/commit/925bcf3c3b0a28b5b78e25d9efda5c0bf27ae699,925bcf3c3b0a28b5b78e25d9efda5c0bf27ae699,Fix issue #674. Move regexp limits to limits.h.,10,libyara/re_grammar.c,"{""sha"": ""ae4d1ac1d591cf30f433ace23bf227b102af2129"", ""filename"": ""libyara/include/yara/limits.h"", ""status"": ""modified"", ""additions"": 20, ""deletions"": 0, ""changes"": 20, ""blob_url"": ""https://github.com/VirusTotal/yara/blob/925bcf3c3b0a28b5b78e25d9efda5c0bf27ae699/libyara/include/yara/limits.h"", ""raw_url"": ""https://github.com/VirusTotal/yara/raw/925bcf3c3b0a28b5b78e25d9efda5c0bf27ae699/libyara/include/yara/limits.h"", ""contents_url"": ""https://api.github.com/repos/VirusTotal/yara/contents/libyara/include/yara/limits.h?ref=925bcf3c3b0a28b5b78e25d9efda5c0bf27ae699"", ""patch"": ""@@ -65,4 +65,24 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n #define LEX_BUF_SIZE                    8192\n \n \n+// Maximum allowed split ID, also limiting the number of split instructions\n+// allowed in a regular expression. This number can't be increased\n+// over 255 without changing RE_SPLIT_ID_TYPE.\n+#define RE_MAX_SPLIT_ID                 128\n+\n+// Maximum stack size for regexp evaluation\n+#define RE_MAX_STACK                    1024\n+\n+// Maximum code size for a compiled regexp\n+#define RE_MAX_CODE_SIZE                32768\n+\n+// Maximum input size scanned by yr_re_exec\n+#define RE_SCAN_LIMIT                   4096\n+\n+// Maximum number of fibers\n+#define RE_MAX_FIBERS                   1024\n+\n+// Maximum number of levels in regexp's AST\n+#define RE_MAX_AST_LEVELS               2000\n+\n #endif""}<_**next**_>{""sha"": ""ebdb1fd8e8b31574dcea152a60c6bbe91353ed3c"", ""filename"": ""libyara/include/yara/re.h"", ""status"": ""modified"", ""additions"": 1, ""deletions"": 0, ""changes"": 1, ""blob_url"": ""https://github.com/VirusTotal/yara/blob/925bcf3c3b0a28b5b78e25d9efda5c0bf27ae699/libyara/include/yara/re.h"", ""raw_url"": ""https://github.com/VirusTotal/yara/raw/925bcf3c3b0a28b5b78e25d9efda5c0bf27ae699/libyara/include/yara/re.h"", ""contents_url"": ""https://api.github.com/repos/VirusTotal/yara/contents/libyara/include/yara/re.h?ref=925bcf3c3b0a28b5b78e25d9efda5c0bf27ae699"", ""patch"": ""@@ -136,6 +136,7 @@ struct RE_NODE\n struct RE_AST\n {\n   uint32_t flags;\n+  uint16_t levels;\n   RE_NODE* root_node;\n };\n ""}<_**next**_>{""sha"": ""959979ba288815450a8ca5e6b991519911e98b55"", ""filename"": ""libyara/re.c"", ""status"": ""modified"", ""additions"": 1, ""deletions"": 17, ""changes"": 18, ""blob_url"": ""https://github.com/VirusTotal/yara/blob/925bcf3c3b0a28b5b78e25d9efda5c0bf27ae699/libyara/re.c"", ""raw_url"": ""https://github.com/VirusTotal/yara/raw/925bcf3c3b0a28b5b78e25d9efda5c0bf27ae699/libyara/re.c"", ""contents_url"": ""https://api.github.com/repos/VirusTotal/yara/contents/libyara/re.c?ref=925bcf3c3b0a28b5b78e25d9efda5c0bf27ae699"", ""patch"": ""@@ -52,23 +52,6 @@ order to avoid confusion with operating system threads.\n #include <yara/re_lexer.h>\n #include <yara/hex_lexer.h>\n \n-// Maximum allowed split ID, also limiting the number of split instructions\n-// allowed in a regular expression. This number can't be increased\n-// over 255 without changing RE_SPLIT_ID_TYPE.\n-#define RE_MAX_SPLIT_ID     128\n-\n-// Maximum stack size for regexp evaluation\n-#define RE_MAX_STACK      1024\n-\n-// Maximum code size for a compiled regexp\n-#define RE_MAX_CODE_SIZE  32768\n-\n-// Maximum input size scanned by yr_re_exec\n-#define RE_SCAN_LIMIT     4096\n-\n-// Maximum number of fibers\n-#define RE_MAX_FIBERS     1024\n-\n \n #define EMIT_BACKWARDS                  0x01\n #define EMIT_DONT_SET_FORWARDS_CODE     0x02\n@@ -268,6 +251,7 @@ int yr_re_ast_create(\n     return ERROR_INSUFFICIENT_MEMORY;\n \n   (*re_ast)->flags = 0;\n+  (*re_ast)->levels = 0;\n   (*re_ast)->root_node = NULL;\n \n   return ERROR_SUCCESS;""}<_**next**_>{""sha"": ""51839f6f00a0b73ea33191076f115e7115a15720"", ""filename"": ""libyara/re_grammar.c"", ""status"": ""modified"", ""additions"": 92, ""deletions"": 78, ""changes"": 170, ""blob_url"": ""https://github.com/VirusTotal/yara/blob/925bcf3c3b0a28b5b78e25d9efda5c0bf27ae699/libyara/re_grammar.c"", ""raw_url"": ""https://github.com/VirusTotal/yara/raw/925bcf3c3b0a28b5b78e25d9efda5c0bf27ae699/libyara/re_grammar.c"", ""contents_url"": ""https://api.github.com/repos/VirusTotal/yara/contents/libyara/re_grammar.c?ref=925bcf3c3b0a28b5b78e25d9efda5c0bf27ae699"", ""patch"": ""@@ -88,6 +88,14 @@\n #define mark_as_not_fast_regexp() \\\n     ((RE_AST*) yyget_extra(yyscanner))->flags &= ~RE_FLAGS_FAST_REGEXP\n \n+#define incr_ast_levels() \\\n+    if (((RE_AST*) yyget_extra(yyscanner))->levels++ > RE_MAX_AST_LEVELS) \\\n+    { \\\n+      lex_env->last_error_code = ERROR_INVALID_REGULAR_EXPRESSION; \\\n+      YYABORT; \\\n+    }\n+\n+\n #define ERROR_IF(x, error) \\\n     if (x) \\\n     { \\\n@@ -102,7 +110,7 @@\n     } \\\n \n \n-#line 106 \""re_grammar.c\"" /* yacc.c:339  */\n+#line 114 \""re_grammar.c\"" /* yacc.c:339  */\n \n # ifndef YY_NULLPTR\n #  if defined __cplusplus && 201103L <= __cplusplus\n@@ -170,14 +178,14 @@ extern int re_yydebug;\n \n union YYSTYPE\n {\n-#line 73 \""re_grammar.y\"" /* yacc.c:355  */\n+#line 81 \""re_grammar.y\"" /* yacc.c:355  */\n \n   int integer;\n   uint32_t range;\n   RE_NODE* re_node;\n   uint8_t* class_vector;\n \n-#line 181 \""re_grammar.c\"" /* yacc.c:355  */\n+#line 189 \""re_grammar.c\"" /* yacc.c:355  */\n };\n \n typedef union YYSTYPE YYSTYPE;\n@@ -193,7 +201,7 @@ int re_yyparse (void *yyscanner, RE_LEX_ENVIRONMENT *lex_env);\n \n /* Copy the second part of user declarations.  */\n \n-#line 197 \""re_grammar.c\"" /* yacc.c:358  */\n+#line 205 \""re_grammar.c\"" /* yacc.c:358  */\n \n #ifdef short\n # undef short\n@@ -491,10 +499,10 @@ static const yytype_uint8 yytranslate[] =\n   /* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */\n static const yytype_uint16 yyrline[] =\n {\n-       0,   104,   104,   109,   113,   117,   128,   146,   150,   161,\n-     175,   191,   205,   221,   244,   268,   290,   313,   317,   323,\n-     329,   335,   344,   348,   354,   362,   368,   374,   380,   386,\n-     392,   398\n+       0,   112,   112,   117,   121,   125,   137,   156,   160,   173,\n+     187,   203,   217,   233,   256,   280,   302,   325,   329,   335,\n+     341,   347,   356,   362,   368,   376,   382,   388,   394,   400,\n+     406,   412\n };\n #endif\n \n@@ -1039,33 +1047,33 @@ yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, void *yyscanner, R\n   switch (yytype)\n     {\n           case 6: /* _CLASS_  */\n-#line 96 \""re_grammar.y\"" /* yacc.c:1257  */\n+#line 104 \""re_grammar.y\"" /* yacc.c:1257  */\n       { yr_free(((*yyvaluep).class_vector)); }\n-#line 1045 \""re_grammar.c\"" /* yacc.c:1257  */\n+#line 1053 \""re_grammar.c\"" /* yacc.c:1257  */\n         break;\n \n     case 26: /* alternative  */\n-#line 97 \""re_grammar.y\"" /* yacc.c:1257  */\n+#line 105 \""re_grammar.y\"" /* yacc.c:1257  */\n       { yr_re_node_destroy(((*yyvaluep).re_node)); }\n-#line 1051 \""re_grammar.c\"" /* yacc.c:1257  */\n+#line 1059 \""re_grammar.c\"" /* yacc.c:1257  */\n         break;\n \n     case 27: /* concatenation  */\n-#line 98 \""re_grammar.y\"" /* yacc.c:1257  */\n+#line 106 \""re_grammar.y\"" /* yacc.c:1257  */\n       { yr_re_node_destroy(((*yyvaluep).re_node)); }\n-#line 1057 \""re_grammar.c\"" /* yacc.c:1257  */\n+#line 1065 \""re_grammar.c\"" /* yacc.c:1257  */\n         break;\n \n     case 28: /* repeat  */\n-#line 99 \""re_grammar.y\"" /* yacc.c:1257  */\n+#line 107 \""re_grammar.y\"" /* yacc.c:1257  */\n       { yr_re_node_destroy(((*yyvaluep).re_node)); }\n-#line 1063 \""re_grammar.c\"" /* yacc.c:1257  */\n+#line 1071 \""re_grammar.c\"" /* yacc.c:1257  */\n         break;\n \n     case 29: /* single  */\n-#line 100 \""re_grammar.y\"" /* yacc.c:1257  */\n+#line 108 \""re_grammar.y\"" /* yacc.c:1257  */\n       { yr_re_node_destroy(((*yyvaluep).re_node)); }\n-#line 1069 \""re_grammar.c\"" /* yacc.c:1257  */\n+#line 1077 \""re_grammar.c\"" /* yacc.c:1257  */\n         break;\n \n \n@@ -1331,26 +1339,27 @@ YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);\n   switch (yyn)\n     {\n         case 2:\n-#line 105 \""re_grammar.y\"" /* yacc.c:1646  */\n+#line 113 \""re_grammar.y\"" /* yacc.c:1646  */\n     {\n         RE_AST* re_ast = yyget_extra(yyscanner);\n         re_ast->root_node = (yyvsp[0].re_node);\n       }\n-#line 1340 \""re_grammar.c\"" /* yacc.c:1646  */\n+#line 1348 \""re_grammar.c\"" /* yacc.c:1646  */\n     break;\n \n   case 4:\n-#line 114 \""re_grammar.y\"" /* yacc.c:1646  */\n+#line 122 \""re_grammar.y\"" /* yacc.c:1646  */\n     {\n         (yyval.re_node) = (yyvsp[0].re_node);\n       }\n-#line 1348 \""re_grammar.c\"" /* yacc.c:1646  */\n+#line 1356 \""re_grammar.c\"" /* yacc.c:1646  */\n     break;\n \n   case 5:\n-#line 118 \""re_grammar.y\"" /* yacc.c:1646  */\n+#line 126 \""re_grammar.y\"" /* yacc.c:1646  */\n     {\n         mark_as_not_fast_regexp();\n+        incr_ast_levels();\n \n         (yyval.re_node) = yr_re_node_create(RE_NODE_ALT, (yyvsp[-2].re_node), (yyvsp[0].re_node));\n \n@@ -1359,15 +1368,16 @@ YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);\n \n         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n       }\n-#line 1363 \""re_grammar.c\"" /* yacc.c:1646  */\n+#line 1372 \""re_grammar.c\"" /* yacc.c:1646  */\n     break;\n \n   case 6:\n-#line 129 \""re_grammar.y\"" /* yacc.c:1646  */\n+#line 138 \""re_grammar.y\"" /* yacc.c:1646  */\n     {\n         RE_NODE* node;\n \n         mark_as_not_fast_regexp();\n+        incr_ast_levels();\n \n         node = yr_re_node_create(RE_NODE_EMPTY, NULL, NULL);\n \n@@ -1378,31 +1388,33 @@ YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);\n \n         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n       }\n-#line 1382 \""re_grammar.c\"" /* yacc.c:1646  */\n+#line 1392 \""re_grammar.c\"" /* yacc.c:1646  */\n     break;\n \n   case 7:\n-#line 147 \""re_grammar.y\"" /* yacc.c:1646  */\n+#line 157 \""re_grammar.y\"" /* yacc.c:1646  */\n     {\n         (yyval.re_node) = (yyvsp[0].re_node);\n       }\n-#line 1390 \""re_grammar.c\"" /* yacc.c:1646  */\n+#line 1400 \""re_grammar.c\"" /* yacc.c:1646  */\n     break;\n \n   case 8:\n-#line 151 \""re_grammar.y\"" /* yacc.c:1646  */\n+#line 161 \""re_grammar.y\"" /* yacc.c:1646  */\n     {\n+        incr_ast_levels();\n+\n         (yyval.re_node) = yr_re_node_create(RE_NODE_CONCAT, (yyvsp[-1].re_node), (yyvsp[0].re_node));\n \n         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-1].re_node));\n         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[0].re_node));\n         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n       }\n-#line 1402 \""re_grammar.c\"" /* yacc.c:1646  */\n+#line 1414 \""re_grammar.c\"" /* yacc.c:1646  */\n     break;\n \n   case 9:\n-#line 162 \""re_grammar.y\"" /* yacc.c:1646  */\n+#line 174 \""re_grammar.y\"" /* yacc.c:1646  */\n     {\n         RE_AST* re_ast;\n \n@@ -1416,11 +1428,11 @@ YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);\n         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-1].re_node));\n         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n       }\n-#line 1420 \""re_grammar.c\"" /* yacc.c:1646  */\n+#line 1432 \""re_grammar.c\"" /* yacc.c:1646  */\n     break;\n \n   case 10:\n-#line 176 \""re_grammar.y\"" /* yacc.c:1646  */\n+#line 188 \""re_grammar.y\"" /* yacc.c:1646  */\n     {\n         RE_AST* re_ast;\n \n@@ -1436,11 +1448,11 @@ YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);\n \n         (yyval.re_node)->greedy = FALSE;\n       }\n-#line 1440 \""re_grammar.c\"" /* yacc.c:1646  */\n+#line 1452 \""re_grammar.c\"" /* yacc.c:1646  */\n     break;\n \n   case 11:\n-#line 192 \""re_grammar.y\"" /* yacc.c:1646  */\n+#line 204 \""re_grammar.y\"" /* yacc.c:1646  */\n     {\n         RE_AST* re_ast;\n \n@@ -1454,11 +1466,11 @@ YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);\n         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-1].re_node));\n         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n       }\n-#line 1458 \""re_grammar.c\"" /* yacc.c:1646  */\n+#line 1470 \""re_grammar.c\"" /* yacc.c:1646  */\n     break;\n \n   case 12:\n-#line 206 \""re_grammar.y\"" /* yacc.c:1646  */\n+#line 218 \""re_grammar.y\"" /* yacc.c:1646  */\n     {\n         RE_AST* re_ast;\n \n@@ -1474,11 +1486,11 @@ YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);\n \n         (yyval.re_node)->greedy = FALSE;\n       }\n-#line 1478 \""re_grammar.c\"" /* yacc.c:1646  */\n+#line 1490 \""re_grammar.c\"" /* yacc.c:1646  */\n     break;\n \n   case 13:\n-#line 222 \""re_grammar.y\"" /* yacc.c:1646  */\n+#line 234 \""re_grammar.y\"" /* yacc.c:1646  */\n     {\n         RE_AST* re_ast = yyget_extra(yyscanner);\n         re_ast->flags |= RE_FLAGS_GREEDY;\n@@ -1501,11 +1513,11 @@ YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);\n         (yyval.re_node)->start = 0;\n         (yyval.re_node)->end = 1;\n       }\n-#line 1505 \""re_grammar.c\"" /* yacc.c:1646  */\n+#line 1517 \""re_grammar.c\"" /* yacc.c:1646  */\n     break;\n \n   case 14:\n-#line 245 \""re_grammar.y\"" /* yacc.c:1646  */\n+#line 257 \""re_grammar.y\"" /* yacc.c:1646  */\n     {\n         RE_AST* re_ast = yyget_extra(yyscanner);\n         re_ast->flags |= RE_FLAGS_UNGREEDY;\n@@ -1529,11 +1541,11 @@ YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);\n         (yyval.re_node)->end = 1;\n         (yyval.re_node)->greedy = FALSE;\n       }\n-#line 1533 \""re_grammar.c\"" /* yacc.c:1646  */\n+#line 1545 \""re_grammar.c\"" /* yacc.c:1646  */\n     break;\n \n   case 15:\n-#line 269 \""re_grammar.y\"" /* yacc.c:1646  */\n+#line 281 \""re_grammar.y\"" /* yacc.c:1646  */\n     {\n         RE_AST* re_ast = yyget_extra(yyscanner);\n         re_ast->flags |= RE_FLAGS_GREEDY;\n@@ -1555,11 +1567,11 @@ YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);\n         (yyval.re_node)->start = (yyvsp[0].range) & 0xFFFF;;\n         (yyval.re_node)->end = (yyvsp[0].range) >> 16;;\n       }\n-#line 1559 \""re_grammar.c\"" /* yacc.c:1646  */\n+#line 1571 \""re_grammar.c\"" /* yacc.c:1646  */\n     break;\n \n   case 16:\n-#line 291 \""re_grammar.y\"" /* yacc.c:1646  */\n+#line 303 \""re_grammar.y\"" /* yacc.c:1646  */\n     {\n         RE_AST* re_ast = yyget_extra(yyscanner);\n         re_ast->flags |= RE_FLAGS_UNGREEDY;\n@@ -1582,161 +1594,163 @@ YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);\n         (yyval.re_node)->end = (yyvsp[-1].range) >> 16;;\n         (yyval.re_node)->greedy = FALSE;\n       }\n-#line 1586 \""re_grammar.c\"" /* yacc.c:1646  */\n+#line 1598 \""re_grammar.c\"" /* yacc.c:1646  */\n     break;\n \n   case 17:\n-#line 314 \""re_grammar.y\"" /* yacc.c:1646  */\n+#line 326 \""re_grammar.y\"" /* yacc.c:1646  */\n     {\n         (yyval.re_node) = (yyvsp[0].re_node);\n       }\n-#line 1594 \""re_grammar.c\"" /* yacc.c:1646  */\n+#line 1606 \""re_grammar.c\"" /* yacc.c:1646  */\n     break;\n \n   case 18:\n-#line 318 \""re_grammar.y\"" /* yacc.c:1646  */\n+#line 330 \""re_grammar.y\"" /* yacc.c:1646  */\n     {\n         (yyval.re_node) = yr_re_node_create(RE_NODE_WORD_BOUNDARY, NULL, NULL);\n \n         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n       }\n-#line 1604 \""re_grammar.c\"" /* yacc.c:1646  */\n+#line 1616 \""re_grammar.c\"" /* yacc.c:1646  */\n     break;\n \n   case 19:\n-#line 324 \""re_grammar.y\"" /* yacc.c:1646  */\n+#line 336 \""re_grammar.y\"" /* yacc.c:1646  */\n     {\n         (yyval.re_node) = yr_re_node_create(RE_NODE_NON_WORD_BOUNDARY, NULL, NULL);\n \n         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n       }\n-#line 1614 \""re_grammar.c\"" /* yacc.c:1646  */\n+#line 1626 \""re_grammar.c\"" /* yacc.c:1646  */\n     break;\n \n   case 20:\n-#line 330 \""re_grammar.y\"" /* yacc.c:1646  */\n+#line 342 \""re_grammar.y\"" /* yacc.c:1646  */\n     {\n         (yyval.re_node) = yr_re_node_create(RE_NODE_ANCHOR_START, NULL, NULL);\n \n         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n       }\n-#line 1624 \""re_grammar.c\"" /* yacc.c:1646  */\n+#line 1636 \""re_grammar.c\"" /* yacc.c:1646  */\n     break;\n \n   case 21:\n-#line 336 \""re_grammar.y\"" /* yacc.c:1646  */\n+#line 348 \""re_grammar.y\"" /* yacc.c:1646  */\n     {\n         (yyval.re_node) = yr_re_node_create(RE_NODE_ANCHOR_END, NULL, NULL);\n \n         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n       }\n-#line 1634 \""re_grammar.c\"" /* yacc.c:1646  */\n+#line 1646 \""re_grammar.c\"" /* yacc.c:1646  */\n     break;\n \n   case 22:\n-#line 345 \""re_grammar.y\"" /* yacc.c:1646  */\n+#line 357 \""re_grammar.y\"" /* yacc.c:1646  */\n     {\n+        incr_ast_levels();\n+\n         (yyval.re_node) = (yyvsp[-1].re_node);\n       }\n-#line 1642 \""re_grammar.c\"" /* yacc.c:1646  */\n+#line 1656 \""re_grammar.c\"" /* yacc.c:1646  */\n     break;\n \n   case 23:\n-#line 349 \""re_grammar.y\"" /* yacc.c:1646  */\n+#line 363 \""re_grammar.y\"" /* yacc.c:1646  */\n     {\n         (yyval.re_node) = yr_re_node_create(RE_NODE_ANY, NULL, NULL);\n \n         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n       }\n-#line 1652 \""re_grammar.c\"" /* yacc.c:1646  */\n+#line 1666 \""re_grammar.c\"" /* yacc.c:1646  */\n     break;\n \n   case 24:\n-#line 355 \""re_grammar.y\"" /* yacc.c:1646  */\n+#line 369 \""re_grammar.y\"" /* yacc.c:1646  */\n     {\n         (yyval.re_node) = yr_re_node_create(RE_NODE_LITERAL, NULL, NULL);\n \n         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n \n         (yyval.re_node)->value = (yyvsp[0].integer);\n       }\n-#line 1664 \""re_grammar.c\"" /* yacc.c:1646  */\n+#line 1678 \""re_grammar.c\"" /* yacc.c:1646  */\n     break;\n \n   case 25:\n-#line 363 \""re_grammar.y\"" /* yacc.c:1646  */\n+#line 377 \""re_grammar.y\"" /* yacc.c:1646  */\n     {\n         (yyval.re_node) = yr_re_node_create(RE_NODE_WORD_CHAR, NULL, NULL);\n \n         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n       }\n-#line 1674 \""re_grammar.c\"" /* yacc.c:1646  */\n+#line 1688 \""re_grammar.c\"" /* yacc.c:1646  */\n     break;\n \n   case 26:\n-#line 369 \""re_grammar.y\"" /* yacc.c:1646  */\n+#line 383 \""re_grammar.y\"" /* yacc.c:1646  */\n     {\n         (yyval.re_node) = yr_re_node_create(RE_NODE_NON_WORD_CHAR, NULL, NULL);\n \n         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n       }\n-#line 1684 \""re_grammar.c\"" /* yacc.c:1646  */\n+#line 1698 \""re_grammar.c\"" /* yacc.c:1646  */\n     break;\n \n   case 27:\n-#line 375 \""re_grammar.y\"" /* yacc.c:1646  */\n+#line 389 \""re_grammar.y\"" /* yacc.c:1646  */\n     {\n         (yyval.re_node) = yr_re_node_create(RE_NODE_SPACE, NULL, NULL);\n \n         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n       }\n-#line 1694 \""re_grammar.c\"" /* yacc.c:1646  */\n+#line 1708 \""re_grammar.c\"" /* yacc.c:1646  */\n     break;\n \n   case 28:\n-#line 381 \""re_grammar.y\"" /* yacc.c:1646  */\n+#line 395 \""re_grammar.y\"" /* yacc.c:1646  */\n     {\n          (yyval.re_node) = yr_re_node_create(RE_NODE_NON_SPACE, NULL, NULL);\n \n          ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n       }\n-#line 1704 \""re_grammar.c\"" /* yacc.c:1646  */\n+#line 1718 \""re_grammar.c\"" /* yacc.c:1646  */\n     break;\n \n   case 29:\n-#line 387 \""re_grammar.y\"" /* yacc.c:1646  */\n+#line 401 \""re_grammar.y\"" /* yacc.c:1646  */\n     {\n         (yyval.re_node) = yr_re_node_create(RE_NODE_DIGIT, NULL, NULL);\n \n         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n       }\n-#line 1714 \""re_grammar.c\"" /* yacc.c:1646  */\n+#line 1728 \""re_grammar.c\"" /* yacc.c:1646  */\n     break;\n \n   case 30:\n-#line 393 \""re_grammar.y\"" /* yacc.c:1646  */\n+#line 407 \""re_grammar.y\"" /* yacc.c:1646  */\n     {\n         (yyval.re_node) = yr_re_node_create(RE_NODE_NON_DIGIT, NULL, NULL);\n \n         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n       }\n-#line 1724 \""re_grammar.c\"" /* yacc.c:1646  */\n+#line 1738 \""re_grammar.c\"" /* yacc.c:1646  */\n     break;\n \n   case 31:\n-#line 399 \""re_grammar.y\"" /* yacc.c:1646  */\n+#line 413 \""re_grammar.y\"" /* yacc.c:1646  */\n     {\n         (yyval.re_node) = yr_re_node_create(RE_NODE_CLASS, NULL, NULL);\n \n         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n \n         (yyval.re_node)->class_vector = (yyvsp[0].class_vector);\n       }\n-#line 1736 \""re_grammar.c\"" /* yacc.c:1646  */\n+#line 1750 \""re_grammar.c\"" /* yacc.c:1646  */\n     break;\n \n \n-#line 1740 \""re_grammar.c\"" /* yacc.c:1646  */\n+#line 1754 \""re_grammar.c\"" /* yacc.c:1646  */\n       default: break;\n     }\n   /* User semantic actions sometimes alter yychar, and that requires\n@@ -1964,5 +1978,5 @@ YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);\n #endif\n   return yyresult;\n }\n-#line 407 \""re_grammar.y\"" /* yacc.c:1906  */\n+#line 421 \""re_grammar.y\"" /* yacc.c:1906  */\n ""}<_**next**_>{""sha"": ""8ba1c56dec721cdf3fc4c84cfbb00a224e790a2c"", ""filename"": ""libyara/re_grammar.h"", ""status"": ""modified"", ""additions"": 1, ""deletions"": 1, ""changes"": 2, ""blob_url"": ""https://github.com/VirusTotal/yara/blob/925bcf3c3b0a28b5b78e25d9efda5c0bf27ae699/libyara/re_grammar.h"", ""raw_url"": ""https://github.com/VirusTotal/yara/raw/925bcf3c3b0a28b5b78e25d9efda5c0bf27ae699/libyara/re_grammar.h"", ""contents_url"": ""https://api.github.com/repos/VirusTotal/yara/contents/libyara/re_grammar.h?ref=925bcf3c3b0a28b5b78e25d9efda5c0bf27ae699"", ""patch"": ""@@ -78,7 +78,7 @@ extern int re_yydebug;\n \n union YYSTYPE\n {\n-#line 73 \""re_grammar.y\"" /* yacc.c:1909  */\n+#line 81 \""re_grammar.y\"" /* yacc.c:1909  */\n \n   int integer;\n   uint32_t range;""}<_**next**_>{""sha"": ""9e88d24e85306ee241cab15c9296e8142a49d1ae"", ""filename"": ""libyara/re_grammar.y"", ""status"": ""modified"", ""additions"": 14, ""deletions"": 0, ""changes"": 14, ""blob_url"": ""https://github.com/VirusTotal/yara/blob/925bcf3c3b0a28b5b78e25d9efda5c0bf27ae699/libyara/re_grammar.y"", ""raw_url"": ""https://github.com/VirusTotal/yara/raw/925bcf3c3b0a28b5b78e25d9efda5c0bf27ae699/libyara/re_grammar.y"", ""contents_url"": ""https://api.github.com/repos/VirusTotal/yara/contents/libyara/re_grammar.y?ref=925bcf3c3b0a28b5b78e25d9efda5c0bf27ae699"", ""patch"": ""@@ -46,6 +46,14 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n #define mark_as_not_fast_regexp() \\\n     ((RE_AST*) yyget_extra(yyscanner))->flags &= ~RE_FLAGS_FAST_REGEXP\n \n+#define incr_ast_levels() \\\n+    if (((RE_AST*) yyget_extra(yyscanner))->levels++ > RE_MAX_AST_LEVELS) \\\n+    { \\\n+      lex_env->last_error_code = ERROR_INVALID_REGULAR_EXPRESSION; \\\n+      YYABORT; \\\n+    }\n+\n+\n #define ERROR_IF(x, error) \\\n     if (x) \\\n     { \\\n@@ -117,6 +125,7 @@ alternative\n     | alternative '|' concatenation\n       {\n         mark_as_not_fast_regexp();\n+        incr_ast_levels();\n \n         $$ = yr_re_node_create(RE_NODE_ALT, $1, $3);\n \n@@ -130,6 +139,7 @@ alternative\n         RE_NODE* node;\n \n         mark_as_not_fast_regexp();\n+        incr_ast_levels();\n \n         node = yr_re_node_create(RE_NODE_EMPTY, NULL, NULL);\n \n@@ -149,6 +159,8 @@ concatenation\n       }\n     | concatenation repeat\n       {\n+        incr_ast_levels();\n+\n         $$ = yr_re_node_create(RE_NODE_CONCAT, $1, $2);\n \n         DESTROY_NODE_IF($$ == NULL, $1);\n@@ -343,6 +355,8 @@ repeat\n single\n     : '(' alternative ')'\n       {\n+        incr_ast_levels();\n+\n         $$ = $2;\n       }\n     | '.'""}","yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, void *yyscanner, RE_LEX_ENVIRONMENT *lex_env)
{
  YYUSE (yyvaluep);
  YYUSE (yyscanner);
  YYUSE (lex_env);
  if (!yymsg)
    yymsg = ""Deleting"";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
   switch (yytype)
     {
           case 6: /* _CLASS_  */
#line 104 ""re_grammar.y"" /* yacc.c:1257  */
       { yr_free(((*yyvaluep).class_vector)); }
#line 1053 ""re_grammar.c"" /* yacc.c:1257  */
         break;
 
     case 26: /* alternative  */
#line 105 ""re_grammar.y"" /* yacc.c:1257  */
       { yr_re_node_destroy(((*yyvaluep).re_node)); }
#line 1059 ""re_grammar.c"" /* yacc.c:1257  */
         break;
 
     case 27: /* concatenation  */
#line 106 ""re_grammar.y"" /* yacc.c:1257  */
       { yr_re_node_destroy(((*yyvaluep).re_node)); }
#line 1065 ""re_grammar.c"" /* yacc.c:1257  */
         break;
 
     case 28: /* repeat  */
#line 107 ""re_grammar.y"" /* yacc.c:1257  */
       { yr_re_node_destroy(((*yyvaluep).re_node)); }
#line 1071 ""re_grammar.c"" /* yacc.c:1257  */
         break;
 
     case 29: /* single  */
#line 108 ""re_grammar.y"" /* yacc.c:1257  */
       { yr_re_node_destroy(((*yyvaluep).re_node)); }
#line 1077 ""re_grammar.c"" /* yacc.c:1257  */
         break;
 
 
      default:
        break;
    }
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}
","yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, void *yyscanner, RE_LEX_ENVIRONMENT *lex_env)
{
  YYUSE (yyvaluep);
  YYUSE (yyscanner);
  YYUSE (lex_env);
  if (!yymsg)
    yymsg = ""Deleting"";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
   switch (yytype)
     {
           case 6: /* _CLASS_  */
#line 96 ""re_grammar.y"" /* yacc.c:1257  */
       { yr_free(((*yyvaluep).class_vector)); }
#line 1045 ""re_grammar.c"" /* yacc.c:1257  */
         break;
 
     case 26: /* alternative  */
#line 97 ""re_grammar.y"" /* yacc.c:1257  */
       { yr_re_node_destroy(((*yyvaluep).re_node)); }
#line 1051 ""re_grammar.c"" /* yacc.c:1257  */
         break;
 
     case 27: /* concatenation  */
#line 98 ""re_grammar.y"" /* yacc.c:1257  */
       { yr_re_node_destroy(((*yyvaluep).re_node)); }
#line 1057 ""re_grammar.c"" /* yacc.c:1257  */
         break;
 
     case 28: /* repeat  */
#line 99 ""re_grammar.y"" /* yacc.c:1257  */
       { yr_re_node_destroy(((*yyvaluep).re_node)); }
#line 1063 ""re_grammar.c"" /* yacc.c:1257  */
         break;
 
     case 29: /* single  */
#line 100 ""re_grammar.y"" /* yacc.c:1257  */
       { yr_re_node_destroy(((*yyvaluep).re_node)); }
#line 1069 ""re_grammar.c"" /* yacc.c:1257  */
         break;
 
 
      default:
        break;
    }
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}
",C,"#line 104 ""re_grammar.y"" /* yacc.c:1257  */
#line 1053 ""re_grammar.c"" /* yacc.c:1257  */
#line 105 ""re_grammar.y"" /* yacc.c:1257  */
#line 1059 ""re_grammar.c"" /* yacc.c:1257  */
#line 106 ""re_grammar.y"" /* yacc.c:1257  */
#line 1065 ""re_grammar.c"" /* yacc.c:1257  */
#line 107 ""re_grammar.y"" /* yacc.c:1257  */
#line 1071 ""re_grammar.c"" /* yacc.c:1257  */
#line 108 ""re_grammar.y"" /* yacc.c:1257  */
#line 1077 ""re_grammar.c"" /* yacc.c:1257  */
","#line 96 ""re_grammar.y"" /* yacc.c:1257  */
#line 1045 ""re_grammar.c"" /* yacc.c:1257  */
#line 97 ""re_grammar.y"" /* yacc.c:1257  */
#line 1051 ""re_grammar.c"" /* yacc.c:1257  */
#line 98 ""re_grammar.y"" /* yacc.c:1257  */
#line 1057 ""re_grammar.c"" /* yacc.c:1257  */
#line 99 ""re_grammar.y"" /* yacc.c:1257  */
#line 1063 ""re_grammar.c"" /* yacc.c:1257  */
#line 100 ""re_grammar.y"" /* yacc.c:1257  */
#line 1069 ""re_grammar.c"" /* yacc.c:1257  */
",,"@@ -88,6 +88,14 @@
 #define mark_as_not_fast_regexp() \
     ((RE_AST*) yyget_extra(yyscanner))->flags &= ~RE_FLAGS_FAST_REGEXP
 
+#define incr_ast_levels() \
+    if (((RE_AST*) yyget_extra(yyscanner))->levels++ > RE_MAX_AST_LEVELS) \
+    { \
+      lex_env->last_error_code = ERROR_INVALID_REGULAR_EXPRESSION; \
+      YYABORT; \
+    }
+
+
 #define ERROR_IF(x, error) \
     if (x) \
     { \
@@ -102,7 +110,7 @@
     } \
 
 
-#line 106 ""re_grammar.c"" /* yacc.c:339  */
+#line 114 ""re_grammar.c"" /* yacc.c:339  */
 
 # ifndef YY_NULLPTR
 #  if defined __cplusplus && 201103L <= __cplusplus
@@ -170,14 +178,14 @@ extern int re_yydebug;
 
 union YYSTYPE
 {
-#line 73 ""re_grammar.y"" /* yacc.c:355  */
+#line 81 ""re_grammar.y"" /* yacc.c:355  */
 
   int integer;
   uint32_t range;
   RE_NODE* re_node;
   uint8_t* class_vector;
 
-#line 181 ""re_grammar.c"" /* yacc.c:355  */
+#line 189 ""re_grammar.c"" /* yacc.c:355  */
 };
 
 typedef union YYSTYPE YYSTYPE;
@@ -193,7 +201,7 @@ int re_yyparse (void *yyscanner, RE_LEX_ENVIRONMENT *lex_env);
 
 /* Copy the second part of user declarations.  */
 
-#line 197 ""re_grammar.c"" /* yacc.c:358  */
+#line 205 ""re_grammar.c"" /* yacc.c:358  */
 
 #ifdef short
 # undef short
@@ -491,10 +499,10 @@ static const yytype_uint8 yytranslate[] =
   /* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
 static const yytype_uint16 yyrline[] =
 {
-       0,   104,   104,   109,   113,   117,   128,   146,   150,   161,
-     175,   191,   205,   221,   244,   268,   290,   313,   317,   323,
-     329,   335,   344,   348,   354,   362,   368,   374,   380,   386,
-     392,   398
+       0,   112,   112,   117,   121,   125,   137,   156,   160,   173,
+     187,   203,   217,   233,   256,   280,   302,   325,   329,   335,
+     341,   347,   356,   362,   368,   376,   382,   388,   394,   400,
+     406,   412
 };
 #endif
 
@@ -1039,33 +1047,33 @@ yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, void *yyscanner, R
   switch (yytype)
     {
           case 6: /* _CLASS_  */
-#line 96 ""re_grammar.y"" /* yacc.c:1257  */
+#line 104 ""re_grammar.y"" /* yacc.c:1257  */
       { yr_free(((*yyvaluep).class_vector)); }
-#line 1045 ""re_grammar.c"" /* yacc.c:1257  */
+#line 1053 ""re_grammar.c"" /* yacc.c:1257  */
         break;
 
     case 26: /* alternative  */
-#line 97 ""re_grammar.y"" /* yacc.c:1257  */
+#line 105 ""re_grammar.y"" /* yacc.c:1257  */
       { yr_re_node_destroy(((*yyvaluep).re_node)); }
-#line 1051 ""re_grammar.c"" /* yacc.c:1257  */
+#line 1059 ""re_grammar.c"" /* yacc.c:1257  */
         break;
 
     case 27: /* concatenation  */
-#line 98 ""re_grammar.y"" /* yacc.c:1257  */
+#line 106 ""re_grammar.y"" /* yacc.c:1257  */
       { yr_re_node_destroy(((*yyvaluep).re_node)); }
-#line 1057 ""re_grammar.c"" /* yacc.c:1257  */
+#line 1065 ""re_grammar.c"" /* yacc.c:1257  */
         break;
 
     case 28: /* repeat  */
-#line 99 ""re_grammar.y"" /* yacc.c:1257  */
+#line 107 ""re_grammar.y"" /* yacc.c:1257  */
       { yr_re_node_destroy(((*yyvaluep).re_node)); }
-#line 1063 ""re_grammar.c"" /* yacc.c:1257  */
+#line 1071 ""re_grammar.c"" /* yacc.c:1257  */
         break;
 
     case 29: /* single  */
-#line 100 ""re_grammar.y"" /* yacc.c:1257  */
+#line 108 ""re_grammar.y"" /* yacc.c:1257  */
       { yr_re_node_destroy(((*yyvaluep).re_node)); }
-#line 1069 ""re_grammar.c"" /* yacc.c:1257  */
+#line 1077 ""re_grammar.c"" /* yacc.c:1257  */
         break;
 
 
@@ -1331,26 +1339,27 @@ YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);
   switch (yyn)
     {
         case 2:
-#line 105 ""re_grammar.y"" /* yacc.c:1646  */
+#line 113 ""re_grammar.y"" /* yacc.c:1646  */
     {
         RE_AST* re_ast = yyget_extra(yyscanner);
         re_ast->root_node = (yyvsp[0].re_node);
       }
-#line 1340 ""re_grammar.c"" /* yacc.c:1646  */
+#line 1348 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 4:
-#line 114 ""re_grammar.y"" /* yacc.c:1646  */
+#line 122 ""re_grammar.y"" /* yacc.c:1646  */
     {
         (yyval.re_node) = (yyvsp[0].re_node);
       }
-#line 1348 ""re_grammar.c"" /* yacc.c:1646  */
+#line 1356 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 5:
-#line 118 ""re_grammar.y"" /* yacc.c:1646  */
+#line 126 ""re_grammar.y"" /* yacc.c:1646  */
     {
         mark_as_not_fast_regexp();
+        incr_ast_levels();
 
         (yyval.re_node) = yr_re_node_create(RE_NODE_ALT, (yyvsp[-2].re_node), (yyvsp[0].re_node));
 
@@ -1359,15 +1368,16 @@ YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);
 
         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
       }
-#line 1363 ""re_grammar.c"" /* yacc.c:1646  */
+#line 1372 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 6:
-#line 129 ""re_grammar.y"" /* yacc.c:1646  */
+#line 138 ""re_grammar.y"" /* yacc.c:1646  */
     {
         RE_NODE* node;
 
         mark_as_not_fast_regexp();
+        incr_ast_levels();
 
         node = yr_re_node_create(RE_NODE_EMPTY, NULL, NULL);
 
@@ -1378,31 +1388,33 @@ YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);
 
         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
       }
-#line 1382 ""re_grammar.c"" /* yacc.c:1646  */
+#line 1392 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 7:
-#line 147 ""re_grammar.y"" /* yacc.c:1646  */
+#line 157 ""re_grammar.y"" /* yacc.c:1646  */
     {
         (yyval.re_node) = (yyvsp[0].re_node);
       }
-#line 1390 ""re_grammar.c"" /* yacc.c:1646  */
+#line 1400 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 8:
-#line 151 ""re_grammar.y"" /* yacc.c:1646  */
+#line 161 ""re_grammar.y"" /* yacc.c:1646  */
     {
+        incr_ast_levels();
+
         (yyval.re_node) = yr_re_node_create(RE_NODE_CONCAT, (yyvsp[-1].re_node), (yyvsp[0].re_node));
 
         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-1].re_node));
         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[0].re_node));
         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
       }
-#line 1402 ""re_grammar.c"" /* yacc.c:1646  */
+#line 1414 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 9:
-#line 162 ""re_grammar.y"" /* yacc.c:1646  */
+#line 174 ""re_grammar.y"" /* yacc.c:1646  */
     {
         RE_AST* re_ast;
 
@@ -1416,11 +1428,11 @@ YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);
         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-1].re_node));
         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
       }
-#line 1420 ""re_grammar.c"" /* yacc.c:1646  */
+#line 1432 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 10:
-#line 176 ""re_grammar.y"" /* yacc.c:1646  */
+#line 188 ""re_grammar.y"" /* yacc.c:1646  */
     {
         RE_AST* re_ast;
 
@@ -1436,11 +1448,11 @@ YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);
 
         (yyval.re_node)->greedy = FALSE;
       }
-#line 1440 ""re_grammar.c"" /* yacc.c:1646  */
+#line 1452 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 11:
-#line 192 ""re_grammar.y"" /* yacc.c:1646  */
+#line 204 ""re_grammar.y"" /* yacc.c:1646  */
     {
         RE_AST* re_ast;
 
@@ -1454,11 +1466,11 @@ YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);
         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-1].re_node));
         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
       }
-#line 1458 ""re_grammar.c"" /* yacc.c:1646  */
+#line 1470 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 12:
-#line 206 ""re_grammar.y"" /* yacc.c:1646  */
+#line 218 ""re_grammar.y"" /* yacc.c:1646  */
     {
         RE_AST* re_ast;
 
@@ -1474,11 +1486,11 @@ YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);
 
         (yyval.re_node)->greedy = FALSE;
       }
-#line 1478 ""re_grammar.c"" /* yacc.c:1646  */
+#line 1490 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 13:
-#line 222 ""re_grammar.y"" /* yacc.c:1646  */
+#line 234 ""re_grammar.y"" /* yacc.c:1646  */
     {
         RE_AST* re_ast = yyget_extra(yyscanner);
         re_ast->flags |= RE_FLAGS_GREEDY;
@@ -1501,11 +1513,11 @@ YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);
         (yyval.re_node)->start = 0;
         (yyval.re_node)->end = 1;
       }
-#line 1505 ""re_grammar.c"" /* yacc.c:1646  */
+#line 1517 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 14:
-#line 245 ""re_grammar.y"" /* yacc.c:1646  */
+#line 257 ""re_grammar.y"" /* yacc.c:1646  */
     {
         RE_AST* re_ast = yyget_extra(yyscanner);
         re_ast->flags |= RE_FLAGS_UNGREEDY;
@@ -1529,11 +1541,11 @@ YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);
         (yyval.re_node)->end = 1;
         (yyval.re_node)->greedy = FALSE;
       }
-#line 1533 ""re_grammar.c"" /* yacc.c:1646  */
+#line 1545 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 15:
-#line 269 ""re_grammar.y"" /* yacc.c:1646  */
+#line 281 ""re_grammar.y"" /* yacc.c:1646  */
     {
         RE_AST* re_ast = yyget_extra(yyscanner);
         re_ast->flags |= RE_FLAGS_GREEDY;
@@ -1555,11 +1567,11 @@ YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);
         (yyval.re_node)->start = (yyvsp[0].range) & 0xFFFF;;
         (yyval.re_node)->end = (yyvsp[0].range) >> 16;;
       }
-#line 1559 ""re_grammar.c"" /* yacc.c:1646  */
+#line 1571 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 16:
-#line 291 ""re_grammar.y"" /* yacc.c:1646  */
+#line 303 ""re_grammar.y"" /* yacc.c:1646  */
     {
         RE_AST* re_ast = yyget_extra(yyscanner);
         re_ast->flags |= RE_FLAGS_UNGREEDY;
@@ -1582,161 +1594,163 @@ YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);
         (yyval.re_node)->end = (yyvsp[-1].range) >> 16;;
         (yyval.re_node)->greedy = FALSE;
       }
-#line 1586 ""re_grammar.c"" /* yacc.c:1646  */
+#line 1598 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 17:
-#line 314 ""re_grammar.y"" /* yacc.c:1646  */
+#line 326 ""re_grammar.y"" /* yacc.c:1646  */
     {
         (yyval.re_node) = (yyvsp[0].re_node);
       }
-#line 1594 ""re_grammar.c"" /* yacc.c:1646  */
+#line 1606 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 18:
-#line 318 ""re_grammar.y"" /* yacc.c:1646  */
+#line 330 ""re_grammar.y"" /* yacc.c:1646  */
     {
         (yyval.re_node) = yr_re_node_create(RE_NODE_WORD_BOUNDARY, NULL, NULL);
 
         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
       }
-#line 1604 ""re_grammar.c"" /* yacc.c:1646  */
+#line 1616 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 19:
-#line 324 ""re_grammar.y"" /* yacc.c:1646  */
+#line 336 ""re_grammar.y"" /* yacc.c:1646  */
     {
         (yyval.re_node) = yr_re_node_create(RE_NODE_NON_WORD_BOUNDARY, NULL, NULL);
 
         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
       }
-#line 1614 ""re_grammar.c"" /* yacc.c:1646  */
+#line 1626 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 20:
-#line 330 ""re_grammar.y"" /* yacc.c:1646  */
+#line 342 ""re_grammar.y"" /* yacc.c:1646  */
     {
         (yyval.re_node) = yr_re_node_create(RE_NODE_ANCHOR_START, NULL, NULL);
 
         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
       }
-#line 1624 ""re_grammar.c"" /* yacc.c:1646  */
+#line 1636 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 21:
-#line 336 ""re_grammar.y"" /* yacc.c:1646  */
+#line 348 ""re_grammar.y"" /* yacc.c:1646  */
     {
         (yyval.re_node) = yr_re_node_create(RE_NODE_ANCHOR_END, NULL, NULL);
 
         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
       }
-#line 1634 ""re_grammar.c"" /* yacc.c:1646  */
+#line 1646 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 22:
-#line 345 ""re_grammar.y"" /* yacc.c:1646  */
+#line 357 ""re_grammar.y"" /* yacc.c:1646  */
     {
+        incr_ast_levels();
+
         (yyval.re_node) = (yyvsp[-1].re_node);
       }
-#line 1642 ""re_grammar.c"" /* yacc.c:1646  */
+#line 1656 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 23:
-#line 349 ""re_grammar.y"" /* yacc.c:1646  */
+#line 363 ""re_grammar.y"" /* yacc.c:1646  */
     {
         (yyval.re_node) = yr_re_node_create(RE_NODE_ANY, NULL, NULL);
 
         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
       }
-#line 1652 ""re_grammar.c"" /* yacc.c:1646  */
+#line 1666 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 24:
-#line 355 ""re_grammar.y"" /* yacc.c:1646  */
+#line 369 ""re_grammar.y"" /* yacc.c:1646  */
     {
         (yyval.re_node) = yr_re_node_create(RE_NODE_LITERAL, NULL, NULL);
 
         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
 
         (yyval.re_node)->value = (yyvsp[0].integer);
       }
-#line 1664 ""re_grammar.c"" /* yacc.c:1646  */
+#line 1678 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 25:
-#line 363 ""re_grammar.y"" /* yacc.c:1646  */
+#line 377 ""re_grammar.y"" /* yacc.c:1646  */
     {
         (yyval.re_node) = yr_re_node_create(RE_NODE_WORD_CHAR, NULL, NULL);
 
         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
       }
-#line 1674 ""re_grammar.c"" /* yacc.c:1646  */
+#line 1688 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 26:
-#line 369 ""re_grammar.y"" /* yacc.c:1646  */
+#line 383 ""re_grammar.y"" /* yacc.c:1646  */
     {
         (yyval.re_node) = yr_re_node_create(RE_NODE_NON_WORD_CHAR, NULL, NULL);
 
         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
       }
-#line 1684 ""re_grammar.c"" /* yacc.c:1646  */
+#line 1698 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 27:
-#line 375 ""re_grammar.y"" /* yacc.c:1646  */
+#line 389 ""re_grammar.y"" /* yacc.c:1646  */
     {
         (yyval.re_node) = yr_re_node_create(RE_NODE_SPACE, NULL, NULL);
 
         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
       }
-#line 1694 ""re_grammar.c"" /* yacc.c:1646  */
+#line 1708 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 28:
-#line 381 ""re_grammar.y"" /* yacc.c:1646  */
+#line 395 ""re_grammar.y"" /* yacc.c:1646  */
     {
          (yyval.re_node) = yr_re_node_create(RE_NODE_NON_SPACE, NULL, NULL);
 
          ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
       }
-#line 1704 ""re_grammar.c"" /* yacc.c:1646  */
+#line 1718 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 29:
-#line 387 ""re_grammar.y"" /* yacc.c:1646  */
+#line 401 ""re_grammar.y"" /* yacc.c:1646  */
     {
         (yyval.re_node) = yr_re_node_create(RE_NODE_DIGIT, NULL, NULL);
 
         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
       }
-#line 1714 ""re_grammar.c"" /* yacc.c:1646  */
+#line 1728 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 30:
-#line 393 ""re_grammar.y"" /* yacc.c:1646  */
+#line 407 ""re_grammar.y"" /* yacc.c:1646  */
     {
         (yyval.re_node) = yr_re_node_create(RE_NODE_NON_DIGIT, NULL, NULL);
 
         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
       }
-#line 1724 ""re_grammar.c"" /* yacc.c:1646  */
+#line 1738 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 31:
-#line 399 ""re_grammar.y"" /* yacc.c:1646  */
+#line 413 ""re_grammar.y"" /* yacc.c:1646  */
     {
         (yyval.re_node) = yr_re_node_create(RE_NODE_CLASS, NULL, NULL);
 
         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
 
         (yyval.re_node)->class_vector = (yyvsp[0].class_vector);
       }
-#line 1736 ""re_grammar.c"" /* yacc.c:1646  */
+#line 1750 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
 
-#line 1740 ""re_grammar.c"" /* yacc.c:1646  */
+#line 1754 ""re_grammar.c"" /* yacc.c:1646  */
       default: break;
     }
   /* User semantic actions sometimes alter yychar, and that requires
@@ -1964,5 +1978,5 @@ YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);
 #endif
   return yyresult;
 }
-#line 407 ""re_grammar.y"" /* yacc.c:1906  */
+#line 421 ""re_grammar.y"" /* yacc.c:1906  */
 ",yara,925bcf3c3b0a28b5b78e25d9efda5c0bf27ae699,aa871746d89010ea96272344d993675e982fbe52,1,"yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, void *yyscanner, RE_LEX_ENVIRONMENT *lex_env)
{
  YYUSE (yyvaluep);
  YYUSE (yyscanner);
  YYUSE (lex_env);
  if (!yymsg)
    yymsg = ""Deleting"";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
   switch (yytype)
     {
           case 6: /* _CLASS_  */
//flaw_line_below:
#line 96 ""re_grammar.y"" /* yacc.c:1257  */
//fix_flaw_line_below:
//#line 104 ""re_grammar.y"" /* yacc.c:1257  */
       { yr_free(((*yyvaluep).class_vector)); }
//flaw_line_below:
#line 1045 ""re_grammar.c"" /* yacc.c:1257  */
//fix_flaw_line_below:
//#line 1053 ""re_grammar.c"" /* yacc.c:1257  */
         break;
 
     case 26: /* alternative  */
//flaw_line_below:
#line 97 ""re_grammar.y"" /* yacc.c:1257  */
//fix_flaw_line_below:
//#line 105 ""re_grammar.y"" /* yacc.c:1257  */
       { yr_re_node_destroy(((*yyvaluep).re_node)); }
//flaw_line_below:
#line 1051 ""re_grammar.c"" /* yacc.c:1257  */
//fix_flaw_line_below:
//#line 1059 ""re_grammar.c"" /* yacc.c:1257  */
         break;
 
     case 27: /* concatenation  */
//flaw_line_below:
#line 98 ""re_grammar.y"" /* yacc.c:1257  */
//fix_flaw_line_below:
//#line 106 ""re_grammar.y"" /* yacc.c:1257  */
       { yr_re_node_destroy(((*yyvaluep).re_node)); }
//flaw_line_below:
#line 1057 ""re_grammar.c"" /* yacc.c:1257  */
//fix_flaw_line_below:
//#line 1065 ""re_grammar.c"" /* yacc.c:1257  */
         break;
 
     case 28: /* repeat  */
//flaw_line_below:
#line 99 ""re_grammar.y"" /* yacc.c:1257  */
//fix_flaw_line_below:
//#line 107 ""re_grammar.y"" /* yacc.c:1257  */
       { yr_re_node_destroy(((*yyvaluep).re_node)); }
//flaw_line_below:
#line 1063 ""re_grammar.c"" /* yacc.c:1257  */
//fix_flaw_line_below:
//#line 1071 ""re_grammar.c"" /* yacc.c:1257  */
         break;
 
     case 29: /* single  */
//flaw_line_below:
#line 100 ""re_grammar.y"" /* yacc.c:1257  */
//fix_flaw_line_below:
//#line 108 ""re_grammar.y"" /* yacc.c:1257  */
       { yr_re_node_destroy(((*yyvaluep).re_node)); }
//flaw_line_below:
#line 1069 ""re_grammar.c"" /* yacc.c:1257  */
//fix_flaw_line_below:
//#line 1077 ""re_grammar.c"" /* yacc.c:1257  */
         break;
 
 
      default:
        break;
    }
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}
"
3540,181276,,Remote,Not required,Partial,CVE-2017-9304,https://www.cvedetails.com/cve/CVE-2017-9304/,CWE-674,Low,,,,2017-05-31,5.0,libyara/re.c in the regexp module in YARA 3.5.0 allows remote attackers to cause a denial of service (stack consumption) via a crafted rule that is mishandled in the _yr_re_emit function.,2019-10-02,DoS ,65,https://github.com/VirusTotal/yara/commit/925bcf3c3b0a28b5b78e25d9efda5c0bf27ae699,925bcf3c3b0a28b5b78e25d9efda5c0bf27ae699,Fix issue #674. Move regexp limits to limits.h.,59,libyara/re_grammar.c,"{""sha"": ""ae4d1ac1d591cf30f433ace23bf227b102af2129"", ""filename"": ""libyara/include/yara/limits.h"", ""status"": ""modified"", ""additions"": 20, ""deletions"": 0, ""changes"": 20, ""blob_url"": ""https://github.com/VirusTotal/yara/blob/925bcf3c3b0a28b5b78e25d9efda5c0bf27ae699/libyara/include/yara/limits.h"", ""raw_url"": ""https://github.com/VirusTotal/yara/raw/925bcf3c3b0a28b5b78e25d9efda5c0bf27ae699/libyara/include/yara/limits.h"", ""contents_url"": ""https://api.github.com/repos/VirusTotal/yara/contents/libyara/include/yara/limits.h?ref=925bcf3c3b0a28b5b78e25d9efda5c0bf27ae699"", ""patch"": ""@@ -65,4 +65,24 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n #define LEX_BUF_SIZE                    8192\n \n \n+// Maximum allowed split ID, also limiting the number of split instructions\n+// allowed in a regular expression. This number can't be increased\n+// over 255 without changing RE_SPLIT_ID_TYPE.\n+#define RE_MAX_SPLIT_ID                 128\n+\n+// Maximum stack size for regexp evaluation\n+#define RE_MAX_STACK                    1024\n+\n+// Maximum code size for a compiled regexp\n+#define RE_MAX_CODE_SIZE                32768\n+\n+// Maximum input size scanned by yr_re_exec\n+#define RE_SCAN_LIMIT                   4096\n+\n+// Maximum number of fibers\n+#define RE_MAX_FIBERS                   1024\n+\n+// Maximum number of levels in regexp's AST\n+#define RE_MAX_AST_LEVELS               2000\n+\n #endif""}<_**next**_>{""sha"": ""ebdb1fd8e8b31574dcea152a60c6bbe91353ed3c"", ""filename"": ""libyara/include/yara/re.h"", ""status"": ""modified"", ""additions"": 1, ""deletions"": 0, ""changes"": 1, ""blob_url"": ""https://github.com/VirusTotal/yara/blob/925bcf3c3b0a28b5b78e25d9efda5c0bf27ae699/libyara/include/yara/re.h"", ""raw_url"": ""https://github.com/VirusTotal/yara/raw/925bcf3c3b0a28b5b78e25d9efda5c0bf27ae699/libyara/include/yara/re.h"", ""contents_url"": ""https://api.github.com/repos/VirusTotal/yara/contents/libyara/include/yara/re.h?ref=925bcf3c3b0a28b5b78e25d9efda5c0bf27ae699"", ""patch"": ""@@ -136,6 +136,7 @@ struct RE_NODE\n struct RE_AST\n {\n   uint32_t flags;\n+  uint16_t levels;\n   RE_NODE* root_node;\n };\n ""}<_**next**_>{""sha"": ""959979ba288815450a8ca5e6b991519911e98b55"", ""filename"": ""libyara/re.c"", ""status"": ""modified"", ""additions"": 1, ""deletions"": 17, ""changes"": 18, ""blob_url"": ""https://github.com/VirusTotal/yara/blob/925bcf3c3b0a28b5b78e25d9efda5c0bf27ae699/libyara/re.c"", ""raw_url"": ""https://github.com/VirusTotal/yara/raw/925bcf3c3b0a28b5b78e25d9efda5c0bf27ae699/libyara/re.c"", ""contents_url"": ""https://api.github.com/repos/VirusTotal/yara/contents/libyara/re.c?ref=925bcf3c3b0a28b5b78e25d9efda5c0bf27ae699"", ""patch"": ""@@ -52,23 +52,6 @@ order to avoid confusion with operating system threads.\n #include <yara/re_lexer.h>\n #include <yara/hex_lexer.h>\n \n-// Maximum allowed split ID, also limiting the number of split instructions\n-// allowed in a regular expression. This number can't be increased\n-// over 255 without changing RE_SPLIT_ID_TYPE.\n-#define RE_MAX_SPLIT_ID     128\n-\n-// Maximum stack size for regexp evaluation\n-#define RE_MAX_STACK      1024\n-\n-// Maximum code size for a compiled regexp\n-#define RE_MAX_CODE_SIZE  32768\n-\n-// Maximum input size scanned by yr_re_exec\n-#define RE_SCAN_LIMIT     4096\n-\n-// Maximum number of fibers\n-#define RE_MAX_FIBERS     1024\n-\n \n #define EMIT_BACKWARDS                  0x01\n #define EMIT_DONT_SET_FORWARDS_CODE     0x02\n@@ -268,6 +251,7 @@ int yr_re_ast_create(\n     return ERROR_INSUFFICIENT_MEMORY;\n \n   (*re_ast)->flags = 0;\n+  (*re_ast)->levels = 0;\n   (*re_ast)->root_node = NULL;\n \n   return ERROR_SUCCESS;""}<_**next**_>{""sha"": ""51839f6f00a0b73ea33191076f115e7115a15720"", ""filename"": ""libyara/re_grammar.c"", ""status"": ""modified"", ""additions"": 92, ""deletions"": 78, ""changes"": 170, ""blob_url"": ""https://github.com/VirusTotal/yara/blob/925bcf3c3b0a28b5b78e25d9efda5c0bf27ae699/libyara/re_grammar.c"", ""raw_url"": ""https://github.com/VirusTotal/yara/raw/925bcf3c3b0a28b5b78e25d9efda5c0bf27ae699/libyara/re_grammar.c"", ""contents_url"": ""https://api.github.com/repos/VirusTotal/yara/contents/libyara/re_grammar.c?ref=925bcf3c3b0a28b5b78e25d9efda5c0bf27ae699"", ""patch"": ""@@ -88,6 +88,14 @@\n #define mark_as_not_fast_regexp() \\\n     ((RE_AST*) yyget_extra(yyscanner))->flags &= ~RE_FLAGS_FAST_REGEXP\n \n+#define incr_ast_levels() \\\n+    if (((RE_AST*) yyget_extra(yyscanner))->levels++ > RE_MAX_AST_LEVELS) \\\n+    { \\\n+      lex_env->last_error_code = ERROR_INVALID_REGULAR_EXPRESSION; \\\n+      YYABORT; \\\n+    }\n+\n+\n #define ERROR_IF(x, error) \\\n     if (x) \\\n     { \\\n@@ -102,7 +110,7 @@\n     } \\\n \n \n-#line 106 \""re_grammar.c\"" /* yacc.c:339  */\n+#line 114 \""re_grammar.c\"" /* yacc.c:339  */\n \n # ifndef YY_NULLPTR\n #  if defined __cplusplus && 201103L <= __cplusplus\n@@ -170,14 +178,14 @@ extern int re_yydebug;\n \n union YYSTYPE\n {\n-#line 73 \""re_grammar.y\"" /* yacc.c:355  */\n+#line 81 \""re_grammar.y\"" /* yacc.c:355  */\n \n   int integer;\n   uint32_t range;\n   RE_NODE* re_node;\n   uint8_t* class_vector;\n \n-#line 181 \""re_grammar.c\"" /* yacc.c:355  */\n+#line 189 \""re_grammar.c\"" /* yacc.c:355  */\n };\n \n typedef union YYSTYPE YYSTYPE;\n@@ -193,7 +201,7 @@ int re_yyparse (void *yyscanner, RE_LEX_ENVIRONMENT *lex_env);\n \n /* Copy the second part of user declarations.  */\n \n-#line 197 \""re_grammar.c\"" /* yacc.c:358  */\n+#line 205 \""re_grammar.c\"" /* yacc.c:358  */\n \n #ifdef short\n # undef short\n@@ -491,10 +499,10 @@ static const yytype_uint8 yytranslate[] =\n   /* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */\n static const yytype_uint16 yyrline[] =\n {\n-       0,   104,   104,   109,   113,   117,   128,   146,   150,   161,\n-     175,   191,   205,   221,   244,   268,   290,   313,   317,   323,\n-     329,   335,   344,   348,   354,   362,   368,   374,   380,   386,\n-     392,   398\n+       0,   112,   112,   117,   121,   125,   137,   156,   160,   173,\n+     187,   203,   217,   233,   256,   280,   302,   325,   329,   335,\n+     341,   347,   356,   362,   368,   376,   382,   388,   394,   400,\n+     406,   412\n };\n #endif\n \n@@ -1039,33 +1047,33 @@ yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, void *yyscanner, R\n   switch (yytype)\n     {\n           case 6: /* _CLASS_  */\n-#line 96 \""re_grammar.y\"" /* yacc.c:1257  */\n+#line 104 \""re_grammar.y\"" /* yacc.c:1257  */\n       { yr_free(((*yyvaluep).class_vector)); }\n-#line 1045 \""re_grammar.c\"" /* yacc.c:1257  */\n+#line 1053 \""re_grammar.c\"" /* yacc.c:1257  */\n         break;\n \n     case 26: /* alternative  */\n-#line 97 \""re_grammar.y\"" /* yacc.c:1257  */\n+#line 105 \""re_grammar.y\"" /* yacc.c:1257  */\n       { yr_re_node_destroy(((*yyvaluep).re_node)); }\n-#line 1051 \""re_grammar.c\"" /* yacc.c:1257  */\n+#line 1059 \""re_grammar.c\"" /* yacc.c:1257  */\n         break;\n \n     case 27: /* concatenation  */\n-#line 98 \""re_grammar.y\"" /* yacc.c:1257  */\n+#line 106 \""re_grammar.y\"" /* yacc.c:1257  */\n       { yr_re_node_destroy(((*yyvaluep).re_node)); }\n-#line 1057 \""re_grammar.c\"" /* yacc.c:1257  */\n+#line 1065 \""re_grammar.c\"" /* yacc.c:1257  */\n         break;\n \n     case 28: /* repeat  */\n-#line 99 \""re_grammar.y\"" /* yacc.c:1257  */\n+#line 107 \""re_grammar.y\"" /* yacc.c:1257  */\n       { yr_re_node_destroy(((*yyvaluep).re_node)); }\n-#line 1063 \""re_grammar.c\"" /* yacc.c:1257  */\n+#line 1071 \""re_grammar.c\"" /* yacc.c:1257  */\n         break;\n \n     case 29: /* single  */\n-#line 100 \""re_grammar.y\"" /* yacc.c:1257  */\n+#line 108 \""re_grammar.y\"" /* yacc.c:1257  */\n       { yr_re_node_destroy(((*yyvaluep).re_node)); }\n-#line 1069 \""re_grammar.c\"" /* yacc.c:1257  */\n+#line 1077 \""re_grammar.c\"" /* yacc.c:1257  */\n         break;\n \n \n@@ -1331,26 +1339,27 @@ YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);\n   switch (yyn)\n     {\n         case 2:\n-#line 105 \""re_grammar.y\"" /* yacc.c:1646  */\n+#line 113 \""re_grammar.y\"" /* yacc.c:1646  */\n     {\n         RE_AST* re_ast = yyget_extra(yyscanner);\n         re_ast->root_node = (yyvsp[0].re_node);\n       }\n-#line 1340 \""re_grammar.c\"" /* yacc.c:1646  */\n+#line 1348 \""re_grammar.c\"" /* yacc.c:1646  */\n     break;\n \n   case 4:\n-#line 114 \""re_grammar.y\"" /* yacc.c:1646  */\n+#line 122 \""re_grammar.y\"" /* yacc.c:1646  */\n     {\n         (yyval.re_node) = (yyvsp[0].re_node);\n       }\n-#line 1348 \""re_grammar.c\"" /* yacc.c:1646  */\n+#line 1356 \""re_grammar.c\"" /* yacc.c:1646  */\n     break;\n \n   case 5:\n-#line 118 \""re_grammar.y\"" /* yacc.c:1646  */\n+#line 126 \""re_grammar.y\"" /* yacc.c:1646  */\n     {\n         mark_as_not_fast_regexp();\n+        incr_ast_levels();\n \n         (yyval.re_node) = yr_re_node_create(RE_NODE_ALT, (yyvsp[-2].re_node), (yyvsp[0].re_node));\n \n@@ -1359,15 +1368,16 @@ YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);\n \n         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n       }\n-#line 1363 \""re_grammar.c\"" /* yacc.c:1646  */\n+#line 1372 \""re_grammar.c\"" /* yacc.c:1646  */\n     break;\n \n   case 6:\n-#line 129 \""re_grammar.y\"" /* yacc.c:1646  */\n+#line 138 \""re_grammar.y\"" /* yacc.c:1646  */\n     {\n         RE_NODE* node;\n \n         mark_as_not_fast_regexp();\n+        incr_ast_levels();\n \n         node = yr_re_node_create(RE_NODE_EMPTY, NULL, NULL);\n \n@@ -1378,31 +1388,33 @@ YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);\n \n         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n       }\n-#line 1382 \""re_grammar.c\"" /* yacc.c:1646  */\n+#line 1392 \""re_grammar.c\"" /* yacc.c:1646  */\n     break;\n \n   case 7:\n-#line 147 \""re_grammar.y\"" /* yacc.c:1646  */\n+#line 157 \""re_grammar.y\"" /* yacc.c:1646  */\n     {\n         (yyval.re_node) = (yyvsp[0].re_node);\n       }\n-#line 1390 \""re_grammar.c\"" /* yacc.c:1646  */\n+#line 1400 \""re_grammar.c\"" /* yacc.c:1646  */\n     break;\n \n   case 8:\n-#line 151 \""re_grammar.y\"" /* yacc.c:1646  */\n+#line 161 \""re_grammar.y\"" /* yacc.c:1646  */\n     {\n+        incr_ast_levels();\n+\n         (yyval.re_node) = yr_re_node_create(RE_NODE_CONCAT, (yyvsp[-1].re_node), (yyvsp[0].re_node));\n \n         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-1].re_node));\n         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[0].re_node));\n         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n       }\n-#line 1402 \""re_grammar.c\"" /* yacc.c:1646  */\n+#line 1414 \""re_grammar.c\"" /* yacc.c:1646  */\n     break;\n \n   case 9:\n-#line 162 \""re_grammar.y\"" /* yacc.c:1646  */\n+#line 174 \""re_grammar.y\"" /* yacc.c:1646  */\n     {\n         RE_AST* re_ast;\n \n@@ -1416,11 +1428,11 @@ YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);\n         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-1].re_node));\n         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n       }\n-#line 1420 \""re_grammar.c\"" /* yacc.c:1646  */\n+#line 1432 \""re_grammar.c\"" /* yacc.c:1646  */\n     break;\n \n   case 10:\n-#line 176 \""re_grammar.y\"" /* yacc.c:1646  */\n+#line 188 \""re_grammar.y\"" /* yacc.c:1646  */\n     {\n         RE_AST* re_ast;\n \n@@ -1436,11 +1448,11 @@ YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);\n \n         (yyval.re_node)->greedy = FALSE;\n       }\n-#line 1440 \""re_grammar.c\"" /* yacc.c:1646  */\n+#line 1452 \""re_grammar.c\"" /* yacc.c:1646  */\n     break;\n \n   case 11:\n-#line 192 \""re_grammar.y\"" /* yacc.c:1646  */\n+#line 204 \""re_grammar.y\"" /* yacc.c:1646  */\n     {\n         RE_AST* re_ast;\n \n@@ -1454,11 +1466,11 @@ YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);\n         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-1].re_node));\n         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n       }\n-#line 1458 \""re_grammar.c\"" /* yacc.c:1646  */\n+#line 1470 \""re_grammar.c\"" /* yacc.c:1646  */\n     break;\n \n   case 12:\n-#line 206 \""re_grammar.y\"" /* yacc.c:1646  */\n+#line 218 \""re_grammar.y\"" /* yacc.c:1646  */\n     {\n         RE_AST* re_ast;\n \n@@ -1474,11 +1486,11 @@ YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);\n \n         (yyval.re_node)->greedy = FALSE;\n       }\n-#line 1478 \""re_grammar.c\"" /* yacc.c:1646  */\n+#line 1490 \""re_grammar.c\"" /* yacc.c:1646  */\n     break;\n \n   case 13:\n-#line 222 \""re_grammar.y\"" /* yacc.c:1646  */\n+#line 234 \""re_grammar.y\"" /* yacc.c:1646  */\n     {\n         RE_AST* re_ast = yyget_extra(yyscanner);\n         re_ast->flags |= RE_FLAGS_GREEDY;\n@@ -1501,11 +1513,11 @@ YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);\n         (yyval.re_node)->start = 0;\n         (yyval.re_node)->end = 1;\n       }\n-#line 1505 \""re_grammar.c\"" /* yacc.c:1646  */\n+#line 1517 \""re_grammar.c\"" /* yacc.c:1646  */\n     break;\n \n   case 14:\n-#line 245 \""re_grammar.y\"" /* yacc.c:1646  */\n+#line 257 \""re_grammar.y\"" /* yacc.c:1646  */\n     {\n         RE_AST* re_ast = yyget_extra(yyscanner);\n         re_ast->flags |= RE_FLAGS_UNGREEDY;\n@@ -1529,11 +1541,11 @@ YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);\n         (yyval.re_node)->end = 1;\n         (yyval.re_node)->greedy = FALSE;\n       }\n-#line 1533 \""re_grammar.c\"" /* yacc.c:1646  */\n+#line 1545 \""re_grammar.c\"" /* yacc.c:1646  */\n     break;\n \n   case 15:\n-#line 269 \""re_grammar.y\"" /* yacc.c:1646  */\n+#line 281 \""re_grammar.y\"" /* yacc.c:1646  */\n     {\n         RE_AST* re_ast = yyget_extra(yyscanner);\n         re_ast->flags |= RE_FLAGS_GREEDY;\n@@ -1555,11 +1567,11 @@ YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);\n         (yyval.re_node)->start = (yyvsp[0].range) & 0xFFFF;;\n         (yyval.re_node)->end = (yyvsp[0].range) >> 16;;\n       }\n-#line 1559 \""re_grammar.c\"" /* yacc.c:1646  */\n+#line 1571 \""re_grammar.c\"" /* yacc.c:1646  */\n     break;\n \n   case 16:\n-#line 291 \""re_grammar.y\"" /* yacc.c:1646  */\n+#line 303 \""re_grammar.y\"" /* yacc.c:1646  */\n     {\n         RE_AST* re_ast = yyget_extra(yyscanner);\n         re_ast->flags |= RE_FLAGS_UNGREEDY;\n@@ -1582,161 +1594,163 @@ YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);\n         (yyval.re_node)->end = (yyvsp[-1].range) >> 16;;\n         (yyval.re_node)->greedy = FALSE;\n       }\n-#line 1586 \""re_grammar.c\"" /* yacc.c:1646  */\n+#line 1598 \""re_grammar.c\"" /* yacc.c:1646  */\n     break;\n \n   case 17:\n-#line 314 \""re_grammar.y\"" /* yacc.c:1646  */\n+#line 326 \""re_grammar.y\"" /* yacc.c:1646  */\n     {\n         (yyval.re_node) = (yyvsp[0].re_node);\n       }\n-#line 1594 \""re_grammar.c\"" /* yacc.c:1646  */\n+#line 1606 \""re_grammar.c\"" /* yacc.c:1646  */\n     break;\n \n   case 18:\n-#line 318 \""re_grammar.y\"" /* yacc.c:1646  */\n+#line 330 \""re_grammar.y\"" /* yacc.c:1646  */\n     {\n         (yyval.re_node) = yr_re_node_create(RE_NODE_WORD_BOUNDARY, NULL, NULL);\n \n         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n       }\n-#line 1604 \""re_grammar.c\"" /* yacc.c:1646  */\n+#line 1616 \""re_grammar.c\"" /* yacc.c:1646  */\n     break;\n \n   case 19:\n-#line 324 \""re_grammar.y\"" /* yacc.c:1646  */\n+#line 336 \""re_grammar.y\"" /* yacc.c:1646  */\n     {\n         (yyval.re_node) = yr_re_node_create(RE_NODE_NON_WORD_BOUNDARY, NULL, NULL);\n \n         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n       }\n-#line 1614 \""re_grammar.c\"" /* yacc.c:1646  */\n+#line 1626 \""re_grammar.c\"" /* yacc.c:1646  */\n     break;\n \n   case 20:\n-#line 330 \""re_grammar.y\"" /* yacc.c:1646  */\n+#line 342 \""re_grammar.y\"" /* yacc.c:1646  */\n     {\n         (yyval.re_node) = yr_re_node_create(RE_NODE_ANCHOR_START, NULL, NULL);\n \n         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n       }\n-#line 1624 \""re_grammar.c\"" /* yacc.c:1646  */\n+#line 1636 \""re_grammar.c\"" /* yacc.c:1646  */\n     break;\n \n   case 21:\n-#line 336 \""re_grammar.y\"" /* yacc.c:1646  */\n+#line 348 \""re_grammar.y\"" /* yacc.c:1646  */\n     {\n         (yyval.re_node) = yr_re_node_create(RE_NODE_ANCHOR_END, NULL, NULL);\n \n         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n       }\n-#line 1634 \""re_grammar.c\"" /* yacc.c:1646  */\n+#line 1646 \""re_grammar.c\"" /* yacc.c:1646  */\n     break;\n \n   case 22:\n-#line 345 \""re_grammar.y\"" /* yacc.c:1646  */\n+#line 357 \""re_grammar.y\"" /* yacc.c:1646  */\n     {\n+        incr_ast_levels();\n+\n         (yyval.re_node) = (yyvsp[-1].re_node);\n       }\n-#line 1642 \""re_grammar.c\"" /* yacc.c:1646  */\n+#line 1656 \""re_grammar.c\"" /* yacc.c:1646  */\n     break;\n \n   case 23:\n-#line 349 \""re_grammar.y\"" /* yacc.c:1646  */\n+#line 363 \""re_grammar.y\"" /* yacc.c:1646  */\n     {\n         (yyval.re_node) = yr_re_node_create(RE_NODE_ANY, NULL, NULL);\n \n         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n       }\n-#line 1652 \""re_grammar.c\"" /* yacc.c:1646  */\n+#line 1666 \""re_grammar.c\"" /* yacc.c:1646  */\n     break;\n \n   case 24:\n-#line 355 \""re_grammar.y\"" /* yacc.c:1646  */\n+#line 369 \""re_grammar.y\"" /* yacc.c:1646  */\n     {\n         (yyval.re_node) = yr_re_node_create(RE_NODE_LITERAL, NULL, NULL);\n \n         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n \n         (yyval.re_node)->value = (yyvsp[0].integer);\n       }\n-#line 1664 \""re_grammar.c\"" /* yacc.c:1646  */\n+#line 1678 \""re_grammar.c\"" /* yacc.c:1646  */\n     break;\n \n   case 25:\n-#line 363 \""re_grammar.y\"" /* yacc.c:1646  */\n+#line 377 \""re_grammar.y\"" /* yacc.c:1646  */\n     {\n         (yyval.re_node) = yr_re_node_create(RE_NODE_WORD_CHAR, NULL, NULL);\n \n         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n       }\n-#line 1674 \""re_grammar.c\"" /* yacc.c:1646  */\n+#line 1688 \""re_grammar.c\"" /* yacc.c:1646  */\n     break;\n \n   case 26:\n-#line 369 \""re_grammar.y\"" /* yacc.c:1646  */\n+#line 383 \""re_grammar.y\"" /* yacc.c:1646  */\n     {\n         (yyval.re_node) = yr_re_node_create(RE_NODE_NON_WORD_CHAR, NULL, NULL);\n \n         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n       }\n-#line 1684 \""re_grammar.c\"" /* yacc.c:1646  */\n+#line 1698 \""re_grammar.c\"" /* yacc.c:1646  */\n     break;\n \n   case 27:\n-#line 375 \""re_grammar.y\"" /* yacc.c:1646  */\n+#line 389 \""re_grammar.y\"" /* yacc.c:1646  */\n     {\n         (yyval.re_node) = yr_re_node_create(RE_NODE_SPACE, NULL, NULL);\n \n         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n       }\n-#line 1694 \""re_grammar.c\"" /* yacc.c:1646  */\n+#line 1708 \""re_grammar.c\"" /* yacc.c:1646  */\n     break;\n \n   case 28:\n-#line 381 \""re_grammar.y\"" /* yacc.c:1646  */\n+#line 395 \""re_grammar.y\"" /* yacc.c:1646  */\n     {\n          (yyval.re_node) = yr_re_node_create(RE_NODE_NON_SPACE, NULL, NULL);\n \n          ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n       }\n-#line 1704 \""re_grammar.c\"" /* yacc.c:1646  */\n+#line 1718 \""re_grammar.c\"" /* yacc.c:1646  */\n     break;\n \n   case 29:\n-#line 387 \""re_grammar.y\"" /* yacc.c:1646  */\n+#line 401 \""re_grammar.y\"" /* yacc.c:1646  */\n     {\n         (yyval.re_node) = yr_re_node_create(RE_NODE_DIGIT, NULL, NULL);\n \n         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n       }\n-#line 1714 \""re_grammar.c\"" /* yacc.c:1646  */\n+#line 1728 \""re_grammar.c\"" /* yacc.c:1646  */\n     break;\n \n   case 30:\n-#line 393 \""re_grammar.y\"" /* yacc.c:1646  */\n+#line 407 \""re_grammar.y\"" /* yacc.c:1646  */\n     {\n         (yyval.re_node) = yr_re_node_create(RE_NODE_NON_DIGIT, NULL, NULL);\n \n         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n       }\n-#line 1724 \""re_grammar.c\"" /* yacc.c:1646  */\n+#line 1738 \""re_grammar.c\"" /* yacc.c:1646  */\n     break;\n \n   case 31:\n-#line 399 \""re_grammar.y\"" /* yacc.c:1646  */\n+#line 413 \""re_grammar.y\"" /* yacc.c:1646  */\n     {\n         (yyval.re_node) = yr_re_node_create(RE_NODE_CLASS, NULL, NULL);\n \n         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);\n \n         (yyval.re_node)->class_vector = (yyvsp[0].class_vector);\n       }\n-#line 1736 \""re_grammar.c\"" /* yacc.c:1646  */\n+#line 1750 \""re_grammar.c\"" /* yacc.c:1646  */\n     break;\n \n \n-#line 1740 \""re_grammar.c\"" /* yacc.c:1646  */\n+#line 1754 \""re_grammar.c\"" /* yacc.c:1646  */\n       default: break;\n     }\n   /* User semantic actions sometimes alter yychar, and that requires\n@@ -1964,5 +1978,5 @@ YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);\n #endif\n   return yyresult;\n }\n-#line 407 \""re_grammar.y\"" /* yacc.c:1906  */\n+#line 421 \""re_grammar.y\"" /* yacc.c:1906  */\n ""}<_**next**_>{""sha"": ""8ba1c56dec721cdf3fc4c84cfbb00a224e790a2c"", ""filename"": ""libyara/re_grammar.h"", ""status"": ""modified"", ""additions"": 1, ""deletions"": 1, ""changes"": 2, ""blob_url"": ""https://github.com/VirusTotal/yara/blob/925bcf3c3b0a28b5b78e25d9efda5c0bf27ae699/libyara/re_grammar.h"", ""raw_url"": ""https://github.com/VirusTotal/yara/raw/925bcf3c3b0a28b5b78e25d9efda5c0bf27ae699/libyara/re_grammar.h"", ""contents_url"": ""https://api.github.com/repos/VirusTotal/yara/contents/libyara/re_grammar.h?ref=925bcf3c3b0a28b5b78e25d9efda5c0bf27ae699"", ""patch"": ""@@ -78,7 +78,7 @@ extern int re_yydebug;\n \n union YYSTYPE\n {\n-#line 73 \""re_grammar.y\"" /* yacc.c:1909  */\n+#line 81 \""re_grammar.y\"" /* yacc.c:1909  */\n \n   int integer;\n   uint32_t range;""}<_**next**_>{""sha"": ""9e88d24e85306ee241cab15c9296e8142a49d1ae"", ""filename"": ""libyara/re_grammar.y"", ""status"": ""modified"", ""additions"": 14, ""deletions"": 0, ""changes"": 14, ""blob_url"": ""https://github.com/VirusTotal/yara/blob/925bcf3c3b0a28b5b78e25d9efda5c0bf27ae699/libyara/re_grammar.y"", ""raw_url"": ""https://github.com/VirusTotal/yara/raw/925bcf3c3b0a28b5b78e25d9efda5c0bf27ae699/libyara/re_grammar.y"", ""contents_url"": ""https://api.github.com/repos/VirusTotal/yara/contents/libyara/re_grammar.y?ref=925bcf3c3b0a28b5b78e25d9efda5c0bf27ae699"", ""patch"": ""@@ -46,6 +46,14 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n #define mark_as_not_fast_regexp() \\\n     ((RE_AST*) yyget_extra(yyscanner))->flags &= ~RE_FLAGS_FAST_REGEXP\n \n+#define incr_ast_levels() \\\n+    if (((RE_AST*) yyget_extra(yyscanner))->levels++ > RE_MAX_AST_LEVELS) \\\n+    { \\\n+      lex_env->last_error_code = ERROR_INVALID_REGULAR_EXPRESSION; \\\n+      YYABORT; \\\n+    }\n+\n+\n #define ERROR_IF(x, error) \\\n     if (x) \\\n     { \\\n@@ -117,6 +125,7 @@ alternative\n     | alternative '|' concatenation\n       {\n         mark_as_not_fast_regexp();\n+        incr_ast_levels();\n \n         $$ = yr_re_node_create(RE_NODE_ALT, $1, $3);\n \n@@ -130,6 +139,7 @@ alternative\n         RE_NODE* node;\n \n         mark_as_not_fast_regexp();\n+        incr_ast_levels();\n \n         node = yr_re_node_create(RE_NODE_EMPTY, NULL, NULL);\n \n@@ -149,6 +159,8 @@ concatenation\n       }\n     | concatenation repeat\n       {\n+        incr_ast_levels();\n+\n         $$ = yr_re_node_create(RE_NODE_CONCAT, $1, $2);\n \n         DESTROY_NODE_IF($$ == NULL, $1);\n@@ -343,6 +355,8 @@ repeat\n single\n     : '(' alternative ')'\n       {\n+        incr_ast_levels();\n+\n         $$ = $2;\n       }\n     | '.'""}","yyparse (void *yyscanner, RE_LEX_ENVIRONMENT *lex_env)
{
/* The lookahead symbol.  */
int yychar;


/* The semantic value of the lookahead symbol.  */
/* Default value used for initialization, for pacifying older GCCs
   or non-GCC compilers.  */
YY_INITIAL_VALUE (static YYSTYPE yyval_default;)
YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);

    /* Number of syntax errors so far.  */
    int yynerrs;

    int yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       'yyss': related to states.
       'yyvs': related to semantic values.

       Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yytype_int16 yyssa[YYINITDEPTH];
    yytype_int16 *yyss;
    yytype_int16 *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    YYSIZE_T yystacksize;

  int yyn;
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken = 0;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;

#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yyssp = yyss = yyssa;
  yyvsp = yyvs = yyvsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF ((stderr, ""Starting parse\n""));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY; /* Cause a token to be read.  */
  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
        /* Give user a chance to reallocate the stack.  Use copies of
           these so that the &'s don't force the real ones into
           memory.  */
        YYSTYPE *yyvs1 = yyvs;
        yytype_int16 *yyss1 = yyss;

        /* Each stack pointer address is followed by the size of the
           data in use in that stack, in bytes.  This used to be a
           conditional around just the two extra args, but that might
           be undefined if yyoverflow is a macro.  */
        yyoverflow (YY_(""memory exhausted""),
                    &yyss1, yysize * sizeof (*yyssp),
                    &yyvs1, yysize * sizeof (*yyvsp),
                    &yystacksize);

        yyss = yyss1;
        yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
        goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
        yystacksize = YYMAXDEPTH;

      {
        yytype_int16 *yyss1 = yyss;
        union yyalloc *yyptr =
          (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
        if (! yyptr)
          goto yyexhaustedlab;
        YYSTACK_RELOCATE (yyss_alloc, yyss);
        YYSTACK_RELOCATE (yyvs_alloc, yyvs);
#  undef YYSTACK_RELOCATE
        if (yyss1 != yyssa)
          YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;

      YYDPRINTF ((stderr, ""Stack size increased to %lu\n"",
                  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
        YYABORT;
    }

  YYDPRINTF ((stderr, ""Entering state %d\n"", yystate));

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, ""Reading a token: ""));
      yychar = yylex (&yylval, yyscanner, lex_env);
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, ""Now at end of input.\n""));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT (""Next token is"", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT (""Shifting"", yytoken, &yylval, &yylloc);

  /* Discard the shifted token.  */
  yychar = YYEMPTY;

  yystate = yyn;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END

  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     '$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];


  YY_REDUCE_PRINT (yyn);
   switch (yyn)
     {
         case 2:
#line 113 ""re_grammar.y"" /* yacc.c:1646  */
     {
         RE_AST* re_ast = yyget_extra(yyscanner);
         re_ast->root_node = (yyvsp[0].re_node);
       }
#line 1348 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 4:
#line 122 ""re_grammar.y"" /* yacc.c:1646  */
     {
         (yyval.re_node) = (yyvsp[0].re_node);
       }
#line 1356 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 5:
#line 126 ""re_grammar.y"" /* yacc.c:1646  */
     {
         mark_as_not_fast_regexp();
        incr_ast_levels();
 
         (yyval.re_node) = yr_re_node_create(RE_NODE_ALT, (yyvsp[-2].re_node), (yyvsp[0].re_node));
 
        DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-2].re_node));
        DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[0].re_node));
 
         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
       }
#line 1372 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 6:
#line 138 ""re_grammar.y"" /* yacc.c:1646  */
     {
         RE_NODE* node;
 
         mark_as_not_fast_regexp();
        incr_ast_levels();
 
         node = yr_re_node_create(RE_NODE_EMPTY, NULL, NULL);
 
        DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-1].re_node));
        ERROR_IF(node == NULL, ERROR_INSUFFICIENT_MEMORY);

        (yyval.re_node) = yr_re_node_create(RE_NODE_ALT, (yyvsp[-1].re_node), node);
 
         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
       }
#line 1392 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 7:
#line 157 ""re_grammar.y"" /* yacc.c:1646  */
     {
         (yyval.re_node) = (yyvsp[0].re_node);
       }
#line 1400 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 8:
#line 161 ""re_grammar.y"" /* yacc.c:1646  */
     {
        incr_ast_levels();

         (yyval.re_node) = yr_re_node_create(RE_NODE_CONCAT, (yyvsp[-1].re_node), (yyvsp[0].re_node));
 
         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-1].re_node));
         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[0].re_node));
         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
       }
#line 1414 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 9:
#line 174 ""re_grammar.y"" /* yacc.c:1646  */
     {
         RE_AST* re_ast;
 
        mark_as_not_fast_regexp();

        re_ast = yyget_extra(yyscanner);
        re_ast->flags |= RE_FLAGS_GREEDY;

        (yyval.re_node) = yr_re_node_create(RE_NODE_STAR, (yyvsp[-1].re_node), NULL);

         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-1].re_node));
         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
       }
#line 1432 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 10:
#line 188 ""re_grammar.y"" /* yacc.c:1646  */
     {
         RE_AST* re_ast;
 
        mark_as_not_fast_regexp();

        re_ast = yyget_extra(yyscanner);
        re_ast->flags |= RE_FLAGS_UNGREEDY;

        (yyval.re_node) = yr_re_node_create(RE_NODE_STAR, (yyvsp[-2].re_node), NULL);

        DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-2].re_node));
        ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
 
         (yyval.re_node)->greedy = FALSE;
       }
#line 1452 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 11:
#line 204 ""re_grammar.y"" /* yacc.c:1646  */
     {
         RE_AST* re_ast;
 
        mark_as_not_fast_regexp();

        re_ast = yyget_extra(yyscanner);
        re_ast->flags |= RE_FLAGS_GREEDY;

        (yyval.re_node) = yr_re_node_create(RE_NODE_PLUS, (yyvsp[-1].re_node), NULL);

         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-1].re_node));
         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
       }
#line 1470 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 12:
#line 218 ""re_grammar.y"" /* yacc.c:1646  */
     {
         RE_AST* re_ast;
 
        mark_as_not_fast_regexp();

        re_ast = yyget_extra(yyscanner);
        re_ast->flags |= RE_FLAGS_UNGREEDY;

        (yyval.re_node) = yr_re_node_create(RE_NODE_PLUS, (yyvsp[-2].re_node), NULL);

        DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-2].re_node));
        ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
 
         (yyval.re_node)->greedy = FALSE;
       }
#line 1490 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 13:
#line 234 ""re_grammar.y"" /* yacc.c:1646  */
     {
         RE_AST* re_ast = yyget_extra(yyscanner);
         re_ast->flags |= RE_FLAGS_GREEDY;

        if ((yyvsp[-1].re_node)->type == RE_NODE_ANY)
        {
          (yyval.re_node) = yr_re_node_create(RE_NODE_RANGE_ANY, NULL, NULL);
          DESTROY_NODE_IF(TRUE, (yyvsp[-1].re_node));
        }
        else
        {
          mark_as_not_fast_regexp();
          (yyval.re_node) = yr_re_node_create(RE_NODE_RANGE, (yyvsp[-1].re_node), NULL);
          DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-1].re_node));
        }

        DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-1].re_node));
        ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);

         (yyval.re_node)->start = 0;
         (yyval.re_node)->end = 1;
       }
#line 1517 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 14:
#line 257 ""re_grammar.y"" /* yacc.c:1646  */
     {
         RE_AST* re_ast = yyget_extra(yyscanner);
         re_ast->flags |= RE_FLAGS_UNGREEDY;

        if ((yyvsp[-2].re_node)->type == RE_NODE_ANY)
        {
          (yyval.re_node) = yr_re_node_create(RE_NODE_RANGE_ANY, NULL, NULL);
          DESTROY_NODE_IF(TRUE, (yyvsp[-2].re_node));
        }
        else
        {
          mark_as_not_fast_regexp();
          (yyval.re_node) = yr_re_node_create(RE_NODE_RANGE, (yyvsp[-2].re_node), NULL);
          DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-2].re_node));
        }

        DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-2].re_node));
        ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);

        (yyval.re_node)->start = 0;
         (yyval.re_node)->end = 1;
         (yyval.re_node)->greedy = FALSE;
       }
#line 1545 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 15:
#line 281 ""re_grammar.y"" /* yacc.c:1646  */
     {
         RE_AST* re_ast = yyget_extra(yyscanner);
         re_ast->flags |= RE_FLAGS_GREEDY;

        if ((yyvsp[-1].re_node)->type == RE_NODE_ANY)
        {
          (yyval.re_node) = yr_re_node_create(RE_NODE_RANGE_ANY, NULL, NULL);
          DESTROY_NODE_IF(TRUE, (yyvsp[-1].re_node));
        }
        else
        {
          mark_as_not_fast_regexp();
          (yyval.re_node) = yr_re_node_create(RE_NODE_RANGE, (yyvsp[-1].re_node), NULL);
          DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-1].re_node));
        }

        ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);

         (yyval.re_node)->start = (yyvsp[0].range) & 0xFFFF;;
         (yyval.re_node)->end = (yyvsp[0].range) >> 16;;
       }
#line 1571 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 16:
#line 303 ""re_grammar.y"" /* yacc.c:1646  */
     {
         RE_AST* re_ast = yyget_extra(yyscanner);
         re_ast->flags |= RE_FLAGS_UNGREEDY;

        if ((yyvsp[-2].re_node)->type == RE_NODE_ANY)
        {
          (yyval.re_node) = yr_re_node_create(RE_NODE_RANGE_ANY, NULL, NULL);
          DESTROY_NODE_IF(TRUE, (yyvsp[-2].re_node));
        }
        else
        {
          mark_as_not_fast_regexp();
          (yyval.re_node) = yr_re_node_create(RE_NODE_RANGE, (yyvsp[-2].re_node), NULL);
          DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-2].re_node));
        }

        ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);

        (yyval.re_node)->start = (yyvsp[-1].range) & 0xFFFF;;
         (yyval.re_node)->end = (yyvsp[-1].range) >> 16;;
         (yyval.re_node)->greedy = FALSE;
       }
#line 1598 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 17:
#line 326 ""re_grammar.y"" /* yacc.c:1646  */
     {
         (yyval.re_node) = (yyvsp[0].re_node);
       }
#line 1606 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 18:
#line 330 ""re_grammar.y"" /* yacc.c:1646  */
     {
         (yyval.re_node) = yr_re_node_create(RE_NODE_WORD_BOUNDARY, NULL, NULL);
 
         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
       }
#line 1616 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 19:
#line 336 ""re_grammar.y"" /* yacc.c:1646  */
     {
         (yyval.re_node) = yr_re_node_create(RE_NODE_NON_WORD_BOUNDARY, NULL, NULL);
 
         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
       }
#line 1626 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 20:
#line 342 ""re_grammar.y"" /* yacc.c:1646  */
     {
         (yyval.re_node) = yr_re_node_create(RE_NODE_ANCHOR_START, NULL, NULL);
 
         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
       }
#line 1636 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 21:
#line 348 ""re_grammar.y"" /* yacc.c:1646  */
     {
         (yyval.re_node) = yr_re_node_create(RE_NODE_ANCHOR_END, NULL, NULL);
 
         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
       }
#line 1646 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 22:
#line 357 ""re_grammar.y"" /* yacc.c:1646  */
     {
        incr_ast_levels();

         (yyval.re_node) = (yyvsp[-1].re_node);
       }
#line 1656 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 23:
#line 363 ""re_grammar.y"" /* yacc.c:1646  */
     {
         (yyval.re_node) = yr_re_node_create(RE_NODE_ANY, NULL, NULL);
 
         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
       }
#line 1666 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 24:
#line 369 ""re_grammar.y"" /* yacc.c:1646  */
     {
         (yyval.re_node) = yr_re_node_create(RE_NODE_LITERAL, NULL, NULL);
 
         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
 
         (yyval.re_node)->value = (yyvsp[0].integer);
       }
#line 1678 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 25:
#line 377 ""re_grammar.y"" /* yacc.c:1646  */
     {
         (yyval.re_node) = yr_re_node_create(RE_NODE_WORD_CHAR, NULL, NULL);
 
         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
       }
#line 1688 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 26:
#line 383 ""re_grammar.y"" /* yacc.c:1646  */
     {
         (yyval.re_node) = yr_re_node_create(RE_NODE_NON_WORD_CHAR, NULL, NULL);
 
         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
       }
#line 1698 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 27:
#line 389 ""re_grammar.y"" /* yacc.c:1646  */
     {
         (yyval.re_node) = yr_re_node_create(RE_NODE_SPACE, NULL, NULL);
 
         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
       }
#line 1708 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 28:
#line 395 ""re_grammar.y"" /* yacc.c:1646  */
     {
          (yyval.re_node) = yr_re_node_create(RE_NODE_NON_SPACE, NULL, NULL);
 
          ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
       }
#line 1718 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 29:
#line 401 ""re_grammar.y"" /* yacc.c:1646  */
     {
         (yyval.re_node) = yr_re_node_create(RE_NODE_DIGIT, NULL, NULL);
 
         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
       }
#line 1728 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 30:
#line 407 ""re_grammar.y"" /* yacc.c:1646  */
     {
         (yyval.re_node) = yr_re_node_create(RE_NODE_NON_DIGIT, NULL, NULL);
 
         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
       }
#line 1738 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 31:
#line 413 ""re_grammar.y"" /* yacc.c:1646  */
     {
         (yyval.re_node) = yr_re_node_create(RE_NODE_CLASS, NULL, NULL);
 
         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
 
         (yyval.re_node)->class_vector = (yyvsp[0].class_vector);
       }
#line 1750 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
 
#line 1754 ""re_grammar.c"" /* yacc.c:1646  */
       default: break;
     }
   /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT (""-> $$ ="", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;

  /* Now 'shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*--------------------------------------.
| yyerrlab -- here on detecting error.  |
`--------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYEMPTY : YYTRANSLATE (yychar);

  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (yyscanner, lex_env, YY_(""syntax error""));
#else
# define YYSYNTAX_ERROR yysyntax_error (&yymsg_alloc, &yymsg, \
                                        yyssp, yytoken)
      {
        char const *yymsgp = YY_(""syntax error"");
        int yysyntax_error_status;
        yysyntax_error_status = YYSYNTAX_ERROR;
        if (yysyntax_error_status == 0)
          yymsgp = yymsg;
        else if (yysyntax_error_status == 1)
          {
            if (yymsg != yymsgbuf)
              YYSTACK_FREE (yymsg);
            yymsg = (char *) YYSTACK_ALLOC (yymsg_alloc);
            if (!yymsg)
              {
                yymsg = yymsgbuf;
                yymsg_alloc = sizeof yymsgbuf;
                yysyntax_error_status = 2;
              }
            else
              {
                yysyntax_error_status = YYSYNTAX_ERROR;
                yymsgp = yymsg;
              }
          }
        yyerror (yyscanner, lex_env, yymsgp);
        if (yysyntax_error_status == 2)
          goto yyexhaustedlab;
      }
# undef YYSYNTAX_ERROR
#endif
    }



  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
         error, discard it.  */

      if (yychar <= YYEOF)
        {
          /* Return failure if at end of input.  */
          if (yychar == YYEOF)
            YYABORT;
        }
      else
        {
          yydestruct (""Error: discarding"",
                      yytoken, &yylval, yyscanner, lex_env);
          yychar = YYEMPTY;
        }
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  /* Do not reclaim the symbols of the rule whose action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;      /* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
        {
          yyn += YYTERROR;
          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
            {
              yyn = yytable[yyn];
              if (0 < yyn)
                break;
            }
        }

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
        YYABORT;


      yydestruct (""Error: popping"",
                  yystos[yystate], yyvsp, yyscanner, lex_env);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END


  /* Shift the error token.  */
  YY_SYMBOL_PRINT (""Shifting"", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#if !defined yyoverflow || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (yyscanner, lex_env, YY_(""memory exhausted""));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct (""Cleanup: discarding lookahead"",
                  yytoken, &yylval, yyscanner, lex_env);
    }
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct (""Cleanup: popping"",
                  yystos[*yyssp], yyvsp, yyscanner, lex_env);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
 #endif
   return yyresult;
 }
","yyparse (void *yyscanner, RE_LEX_ENVIRONMENT *lex_env)
{
/* The lookahead symbol.  */
int yychar;


/* The semantic value of the lookahead symbol.  */
/* Default value used for initialization, for pacifying older GCCs
   or non-GCC compilers.  */
YY_INITIAL_VALUE (static YYSTYPE yyval_default;)
YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);

    /* Number of syntax errors so far.  */
    int yynerrs;

    int yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       'yyss': related to states.
       'yyvs': related to semantic values.

       Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yytype_int16 yyssa[YYINITDEPTH];
    yytype_int16 *yyss;
    yytype_int16 *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    YYSIZE_T yystacksize;

  int yyn;
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken = 0;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;

#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yyssp = yyss = yyssa;
  yyvsp = yyvs = yyvsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF ((stderr, ""Starting parse\n""));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY; /* Cause a token to be read.  */
  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
        /* Give user a chance to reallocate the stack.  Use copies of
           these so that the &'s don't force the real ones into
           memory.  */
        YYSTYPE *yyvs1 = yyvs;
        yytype_int16 *yyss1 = yyss;

        /* Each stack pointer address is followed by the size of the
           data in use in that stack, in bytes.  This used to be a
           conditional around just the two extra args, but that might
           be undefined if yyoverflow is a macro.  */
        yyoverflow (YY_(""memory exhausted""),
                    &yyss1, yysize * sizeof (*yyssp),
                    &yyvs1, yysize * sizeof (*yyvsp),
                    &yystacksize);

        yyss = yyss1;
        yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
        goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
        yystacksize = YYMAXDEPTH;

      {
        yytype_int16 *yyss1 = yyss;
        union yyalloc *yyptr =
          (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
        if (! yyptr)
          goto yyexhaustedlab;
        YYSTACK_RELOCATE (yyss_alloc, yyss);
        YYSTACK_RELOCATE (yyvs_alloc, yyvs);
#  undef YYSTACK_RELOCATE
        if (yyss1 != yyssa)
          YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;

      YYDPRINTF ((stderr, ""Stack size increased to %lu\n"",
                  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
        YYABORT;
    }

  YYDPRINTF ((stderr, ""Entering state %d\n"", yystate));

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, ""Reading a token: ""));
      yychar = yylex (&yylval, yyscanner, lex_env);
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, ""Now at end of input.\n""));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT (""Next token is"", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT (""Shifting"", yytoken, &yylval, &yylloc);

  /* Discard the shifted token.  */
  yychar = YYEMPTY;

  yystate = yyn;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END

  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     '$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];


  YY_REDUCE_PRINT (yyn);
   switch (yyn)
     {
         case 2:
#line 105 ""re_grammar.y"" /* yacc.c:1646  */
     {
         RE_AST* re_ast = yyget_extra(yyscanner);
         re_ast->root_node = (yyvsp[0].re_node);
       }
#line 1340 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 4:
#line 114 ""re_grammar.y"" /* yacc.c:1646  */
     {
         (yyval.re_node) = (yyvsp[0].re_node);
       }
#line 1348 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 5:
#line 118 ""re_grammar.y"" /* yacc.c:1646  */
     {
         mark_as_not_fast_regexp();
 
         (yyval.re_node) = yr_re_node_create(RE_NODE_ALT, (yyvsp[-2].re_node), (yyvsp[0].re_node));
 
        DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-2].re_node));
        DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[0].re_node));
 
         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
       }
#line 1363 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 6:
#line 129 ""re_grammar.y"" /* yacc.c:1646  */
     {
         RE_NODE* node;
 
         mark_as_not_fast_regexp();
 
         node = yr_re_node_create(RE_NODE_EMPTY, NULL, NULL);
 
        DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-1].re_node));
        ERROR_IF(node == NULL, ERROR_INSUFFICIENT_MEMORY);

        (yyval.re_node) = yr_re_node_create(RE_NODE_ALT, (yyvsp[-1].re_node), node);
 
         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
       }
#line 1382 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 7:
#line 147 ""re_grammar.y"" /* yacc.c:1646  */
     {
         (yyval.re_node) = (yyvsp[0].re_node);
       }
#line 1390 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 8:
#line 151 ""re_grammar.y"" /* yacc.c:1646  */
     {
         (yyval.re_node) = yr_re_node_create(RE_NODE_CONCAT, (yyvsp[-1].re_node), (yyvsp[0].re_node));
 
         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-1].re_node));
         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[0].re_node));
         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
       }
#line 1402 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 9:
#line 162 ""re_grammar.y"" /* yacc.c:1646  */
     {
         RE_AST* re_ast;
 
        mark_as_not_fast_regexp();

        re_ast = yyget_extra(yyscanner);
        re_ast->flags |= RE_FLAGS_GREEDY;

        (yyval.re_node) = yr_re_node_create(RE_NODE_STAR, (yyvsp[-1].re_node), NULL);

         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-1].re_node));
         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
       }
#line 1420 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 10:
#line 176 ""re_grammar.y"" /* yacc.c:1646  */
     {
         RE_AST* re_ast;
 
        mark_as_not_fast_regexp();

        re_ast = yyget_extra(yyscanner);
        re_ast->flags |= RE_FLAGS_UNGREEDY;

        (yyval.re_node) = yr_re_node_create(RE_NODE_STAR, (yyvsp[-2].re_node), NULL);

        DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-2].re_node));
        ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
 
         (yyval.re_node)->greedy = FALSE;
       }
#line 1440 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 11:
#line 192 ""re_grammar.y"" /* yacc.c:1646  */
     {
         RE_AST* re_ast;
 
        mark_as_not_fast_regexp();

        re_ast = yyget_extra(yyscanner);
        re_ast->flags |= RE_FLAGS_GREEDY;

        (yyval.re_node) = yr_re_node_create(RE_NODE_PLUS, (yyvsp[-1].re_node), NULL);

         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-1].re_node));
         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
       }
#line 1458 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 12:
#line 206 ""re_grammar.y"" /* yacc.c:1646  */
     {
         RE_AST* re_ast;
 
        mark_as_not_fast_regexp();

        re_ast = yyget_extra(yyscanner);
        re_ast->flags |= RE_FLAGS_UNGREEDY;

        (yyval.re_node) = yr_re_node_create(RE_NODE_PLUS, (yyvsp[-2].re_node), NULL);

        DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-2].re_node));
        ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
 
         (yyval.re_node)->greedy = FALSE;
       }
#line 1478 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 13:
#line 222 ""re_grammar.y"" /* yacc.c:1646  */
     {
         RE_AST* re_ast = yyget_extra(yyscanner);
         re_ast->flags |= RE_FLAGS_GREEDY;

        if ((yyvsp[-1].re_node)->type == RE_NODE_ANY)
        {
          (yyval.re_node) = yr_re_node_create(RE_NODE_RANGE_ANY, NULL, NULL);
          DESTROY_NODE_IF(TRUE, (yyvsp[-1].re_node));
        }
        else
        {
          mark_as_not_fast_regexp();
          (yyval.re_node) = yr_re_node_create(RE_NODE_RANGE, (yyvsp[-1].re_node), NULL);
          DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-1].re_node));
        }

        DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-1].re_node));
        ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);

         (yyval.re_node)->start = 0;
         (yyval.re_node)->end = 1;
       }
#line 1505 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 14:
#line 245 ""re_grammar.y"" /* yacc.c:1646  */
     {
         RE_AST* re_ast = yyget_extra(yyscanner);
         re_ast->flags |= RE_FLAGS_UNGREEDY;

        if ((yyvsp[-2].re_node)->type == RE_NODE_ANY)
        {
          (yyval.re_node) = yr_re_node_create(RE_NODE_RANGE_ANY, NULL, NULL);
          DESTROY_NODE_IF(TRUE, (yyvsp[-2].re_node));
        }
        else
        {
          mark_as_not_fast_regexp();
          (yyval.re_node) = yr_re_node_create(RE_NODE_RANGE, (yyvsp[-2].re_node), NULL);
          DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-2].re_node));
        }

        DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-2].re_node));
        ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);

        (yyval.re_node)->start = 0;
         (yyval.re_node)->end = 1;
         (yyval.re_node)->greedy = FALSE;
       }
#line 1533 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 15:
#line 269 ""re_grammar.y"" /* yacc.c:1646  */
     {
         RE_AST* re_ast = yyget_extra(yyscanner);
         re_ast->flags |= RE_FLAGS_GREEDY;

        if ((yyvsp[-1].re_node)->type == RE_NODE_ANY)
        {
          (yyval.re_node) = yr_re_node_create(RE_NODE_RANGE_ANY, NULL, NULL);
          DESTROY_NODE_IF(TRUE, (yyvsp[-1].re_node));
        }
        else
        {
          mark_as_not_fast_regexp();
          (yyval.re_node) = yr_re_node_create(RE_NODE_RANGE, (yyvsp[-1].re_node), NULL);
          DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-1].re_node));
        }

        ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);

         (yyval.re_node)->start = (yyvsp[0].range) & 0xFFFF;;
         (yyval.re_node)->end = (yyvsp[0].range) >> 16;;
       }
#line 1559 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 16:
#line 291 ""re_grammar.y"" /* yacc.c:1646  */
     {
         RE_AST* re_ast = yyget_extra(yyscanner);
         re_ast->flags |= RE_FLAGS_UNGREEDY;

        if ((yyvsp[-2].re_node)->type == RE_NODE_ANY)
        {
          (yyval.re_node) = yr_re_node_create(RE_NODE_RANGE_ANY, NULL, NULL);
          DESTROY_NODE_IF(TRUE, (yyvsp[-2].re_node));
        }
        else
        {
          mark_as_not_fast_regexp();
          (yyval.re_node) = yr_re_node_create(RE_NODE_RANGE, (yyvsp[-2].re_node), NULL);
          DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-2].re_node));
        }

        ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);

        (yyval.re_node)->start = (yyvsp[-1].range) & 0xFFFF;;
         (yyval.re_node)->end = (yyvsp[-1].range) >> 16;;
         (yyval.re_node)->greedy = FALSE;
       }
#line 1586 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 17:
#line 314 ""re_grammar.y"" /* yacc.c:1646  */
     {
         (yyval.re_node) = (yyvsp[0].re_node);
       }
#line 1594 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 18:
#line 318 ""re_grammar.y"" /* yacc.c:1646  */
     {
         (yyval.re_node) = yr_re_node_create(RE_NODE_WORD_BOUNDARY, NULL, NULL);
 
         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
       }
#line 1604 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 19:
#line 324 ""re_grammar.y"" /* yacc.c:1646  */
     {
         (yyval.re_node) = yr_re_node_create(RE_NODE_NON_WORD_BOUNDARY, NULL, NULL);
 
         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
       }
#line 1614 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 20:
#line 330 ""re_grammar.y"" /* yacc.c:1646  */
     {
         (yyval.re_node) = yr_re_node_create(RE_NODE_ANCHOR_START, NULL, NULL);
 
         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
       }
#line 1624 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 21:
#line 336 ""re_grammar.y"" /* yacc.c:1646  */
     {
         (yyval.re_node) = yr_re_node_create(RE_NODE_ANCHOR_END, NULL, NULL);
 
         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
       }
#line 1634 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 22:
#line 345 ""re_grammar.y"" /* yacc.c:1646  */
     {
         (yyval.re_node) = (yyvsp[-1].re_node);
       }
#line 1642 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 23:
#line 349 ""re_grammar.y"" /* yacc.c:1646  */
     {
         (yyval.re_node) = yr_re_node_create(RE_NODE_ANY, NULL, NULL);
 
         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
       }
#line 1652 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 24:
#line 355 ""re_grammar.y"" /* yacc.c:1646  */
     {
         (yyval.re_node) = yr_re_node_create(RE_NODE_LITERAL, NULL, NULL);
 
         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
 
         (yyval.re_node)->value = (yyvsp[0].integer);
       }
#line 1664 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 25:
#line 363 ""re_grammar.y"" /* yacc.c:1646  */
     {
         (yyval.re_node) = yr_re_node_create(RE_NODE_WORD_CHAR, NULL, NULL);
 
         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
       }
#line 1674 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 26:
#line 369 ""re_grammar.y"" /* yacc.c:1646  */
     {
         (yyval.re_node) = yr_re_node_create(RE_NODE_NON_WORD_CHAR, NULL, NULL);
 
         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
       }
#line 1684 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 27:
#line 375 ""re_grammar.y"" /* yacc.c:1646  */
     {
         (yyval.re_node) = yr_re_node_create(RE_NODE_SPACE, NULL, NULL);
 
         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
       }
#line 1694 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 28:
#line 381 ""re_grammar.y"" /* yacc.c:1646  */
     {
          (yyval.re_node) = yr_re_node_create(RE_NODE_NON_SPACE, NULL, NULL);
 
          ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
       }
#line 1704 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 29:
#line 387 ""re_grammar.y"" /* yacc.c:1646  */
     {
         (yyval.re_node) = yr_re_node_create(RE_NODE_DIGIT, NULL, NULL);
 
         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
       }
#line 1714 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 30:
#line 393 ""re_grammar.y"" /* yacc.c:1646  */
     {
         (yyval.re_node) = yr_re_node_create(RE_NODE_NON_DIGIT, NULL, NULL);
 
         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
       }
#line 1724 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 31:
#line 399 ""re_grammar.y"" /* yacc.c:1646  */
     {
         (yyval.re_node) = yr_re_node_create(RE_NODE_CLASS, NULL, NULL);
 
         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
 
         (yyval.re_node)->class_vector = (yyvsp[0].class_vector);
       }
#line 1736 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
 
#line 1740 ""re_grammar.c"" /* yacc.c:1646  */
       default: break;
     }
   /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT (""-> $$ ="", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;

  /* Now 'shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*--------------------------------------.
| yyerrlab -- here on detecting error.  |
`--------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYEMPTY : YYTRANSLATE (yychar);

  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (yyscanner, lex_env, YY_(""syntax error""));
#else
# define YYSYNTAX_ERROR yysyntax_error (&yymsg_alloc, &yymsg, \
                                        yyssp, yytoken)
      {
        char const *yymsgp = YY_(""syntax error"");
        int yysyntax_error_status;
        yysyntax_error_status = YYSYNTAX_ERROR;
        if (yysyntax_error_status == 0)
          yymsgp = yymsg;
        else if (yysyntax_error_status == 1)
          {
            if (yymsg != yymsgbuf)
              YYSTACK_FREE (yymsg);
            yymsg = (char *) YYSTACK_ALLOC (yymsg_alloc);
            if (!yymsg)
              {
                yymsg = yymsgbuf;
                yymsg_alloc = sizeof yymsgbuf;
                yysyntax_error_status = 2;
              }
            else
              {
                yysyntax_error_status = YYSYNTAX_ERROR;
                yymsgp = yymsg;
              }
          }
        yyerror (yyscanner, lex_env, yymsgp);
        if (yysyntax_error_status == 2)
          goto yyexhaustedlab;
      }
# undef YYSYNTAX_ERROR
#endif
    }



  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
         error, discard it.  */

      if (yychar <= YYEOF)
        {
          /* Return failure if at end of input.  */
          if (yychar == YYEOF)
            YYABORT;
        }
      else
        {
          yydestruct (""Error: discarding"",
                      yytoken, &yylval, yyscanner, lex_env);
          yychar = YYEMPTY;
        }
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  /* Do not reclaim the symbols of the rule whose action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;      /* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
        {
          yyn += YYTERROR;
          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
            {
              yyn = yytable[yyn];
              if (0 < yyn)
                break;
            }
        }

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
        YYABORT;


      yydestruct (""Error: popping"",
                  yystos[yystate], yyvsp, yyscanner, lex_env);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END


  /* Shift the error token.  */
  YY_SYMBOL_PRINT (""Shifting"", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#if !defined yyoverflow || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (yyscanner, lex_env, YY_(""memory exhausted""));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct (""Cleanup: discarding lookahead"",
                  yytoken, &yylval, yyscanner, lex_env);
    }
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct (""Cleanup: popping"",
                  yystos[*yyssp], yyvsp, yyscanner, lex_env);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
 #endif
   return yyresult;
 }
",C,"#line 113 ""re_grammar.y"" /* yacc.c:1646  */
#line 1348 ""re_grammar.c"" /* yacc.c:1646  */
#line 122 ""re_grammar.y"" /* yacc.c:1646  */
#line 1356 ""re_grammar.c"" /* yacc.c:1646  */
#line 126 ""re_grammar.y"" /* yacc.c:1646  */
        incr_ast_levels();
#line 1372 ""re_grammar.c"" /* yacc.c:1646  */
#line 138 ""re_grammar.y"" /* yacc.c:1646  */
        incr_ast_levels();
#line 1392 ""re_grammar.c"" /* yacc.c:1646  */
#line 157 ""re_grammar.y"" /* yacc.c:1646  */
#line 1400 ""re_grammar.c"" /* yacc.c:1646  */
#line 161 ""re_grammar.y"" /* yacc.c:1646  */
        incr_ast_levels();

#line 1414 ""re_grammar.c"" /* yacc.c:1646  */
#line 174 ""re_grammar.y"" /* yacc.c:1646  */
#line 1432 ""re_grammar.c"" /* yacc.c:1646  */
#line 188 ""re_grammar.y"" /* yacc.c:1646  */
#line 1452 ""re_grammar.c"" /* yacc.c:1646  */
#line 204 ""re_grammar.y"" /* yacc.c:1646  */
#line 1470 ""re_grammar.c"" /* yacc.c:1646  */
#line 218 ""re_grammar.y"" /* yacc.c:1646  */
#line 1490 ""re_grammar.c"" /* yacc.c:1646  */
#line 234 ""re_grammar.y"" /* yacc.c:1646  */
#line 1517 ""re_grammar.c"" /* yacc.c:1646  */
#line 257 ""re_grammar.y"" /* yacc.c:1646  */
#line 1545 ""re_grammar.c"" /* yacc.c:1646  */
#line 281 ""re_grammar.y"" /* yacc.c:1646  */
#line 1571 ""re_grammar.c"" /* yacc.c:1646  */
#line 303 ""re_grammar.y"" /* yacc.c:1646  */
#line 1598 ""re_grammar.c"" /* yacc.c:1646  */
#line 326 ""re_grammar.y"" /* yacc.c:1646  */
#line 1606 ""re_grammar.c"" /* yacc.c:1646  */
#line 330 ""re_grammar.y"" /* yacc.c:1646  */
#line 1616 ""re_grammar.c"" /* yacc.c:1646  */
#line 336 ""re_grammar.y"" /* yacc.c:1646  */
#line 1626 ""re_grammar.c"" /* yacc.c:1646  */
#line 342 ""re_grammar.y"" /* yacc.c:1646  */
#line 1636 ""re_grammar.c"" /* yacc.c:1646  */
#line 348 ""re_grammar.y"" /* yacc.c:1646  */
#line 1646 ""re_grammar.c"" /* yacc.c:1646  */
#line 357 ""re_grammar.y"" /* yacc.c:1646  */
        incr_ast_levels();

#line 1656 ""re_grammar.c"" /* yacc.c:1646  */
#line 363 ""re_grammar.y"" /* yacc.c:1646  */
#line 1666 ""re_grammar.c"" /* yacc.c:1646  */
#line 369 ""re_grammar.y"" /* yacc.c:1646  */
#line 1678 ""re_grammar.c"" /* yacc.c:1646  */
#line 377 ""re_grammar.y"" /* yacc.c:1646  */
#line 1688 ""re_grammar.c"" /* yacc.c:1646  */
#line 383 ""re_grammar.y"" /* yacc.c:1646  */
#line 1698 ""re_grammar.c"" /* yacc.c:1646  */
#line 389 ""re_grammar.y"" /* yacc.c:1646  */
#line 1708 ""re_grammar.c"" /* yacc.c:1646  */
#line 395 ""re_grammar.y"" /* yacc.c:1646  */
#line 1718 ""re_grammar.c"" /* yacc.c:1646  */
#line 401 ""re_grammar.y"" /* yacc.c:1646  */
#line 1728 ""re_grammar.c"" /* yacc.c:1646  */
#line 407 ""re_grammar.y"" /* yacc.c:1646  */
#line 1738 ""re_grammar.c"" /* yacc.c:1646  */
#line 413 ""re_grammar.y"" /* yacc.c:1646  */
#line 1750 ""re_grammar.c"" /* yacc.c:1646  */
#line 1754 ""re_grammar.c"" /* yacc.c:1646  */
","#line 105 ""re_grammar.y"" /* yacc.c:1646  */
#line 1340 ""re_grammar.c"" /* yacc.c:1646  */
#line 114 ""re_grammar.y"" /* yacc.c:1646  */
#line 1348 ""re_grammar.c"" /* yacc.c:1646  */
#line 118 ""re_grammar.y"" /* yacc.c:1646  */
#line 1363 ""re_grammar.c"" /* yacc.c:1646  */
#line 129 ""re_grammar.y"" /* yacc.c:1646  */
#line 1382 ""re_grammar.c"" /* yacc.c:1646  */
#line 147 ""re_grammar.y"" /* yacc.c:1646  */
#line 1390 ""re_grammar.c"" /* yacc.c:1646  */
#line 151 ""re_grammar.y"" /* yacc.c:1646  */
#line 1402 ""re_grammar.c"" /* yacc.c:1646  */
#line 162 ""re_grammar.y"" /* yacc.c:1646  */
#line 1420 ""re_grammar.c"" /* yacc.c:1646  */
#line 176 ""re_grammar.y"" /* yacc.c:1646  */
#line 1440 ""re_grammar.c"" /* yacc.c:1646  */
#line 192 ""re_grammar.y"" /* yacc.c:1646  */
#line 1458 ""re_grammar.c"" /* yacc.c:1646  */
#line 206 ""re_grammar.y"" /* yacc.c:1646  */
#line 1478 ""re_grammar.c"" /* yacc.c:1646  */
#line 222 ""re_grammar.y"" /* yacc.c:1646  */
#line 1505 ""re_grammar.c"" /* yacc.c:1646  */
#line 245 ""re_grammar.y"" /* yacc.c:1646  */
#line 1533 ""re_grammar.c"" /* yacc.c:1646  */
#line 269 ""re_grammar.y"" /* yacc.c:1646  */
#line 1559 ""re_grammar.c"" /* yacc.c:1646  */
#line 291 ""re_grammar.y"" /* yacc.c:1646  */
#line 1586 ""re_grammar.c"" /* yacc.c:1646  */
#line 314 ""re_grammar.y"" /* yacc.c:1646  */
#line 1594 ""re_grammar.c"" /* yacc.c:1646  */
#line 318 ""re_grammar.y"" /* yacc.c:1646  */
#line 1604 ""re_grammar.c"" /* yacc.c:1646  */
#line 324 ""re_grammar.y"" /* yacc.c:1646  */
#line 1614 ""re_grammar.c"" /* yacc.c:1646  */
#line 330 ""re_grammar.y"" /* yacc.c:1646  */
#line 1624 ""re_grammar.c"" /* yacc.c:1646  */
#line 336 ""re_grammar.y"" /* yacc.c:1646  */
#line 1634 ""re_grammar.c"" /* yacc.c:1646  */
#line 345 ""re_grammar.y"" /* yacc.c:1646  */
#line 1642 ""re_grammar.c"" /* yacc.c:1646  */
#line 349 ""re_grammar.y"" /* yacc.c:1646  */
#line 1652 ""re_grammar.c"" /* yacc.c:1646  */
#line 355 ""re_grammar.y"" /* yacc.c:1646  */
#line 1664 ""re_grammar.c"" /* yacc.c:1646  */
#line 363 ""re_grammar.y"" /* yacc.c:1646  */
#line 1674 ""re_grammar.c"" /* yacc.c:1646  */
#line 369 ""re_grammar.y"" /* yacc.c:1646  */
#line 1684 ""re_grammar.c"" /* yacc.c:1646  */
#line 375 ""re_grammar.y"" /* yacc.c:1646  */
#line 1694 ""re_grammar.c"" /* yacc.c:1646  */
#line 381 ""re_grammar.y"" /* yacc.c:1646  */
#line 1704 ""re_grammar.c"" /* yacc.c:1646  */
#line 387 ""re_grammar.y"" /* yacc.c:1646  */
#line 1714 ""re_grammar.c"" /* yacc.c:1646  */
#line 393 ""re_grammar.y"" /* yacc.c:1646  */
#line 1724 ""re_grammar.c"" /* yacc.c:1646  */
#line 399 ""re_grammar.y"" /* yacc.c:1646  */
#line 1736 ""re_grammar.c"" /* yacc.c:1646  */
#line 1740 ""re_grammar.c"" /* yacc.c:1646  */
",,"@@ -88,6 +88,14 @@
 #define mark_as_not_fast_regexp() \
     ((RE_AST*) yyget_extra(yyscanner))->flags &= ~RE_FLAGS_FAST_REGEXP
 
+#define incr_ast_levels() \
+    if (((RE_AST*) yyget_extra(yyscanner))->levels++ > RE_MAX_AST_LEVELS) \
+    { \
+      lex_env->last_error_code = ERROR_INVALID_REGULAR_EXPRESSION; \
+      YYABORT; \
+    }
+
+
 #define ERROR_IF(x, error) \
     if (x) \
     { \
@@ -102,7 +110,7 @@
     } \
 
 
-#line 106 ""re_grammar.c"" /* yacc.c:339  */
+#line 114 ""re_grammar.c"" /* yacc.c:339  */
 
 # ifndef YY_NULLPTR
 #  if defined __cplusplus && 201103L <= __cplusplus
@@ -170,14 +178,14 @@ extern int re_yydebug;
 
 union YYSTYPE
 {
-#line 73 ""re_grammar.y"" /* yacc.c:355  */
+#line 81 ""re_grammar.y"" /* yacc.c:355  */
 
   int integer;
   uint32_t range;
   RE_NODE* re_node;
   uint8_t* class_vector;
 
-#line 181 ""re_grammar.c"" /* yacc.c:355  */
+#line 189 ""re_grammar.c"" /* yacc.c:355  */
 };
 
 typedef union YYSTYPE YYSTYPE;
@@ -193,7 +201,7 @@ int re_yyparse (void *yyscanner, RE_LEX_ENVIRONMENT *lex_env);
 
 /* Copy the second part of user declarations.  */
 
-#line 197 ""re_grammar.c"" /* yacc.c:358  */
+#line 205 ""re_grammar.c"" /* yacc.c:358  */
 
 #ifdef short
 # undef short
@@ -491,10 +499,10 @@ static const yytype_uint8 yytranslate[] =
   /* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
 static const yytype_uint16 yyrline[] =
 {
-       0,   104,   104,   109,   113,   117,   128,   146,   150,   161,
-     175,   191,   205,   221,   244,   268,   290,   313,   317,   323,
-     329,   335,   344,   348,   354,   362,   368,   374,   380,   386,
-     392,   398
+       0,   112,   112,   117,   121,   125,   137,   156,   160,   173,
+     187,   203,   217,   233,   256,   280,   302,   325,   329,   335,
+     341,   347,   356,   362,   368,   376,   382,   388,   394,   400,
+     406,   412
 };
 #endif
 
@@ -1039,33 +1047,33 @@ yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, void *yyscanner, R
   switch (yytype)
     {
           case 6: /* _CLASS_  */
-#line 96 ""re_grammar.y"" /* yacc.c:1257  */
+#line 104 ""re_grammar.y"" /* yacc.c:1257  */
       { yr_free(((*yyvaluep).class_vector)); }
-#line 1045 ""re_grammar.c"" /* yacc.c:1257  */
+#line 1053 ""re_grammar.c"" /* yacc.c:1257  */
         break;
 
     case 26: /* alternative  */
-#line 97 ""re_grammar.y"" /* yacc.c:1257  */
+#line 105 ""re_grammar.y"" /* yacc.c:1257  */
       { yr_re_node_destroy(((*yyvaluep).re_node)); }
-#line 1051 ""re_grammar.c"" /* yacc.c:1257  */
+#line 1059 ""re_grammar.c"" /* yacc.c:1257  */
         break;
 
     case 27: /* concatenation  */
-#line 98 ""re_grammar.y"" /* yacc.c:1257  */
+#line 106 ""re_grammar.y"" /* yacc.c:1257  */
       { yr_re_node_destroy(((*yyvaluep).re_node)); }
-#line 1057 ""re_grammar.c"" /* yacc.c:1257  */
+#line 1065 ""re_grammar.c"" /* yacc.c:1257  */
         break;
 
     case 28: /* repeat  */
-#line 99 ""re_grammar.y"" /* yacc.c:1257  */
+#line 107 ""re_grammar.y"" /* yacc.c:1257  */
       { yr_re_node_destroy(((*yyvaluep).re_node)); }
-#line 1063 ""re_grammar.c"" /* yacc.c:1257  */
+#line 1071 ""re_grammar.c"" /* yacc.c:1257  */
         break;
 
     case 29: /* single  */
-#line 100 ""re_grammar.y"" /* yacc.c:1257  */
+#line 108 ""re_grammar.y"" /* yacc.c:1257  */
       { yr_re_node_destroy(((*yyvaluep).re_node)); }
-#line 1069 ""re_grammar.c"" /* yacc.c:1257  */
+#line 1077 ""re_grammar.c"" /* yacc.c:1257  */
         break;
 
 
@@ -1331,26 +1339,27 @@ YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);
   switch (yyn)
     {
         case 2:
-#line 105 ""re_grammar.y"" /* yacc.c:1646  */
+#line 113 ""re_grammar.y"" /* yacc.c:1646  */
     {
         RE_AST* re_ast = yyget_extra(yyscanner);
         re_ast->root_node = (yyvsp[0].re_node);
       }
-#line 1340 ""re_grammar.c"" /* yacc.c:1646  */
+#line 1348 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 4:
-#line 114 ""re_grammar.y"" /* yacc.c:1646  */
+#line 122 ""re_grammar.y"" /* yacc.c:1646  */
     {
         (yyval.re_node) = (yyvsp[0].re_node);
       }
-#line 1348 ""re_grammar.c"" /* yacc.c:1646  */
+#line 1356 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 5:
-#line 118 ""re_grammar.y"" /* yacc.c:1646  */
+#line 126 ""re_grammar.y"" /* yacc.c:1646  */
     {
         mark_as_not_fast_regexp();
+        incr_ast_levels();
 
         (yyval.re_node) = yr_re_node_create(RE_NODE_ALT, (yyvsp[-2].re_node), (yyvsp[0].re_node));
 
@@ -1359,15 +1368,16 @@ YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);
 
         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
       }
-#line 1363 ""re_grammar.c"" /* yacc.c:1646  */
+#line 1372 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 6:
-#line 129 ""re_grammar.y"" /* yacc.c:1646  */
+#line 138 ""re_grammar.y"" /* yacc.c:1646  */
     {
         RE_NODE* node;
 
         mark_as_not_fast_regexp();
+        incr_ast_levels();
 
         node = yr_re_node_create(RE_NODE_EMPTY, NULL, NULL);
 
@@ -1378,31 +1388,33 @@ YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);
 
         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
       }
-#line 1382 ""re_grammar.c"" /* yacc.c:1646  */
+#line 1392 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 7:
-#line 147 ""re_grammar.y"" /* yacc.c:1646  */
+#line 157 ""re_grammar.y"" /* yacc.c:1646  */
     {
         (yyval.re_node) = (yyvsp[0].re_node);
       }
-#line 1390 ""re_grammar.c"" /* yacc.c:1646  */
+#line 1400 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 8:
-#line 151 ""re_grammar.y"" /* yacc.c:1646  */
+#line 161 ""re_grammar.y"" /* yacc.c:1646  */
     {
+        incr_ast_levels();
+
         (yyval.re_node) = yr_re_node_create(RE_NODE_CONCAT, (yyvsp[-1].re_node), (yyvsp[0].re_node));
 
         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-1].re_node));
         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[0].re_node));
         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
       }
-#line 1402 ""re_grammar.c"" /* yacc.c:1646  */
+#line 1414 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 9:
-#line 162 ""re_grammar.y"" /* yacc.c:1646  */
+#line 174 ""re_grammar.y"" /* yacc.c:1646  */
     {
         RE_AST* re_ast;
 
@@ -1416,11 +1428,11 @@ YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);
         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-1].re_node));
         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
       }
-#line 1420 ""re_grammar.c"" /* yacc.c:1646  */
+#line 1432 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 10:
-#line 176 ""re_grammar.y"" /* yacc.c:1646  */
+#line 188 ""re_grammar.y"" /* yacc.c:1646  */
     {
         RE_AST* re_ast;
 
@@ -1436,11 +1448,11 @@ YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);
 
         (yyval.re_node)->greedy = FALSE;
       }
-#line 1440 ""re_grammar.c"" /* yacc.c:1646  */
+#line 1452 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 11:
-#line 192 ""re_grammar.y"" /* yacc.c:1646  */
+#line 204 ""re_grammar.y"" /* yacc.c:1646  */
     {
         RE_AST* re_ast;
 
@@ -1454,11 +1466,11 @@ YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);
         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-1].re_node));
         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
       }
-#line 1458 ""re_grammar.c"" /* yacc.c:1646  */
+#line 1470 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 12:
-#line 206 ""re_grammar.y"" /* yacc.c:1646  */
+#line 218 ""re_grammar.y"" /* yacc.c:1646  */
     {
         RE_AST* re_ast;
 
@@ -1474,11 +1486,11 @@ YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);
 
         (yyval.re_node)->greedy = FALSE;
       }
-#line 1478 ""re_grammar.c"" /* yacc.c:1646  */
+#line 1490 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 13:
-#line 222 ""re_grammar.y"" /* yacc.c:1646  */
+#line 234 ""re_grammar.y"" /* yacc.c:1646  */
     {
         RE_AST* re_ast = yyget_extra(yyscanner);
         re_ast->flags |= RE_FLAGS_GREEDY;
@@ -1501,11 +1513,11 @@ YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);
         (yyval.re_node)->start = 0;
         (yyval.re_node)->end = 1;
       }
-#line 1505 ""re_grammar.c"" /* yacc.c:1646  */
+#line 1517 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 14:
-#line 245 ""re_grammar.y"" /* yacc.c:1646  */
+#line 257 ""re_grammar.y"" /* yacc.c:1646  */
     {
         RE_AST* re_ast = yyget_extra(yyscanner);
         re_ast->flags |= RE_FLAGS_UNGREEDY;
@@ -1529,11 +1541,11 @@ YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);
         (yyval.re_node)->end = 1;
         (yyval.re_node)->greedy = FALSE;
       }
-#line 1533 ""re_grammar.c"" /* yacc.c:1646  */
+#line 1545 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 15:
-#line 269 ""re_grammar.y"" /* yacc.c:1646  */
+#line 281 ""re_grammar.y"" /* yacc.c:1646  */
     {
         RE_AST* re_ast = yyget_extra(yyscanner);
         re_ast->flags |= RE_FLAGS_GREEDY;
@@ -1555,11 +1567,11 @@ YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);
         (yyval.re_node)->start = (yyvsp[0].range) & 0xFFFF;;
         (yyval.re_node)->end = (yyvsp[0].range) >> 16;;
       }
-#line 1559 ""re_grammar.c"" /* yacc.c:1646  */
+#line 1571 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 16:
-#line 291 ""re_grammar.y"" /* yacc.c:1646  */
+#line 303 ""re_grammar.y"" /* yacc.c:1646  */
     {
         RE_AST* re_ast = yyget_extra(yyscanner);
         re_ast->flags |= RE_FLAGS_UNGREEDY;
@@ -1582,161 +1594,163 @@ YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);
         (yyval.re_node)->end = (yyvsp[-1].range) >> 16;;
         (yyval.re_node)->greedy = FALSE;
       }
-#line 1586 ""re_grammar.c"" /* yacc.c:1646  */
+#line 1598 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 17:
-#line 314 ""re_grammar.y"" /* yacc.c:1646  */
+#line 326 ""re_grammar.y"" /* yacc.c:1646  */
     {
         (yyval.re_node) = (yyvsp[0].re_node);
       }
-#line 1594 ""re_grammar.c"" /* yacc.c:1646  */
+#line 1606 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 18:
-#line 318 ""re_grammar.y"" /* yacc.c:1646  */
+#line 330 ""re_grammar.y"" /* yacc.c:1646  */
     {
         (yyval.re_node) = yr_re_node_create(RE_NODE_WORD_BOUNDARY, NULL, NULL);
 
         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
       }
-#line 1604 ""re_grammar.c"" /* yacc.c:1646  */
+#line 1616 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 19:
-#line 324 ""re_grammar.y"" /* yacc.c:1646  */
+#line 336 ""re_grammar.y"" /* yacc.c:1646  */
     {
         (yyval.re_node) = yr_re_node_create(RE_NODE_NON_WORD_BOUNDARY, NULL, NULL);
 
         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
       }
-#line 1614 ""re_grammar.c"" /* yacc.c:1646  */
+#line 1626 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 20:
-#line 330 ""re_grammar.y"" /* yacc.c:1646  */
+#line 342 ""re_grammar.y"" /* yacc.c:1646  */
     {
         (yyval.re_node) = yr_re_node_create(RE_NODE_ANCHOR_START, NULL, NULL);
 
         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
       }
-#line 1624 ""re_grammar.c"" /* yacc.c:1646  */
+#line 1636 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 21:
-#line 336 ""re_grammar.y"" /* yacc.c:1646  */
+#line 348 ""re_grammar.y"" /* yacc.c:1646  */
     {
         (yyval.re_node) = yr_re_node_create(RE_NODE_ANCHOR_END, NULL, NULL);
 
         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
       }
-#line 1634 ""re_grammar.c"" /* yacc.c:1646  */
+#line 1646 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 22:
-#line 345 ""re_grammar.y"" /* yacc.c:1646  */
+#line 357 ""re_grammar.y"" /* yacc.c:1646  */
     {
+        incr_ast_levels();
+
         (yyval.re_node) = (yyvsp[-1].re_node);
       }
-#line 1642 ""re_grammar.c"" /* yacc.c:1646  */
+#line 1656 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 23:
-#line 349 ""re_grammar.y"" /* yacc.c:1646  */
+#line 363 ""re_grammar.y"" /* yacc.c:1646  */
     {
         (yyval.re_node) = yr_re_node_create(RE_NODE_ANY, NULL, NULL);
 
         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
       }
-#line 1652 ""re_grammar.c"" /* yacc.c:1646  */
+#line 1666 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 24:
-#line 355 ""re_grammar.y"" /* yacc.c:1646  */
+#line 369 ""re_grammar.y"" /* yacc.c:1646  */
     {
         (yyval.re_node) = yr_re_node_create(RE_NODE_LITERAL, NULL, NULL);
 
         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
 
         (yyval.re_node)->value = (yyvsp[0].integer);
       }
-#line 1664 ""re_grammar.c"" /* yacc.c:1646  */
+#line 1678 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 25:
-#line 363 ""re_grammar.y"" /* yacc.c:1646  */
+#line 377 ""re_grammar.y"" /* yacc.c:1646  */
     {
         (yyval.re_node) = yr_re_node_create(RE_NODE_WORD_CHAR, NULL, NULL);
 
         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
       }
-#line 1674 ""re_grammar.c"" /* yacc.c:1646  */
+#line 1688 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 26:
-#line 369 ""re_grammar.y"" /* yacc.c:1646  */
+#line 383 ""re_grammar.y"" /* yacc.c:1646  */
     {
         (yyval.re_node) = yr_re_node_create(RE_NODE_NON_WORD_CHAR, NULL, NULL);
 
         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
       }
-#line 1684 ""re_grammar.c"" /* yacc.c:1646  */
+#line 1698 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 27:
-#line 375 ""re_grammar.y"" /* yacc.c:1646  */
+#line 389 ""re_grammar.y"" /* yacc.c:1646  */
     {
         (yyval.re_node) = yr_re_node_create(RE_NODE_SPACE, NULL, NULL);
 
         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
       }
-#line 1694 ""re_grammar.c"" /* yacc.c:1646  */
+#line 1708 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 28:
-#line 381 ""re_grammar.y"" /* yacc.c:1646  */
+#line 395 ""re_grammar.y"" /* yacc.c:1646  */
     {
          (yyval.re_node) = yr_re_node_create(RE_NODE_NON_SPACE, NULL, NULL);
 
          ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
       }
-#line 1704 ""re_grammar.c"" /* yacc.c:1646  */
+#line 1718 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 29:
-#line 387 ""re_grammar.y"" /* yacc.c:1646  */
+#line 401 ""re_grammar.y"" /* yacc.c:1646  */
     {
         (yyval.re_node) = yr_re_node_create(RE_NODE_DIGIT, NULL, NULL);
 
         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
       }
-#line 1714 ""re_grammar.c"" /* yacc.c:1646  */
+#line 1728 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 30:
-#line 393 ""re_grammar.y"" /* yacc.c:1646  */
+#line 407 ""re_grammar.y"" /* yacc.c:1646  */
     {
         (yyval.re_node) = yr_re_node_create(RE_NODE_NON_DIGIT, NULL, NULL);
 
         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
       }
-#line 1724 ""re_grammar.c"" /* yacc.c:1646  */
+#line 1738 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 31:
-#line 399 ""re_grammar.y"" /* yacc.c:1646  */
+#line 413 ""re_grammar.y"" /* yacc.c:1646  */
     {
         (yyval.re_node) = yr_re_node_create(RE_NODE_CLASS, NULL, NULL);
 
         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
 
         (yyval.re_node)->class_vector = (yyvsp[0].class_vector);
       }
-#line 1736 ""re_grammar.c"" /* yacc.c:1646  */
+#line 1750 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
 
-#line 1740 ""re_grammar.c"" /* yacc.c:1646  */
+#line 1754 ""re_grammar.c"" /* yacc.c:1646  */
       default: break;
     }
   /* User semantic actions sometimes alter yychar, and that requires
@@ -1964,5 +1978,5 @@ YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);
 #endif
   return yyresult;
 }
-#line 407 ""re_grammar.y"" /* yacc.c:1906  */
+#line 421 ""re_grammar.y"" /* yacc.c:1906  */
 ",yara,925bcf3c3b0a28b5b78e25d9efda5c0bf27ae699,aa871746d89010ea96272344d993675e982fbe52,1,"yyparse (void *yyscanner, RE_LEX_ENVIRONMENT *lex_env)
{
/* The lookahead symbol.  */
int yychar;


/* The semantic value of the lookahead symbol.  */
/* Default value used for initialization, for pacifying older GCCs
   or non-GCC compilers.  */
YY_INITIAL_VALUE (static YYSTYPE yyval_default;)
YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);

    /* Number of syntax errors so far.  */
    int yynerrs;

    int yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       'yyss': related to states.
       'yyvs': related to semantic values.

       Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yytype_int16 yyssa[YYINITDEPTH];
    yytype_int16 *yyss;
    yytype_int16 *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    YYSIZE_T yystacksize;

  int yyn;
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken = 0;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;

#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yyssp = yyss = yyssa;
  yyvsp = yyvs = yyvsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF ((stderr, ""Starting parse\n""));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY; /* Cause a token to be read.  */
  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
        /* Give user a chance to reallocate the stack.  Use copies of
           these so that the &'s don't force the real ones into
           memory.  */
        YYSTYPE *yyvs1 = yyvs;
        yytype_int16 *yyss1 = yyss;

        /* Each stack pointer address is followed by the size of the
           data in use in that stack, in bytes.  This used to be a
           conditional around just the two extra args, but that might
           be undefined if yyoverflow is a macro.  */
        yyoverflow (YY_(""memory exhausted""),
                    &yyss1, yysize * sizeof (*yyssp),
                    &yyvs1, yysize * sizeof (*yyvsp),
                    &yystacksize);

        yyss = yyss1;
        yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
        goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
        yystacksize = YYMAXDEPTH;

      {
        yytype_int16 *yyss1 = yyss;
        union yyalloc *yyptr =
          (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
        if (! yyptr)
          goto yyexhaustedlab;
        YYSTACK_RELOCATE (yyss_alloc, yyss);
        YYSTACK_RELOCATE (yyvs_alloc, yyvs);
#  undef YYSTACK_RELOCATE
        if (yyss1 != yyssa)
          YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;

      YYDPRINTF ((stderr, ""Stack size increased to %lu\n"",
                  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
        YYABORT;
    }

  YYDPRINTF ((stderr, ""Entering state %d\n"", yystate));

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, ""Reading a token: ""));
      yychar = yylex (&yylval, yyscanner, lex_env);
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, ""Now at end of input.\n""));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT (""Next token is"", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT (""Shifting"", yytoken, &yylval, &yylloc);

  /* Discard the shifted token.  */
  yychar = YYEMPTY;

  yystate = yyn;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END

  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     '$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];


  YY_REDUCE_PRINT (yyn);
   switch (yyn)
     {
         case 2:
//flaw_line_below:
#line 105 ""re_grammar.y"" /* yacc.c:1646  */
//fix_flaw_line_below:
//#line 113 ""re_grammar.y"" /* yacc.c:1646  */
     {
         RE_AST* re_ast = yyget_extra(yyscanner);
         re_ast->root_node = (yyvsp[0].re_node);
       }
//flaw_line_below:
#line 1340 ""re_grammar.c"" /* yacc.c:1646  */
//fix_flaw_line_below:
//#line 1348 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 4:
//flaw_line_below:
#line 114 ""re_grammar.y"" /* yacc.c:1646  */
//fix_flaw_line_below:
//#line 122 ""re_grammar.y"" /* yacc.c:1646  */
     {
         (yyval.re_node) = (yyvsp[0].re_node);
       }
//flaw_line_below:
#line 1348 ""re_grammar.c"" /* yacc.c:1646  */
//fix_flaw_line_below:
//#line 1356 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 5:
//flaw_line_below:
#line 118 ""re_grammar.y"" /* yacc.c:1646  */
//fix_flaw_line_below:
//#line 126 ""re_grammar.y"" /* yacc.c:1646  */
     {
         mark_as_not_fast_regexp();
//fix_flaw_line_below:
//        incr_ast_levels();
 
         (yyval.re_node) = yr_re_node_create(RE_NODE_ALT, (yyvsp[-2].re_node), (yyvsp[0].re_node));
 
        DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-2].re_node));
        DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[0].re_node));
 
         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
       }
//flaw_line_below:
#line 1363 ""re_grammar.c"" /* yacc.c:1646  */
//fix_flaw_line_below:
//#line 1372 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 6:
//flaw_line_below:
#line 129 ""re_grammar.y"" /* yacc.c:1646  */
//fix_flaw_line_below:
//#line 138 ""re_grammar.y"" /* yacc.c:1646  */
     {
         RE_NODE* node;
 
         mark_as_not_fast_regexp();
//fix_flaw_line_below:
//        incr_ast_levels();
 
         node = yr_re_node_create(RE_NODE_EMPTY, NULL, NULL);
 
        DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-1].re_node));
        ERROR_IF(node == NULL, ERROR_INSUFFICIENT_MEMORY);

        (yyval.re_node) = yr_re_node_create(RE_NODE_ALT, (yyvsp[-1].re_node), node);
 
         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
       }
//flaw_line_below:
#line 1382 ""re_grammar.c"" /* yacc.c:1646  */
//fix_flaw_line_below:
//#line 1392 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 7:
//flaw_line_below:
#line 147 ""re_grammar.y"" /* yacc.c:1646  */
//fix_flaw_line_below:
//#line 157 ""re_grammar.y"" /* yacc.c:1646  */
     {
         (yyval.re_node) = (yyvsp[0].re_node);
       }
//flaw_line_below:
#line 1390 ""re_grammar.c"" /* yacc.c:1646  */
//fix_flaw_line_below:
//#line 1400 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 8:
//flaw_line_below:
#line 151 ""re_grammar.y"" /* yacc.c:1646  */
//fix_flaw_line_below:
//#line 161 ""re_grammar.y"" /* yacc.c:1646  */
     {
//fix_flaw_line_below:
//        incr_ast_levels();
//fix_flaw_line_below:
//
         (yyval.re_node) = yr_re_node_create(RE_NODE_CONCAT, (yyvsp[-1].re_node), (yyvsp[0].re_node));
 
         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-1].re_node));
         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[0].re_node));
         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
       }
//flaw_line_below:
#line 1402 ""re_grammar.c"" /* yacc.c:1646  */
//fix_flaw_line_below:
//#line 1414 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 9:
//flaw_line_below:
#line 162 ""re_grammar.y"" /* yacc.c:1646  */
//fix_flaw_line_below:
//#line 174 ""re_grammar.y"" /* yacc.c:1646  */
     {
         RE_AST* re_ast;
 
        mark_as_not_fast_regexp();

        re_ast = yyget_extra(yyscanner);
        re_ast->flags |= RE_FLAGS_GREEDY;

        (yyval.re_node) = yr_re_node_create(RE_NODE_STAR, (yyvsp[-1].re_node), NULL);

         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-1].re_node));
         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
       }
//flaw_line_below:
#line 1420 ""re_grammar.c"" /* yacc.c:1646  */
//fix_flaw_line_below:
//#line 1432 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 10:
//flaw_line_below:
#line 176 ""re_grammar.y"" /* yacc.c:1646  */
//fix_flaw_line_below:
//#line 188 ""re_grammar.y"" /* yacc.c:1646  */
     {
         RE_AST* re_ast;
 
        mark_as_not_fast_regexp();

        re_ast = yyget_extra(yyscanner);
        re_ast->flags |= RE_FLAGS_UNGREEDY;

        (yyval.re_node) = yr_re_node_create(RE_NODE_STAR, (yyvsp[-2].re_node), NULL);

        DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-2].re_node));
        ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
 
         (yyval.re_node)->greedy = FALSE;
       }
//flaw_line_below:
#line 1440 ""re_grammar.c"" /* yacc.c:1646  */
//fix_flaw_line_below:
//#line 1452 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 11:
//flaw_line_below:
#line 192 ""re_grammar.y"" /* yacc.c:1646  */
//fix_flaw_line_below:
//#line 204 ""re_grammar.y"" /* yacc.c:1646  */
     {
         RE_AST* re_ast;
 
        mark_as_not_fast_regexp();

        re_ast = yyget_extra(yyscanner);
        re_ast->flags |= RE_FLAGS_GREEDY;

        (yyval.re_node) = yr_re_node_create(RE_NODE_PLUS, (yyvsp[-1].re_node), NULL);

         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-1].re_node));
         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
       }
//flaw_line_below:
#line 1458 ""re_grammar.c"" /* yacc.c:1646  */
//fix_flaw_line_below:
//#line 1470 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 12:
//flaw_line_below:
#line 206 ""re_grammar.y"" /* yacc.c:1646  */
//fix_flaw_line_below:
//#line 218 ""re_grammar.y"" /* yacc.c:1646  */
     {
         RE_AST* re_ast;
 
        mark_as_not_fast_regexp();

        re_ast = yyget_extra(yyscanner);
        re_ast->flags |= RE_FLAGS_UNGREEDY;

        (yyval.re_node) = yr_re_node_create(RE_NODE_PLUS, (yyvsp[-2].re_node), NULL);

        DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-2].re_node));
        ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
 
         (yyval.re_node)->greedy = FALSE;
       }
//flaw_line_below:
#line 1478 ""re_grammar.c"" /* yacc.c:1646  */
//fix_flaw_line_below:
//#line 1490 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 13:
//flaw_line_below:
#line 222 ""re_grammar.y"" /* yacc.c:1646  */
//fix_flaw_line_below:
//#line 234 ""re_grammar.y"" /* yacc.c:1646  */
     {
         RE_AST* re_ast = yyget_extra(yyscanner);
         re_ast->flags |= RE_FLAGS_GREEDY;

        if ((yyvsp[-1].re_node)->type == RE_NODE_ANY)
        {
          (yyval.re_node) = yr_re_node_create(RE_NODE_RANGE_ANY, NULL, NULL);
          DESTROY_NODE_IF(TRUE, (yyvsp[-1].re_node));
        }
        else
        {
          mark_as_not_fast_regexp();
          (yyval.re_node) = yr_re_node_create(RE_NODE_RANGE, (yyvsp[-1].re_node), NULL);
          DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-1].re_node));
        }

        DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-1].re_node));
        ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);

         (yyval.re_node)->start = 0;
         (yyval.re_node)->end = 1;
       }
//flaw_line_below:
#line 1505 ""re_grammar.c"" /* yacc.c:1646  */
//fix_flaw_line_below:
//#line 1517 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 14:
//flaw_line_below:
#line 245 ""re_grammar.y"" /* yacc.c:1646  */
//fix_flaw_line_below:
//#line 257 ""re_grammar.y"" /* yacc.c:1646  */
     {
         RE_AST* re_ast = yyget_extra(yyscanner);
         re_ast->flags |= RE_FLAGS_UNGREEDY;

        if ((yyvsp[-2].re_node)->type == RE_NODE_ANY)
        {
          (yyval.re_node) = yr_re_node_create(RE_NODE_RANGE_ANY, NULL, NULL);
          DESTROY_NODE_IF(TRUE, (yyvsp[-2].re_node));
        }
        else
        {
          mark_as_not_fast_regexp();
          (yyval.re_node) = yr_re_node_create(RE_NODE_RANGE, (yyvsp[-2].re_node), NULL);
          DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-2].re_node));
        }

        DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-2].re_node));
        ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);

        (yyval.re_node)->start = 0;
         (yyval.re_node)->end = 1;
         (yyval.re_node)->greedy = FALSE;
       }
//flaw_line_below:
#line 1533 ""re_grammar.c"" /* yacc.c:1646  */
//fix_flaw_line_below:
//#line 1545 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 15:
//flaw_line_below:
#line 269 ""re_grammar.y"" /* yacc.c:1646  */
//fix_flaw_line_below:
//#line 281 ""re_grammar.y"" /* yacc.c:1646  */
     {
         RE_AST* re_ast = yyget_extra(yyscanner);
         re_ast->flags |= RE_FLAGS_GREEDY;

        if ((yyvsp[-1].re_node)->type == RE_NODE_ANY)
        {
          (yyval.re_node) = yr_re_node_create(RE_NODE_RANGE_ANY, NULL, NULL);
          DESTROY_NODE_IF(TRUE, (yyvsp[-1].re_node));
        }
        else
        {
          mark_as_not_fast_regexp();
          (yyval.re_node) = yr_re_node_create(RE_NODE_RANGE, (yyvsp[-1].re_node), NULL);
          DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-1].re_node));
        }

        ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);

         (yyval.re_node)->start = (yyvsp[0].range) & 0xFFFF;;
         (yyval.re_node)->end = (yyvsp[0].range) >> 16;;
       }
//flaw_line_below:
#line 1559 ""re_grammar.c"" /* yacc.c:1646  */
//fix_flaw_line_below:
//#line 1571 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 16:
//flaw_line_below:
#line 291 ""re_grammar.y"" /* yacc.c:1646  */
//fix_flaw_line_below:
//#line 303 ""re_grammar.y"" /* yacc.c:1646  */
     {
         RE_AST* re_ast = yyget_extra(yyscanner);
         re_ast->flags |= RE_FLAGS_UNGREEDY;

        if ((yyvsp[-2].re_node)->type == RE_NODE_ANY)
        {
          (yyval.re_node) = yr_re_node_create(RE_NODE_RANGE_ANY, NULL, NULL);
          DESTROY_NODE_IF(TRUE, (yyvsp[-2].re_node));
        }
        else
        {
          mark_as_not_fast_regexp();
          (yyval.re_node) = yr_re_node_create(RE_NODE_RANGE, (yyvsp[-2].re_node), NULL);
          DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-2].re_node));
        }

        ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);

        (yyval.re_node)->start = (yyvsp[-1].range) & 0xFFFF;;
         (yyval.re_node)->end = (yyvsp[-1].range) >> 16;;
         (yyval.re_node)->greedy = FALSE;
       }
//flaw_line_below:
#line 1586 ""re_grammar.c"" /* yacc.c:1646  */
//fix_flaw_line_below:
//#line 1598 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 17:
//flaw_line_below:
#line 314 ""re_grammar.y"" /* yacc.c:1646  */
//fix_flaw_line_below:
//#line 326 ""re_grammar.y"" /* yacc.c:1646  */
     {
         (yyval.re_node) = (yyvsp[0].re_node);
       }
//flaw_line_below:
#line 1594 ""re_grammar.c"" /* yacc.c:1646  */
//fix_flaw_line_below:
//#line 1606 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 18:
//flaw_line_below:
#line 318 ""re_grammar.y"" /* yacc.c:1646  */
//fix_flaw_line_below:
//#line 330 ""re_grammar.y"" /* yacc.c:1646  */
     {
         (yyval.re_node) = yr_re_node_create(RE_NODE_WORD_BOUNDARY, NULL, NULL);
 
         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
       }
//flaw_line_below:
#line 1604 ""re_grammar.c"" /* yacc.c:1646  */
//fix_flaw_line_below:
//#line 1616 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 19:
//flaw_line_below:
#line 324 ""re_grammar.y"" /* yacc.c:1646  */
//fix_flaw_line_below:
//#line 336 ""re_grammar.y"" /* yacc.c:1646  */
     {
         (yyval.re_node) = yr_re_node_create(RE_NODE_NON_WORD_BOUNDARY, NULL, NULL);
 
         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
       }
//flaw_line_below:
#line 1614 ""re_grammar.c"" /* yacc.c:1646  */
//fix_flaw_line_below:
//#line 1626 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 20:
//flaw_line_below:
#line 330 ""re_grammar.y"" /* yacc.c:1646  */
//fix_flaw_line_below:
//#line 342 ""re_grammar.y"" /* yacc.c:1646  */
     {
         (yyval.re_node) = yr_re_node_create(RE_NODE_ANCHOR_START, NULL, NULL);
 
         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
       }
//flaw_line_below:
#line 1624 ""re_grammar.c"" /* yacc.c:1646  */
//fix_flaw_line_below:
//#line 1636 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 21:
//flaw_line_below:
#line 336 ""re_grammar.y"" /* yacc.c:1646  */
//fix_flaw_line_below:
//#line 348 ""re_grammar.y"" /* yacc.c:1646  */
     {
         (yyval.re_node) = yr_re_node_create(RE_NODE_ANCHOR_END, NULL, NULL);
 
         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
       }
//flaw_line_below:
#line 1634 ""re_grammar.c"" /* yacc.c:1646  */
//fix_flaw_line_below:
//#line 1646 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 22:
//flaw_line_below:
#line 345 ""re_grammar.y"" /* yacc.c:1646  */
//fix_flaw_line_below:
//#line 357 ""re_grammar.y"" /* yacc.c:1646  */
     {
//fix_flaw_line_below:
//        incr_ast_levels();
//fix_flaw_line_below:
//
         (yyval.re_node) = (yyvsp[-1].re_node);
       }
//flaw_line_below:
#line 1642 ""re_grammar.c"" /* yacc.c:1646  */
//fix_flaw_line_below:
//#line 1656 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 23:
//flaw_line_below:
#line 349 ""re_grammar.y"" /* yacc.c:1646  */
//fix_flaw_line_below:
//#line 363 ""re_grammar.y"" /* yacc.c:1646  */
     {
         (yyval.re_node) = yr_re_node_create(RE_NODE_ANY, NULL, NULL);
 
         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
       }
//flaw_line_below:
#line 1652 ""re_grammar.c"" /* yacc.c:1646  */
//fix_flaw_line_below:
//#line 1666 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 24:
//flaw_line_below:
#line 355 ""re_grammar.y"" /* yacc.c:1646  */
//fix_flaw_line_below:
//#line 369 ""re_grammar.y"" /* yacc.c:1646  */
     {
         (yyval.re_node) = yr_re_node_create(RE_NODE_LITERAL, NULL, NULL);
 
         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
 
         (yyval.re_node)->value = (yyvsp[0].integer);
       }
//flaw_line_below:
#line 1664 ""re_grammar.c"" /* yacc.c:1646  */
//fix_flaw_line_below:
//#line 1678 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 25:
//flaw_line_below:
#line 363 ""re_grammar.y"" /* yacc.c:1646  */
//fix_flaw_line_below:
//#line 377 ""re_grammar.y"" /* yacc.c:1646  */
     {
         (yyval.re_node) = yr_re_node_create(RE_NODE_WORD_CHAR, NULL, NULL);
 
         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
       }
//flaw_line_below:
#line 1674 ""re_grammar.c"" /* yacc.c:1646  */
//fix_flaw_line_below:
//#line 1688 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 26:
//flaw_line_below:
#line 369 ""re_grammar.y"" /* yacc.c:1646  */
//fix_flaw_line_below:
//#line 383 ""re_grammar.y"" /* yacc.c:1646  */
     {
         (yyval.re_node) = yr_re_node_create(RE_NODE_NON_WORD_CHAR, NULL, NULL);
 
         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
       }
//flaw_line_below:
#line 1684 ""re_grammar.c"" /* yacc.c:1646  */
//fix_flaw_line_below:
//#line 1698 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 27:
//flaw_line_below:
#line 375 ""re_grammar.y"" /* yacc.c:1646  */
//fix_flaw_line_below:
//#line 389 ""re_grammar.y"" /* yacc.c:1646  */
     {
         (yyval.re_node) = yr_re_node_create(RE_NODE_SPACE, NULL, NULL);
 
         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
       }
//flaw_line_below:
#line 1694 ""re_grammar.c"" /* yacc.c:1646  */
//fix_flaw_line_below:
//#line 1708 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 28:
//flaw_line_below:
#line 381 ""re_grammar.y"" /* yacc.c:1646  */
//fix_flaw_line_below:
//#line 395 ""re_grammar.y"" /* yacc.c:1646  */
     {
          (yyval.re_node) = yr_re_node_create(RE_NODE_NON_SPACE, NULL, NULL);
 
          ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
       }
//flaw_line_below:
#line 1704 ""re_grammar.c"" /* yacc.c:1646  */
//fix_flaw_line_below:
//#line 1718 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 29:
//flaw_line_below:
#line 387 ""re_grammar.y"" /* yacc.c:1646  */
//fix_flaw_line_below:
//#line 401 ""re_grammar.y"" /* yacc.c:1646  */
     {
         (yyval.re_node) = yr_re_node_create(RE_NODE_DIGIT, NULL, NULL);
 
         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
       }
//flaw_line_below:
#line 1714 ""re_grammar.c"" /* yacc.c:1646  */
//fix_flaw_line_below:
//#line 1728 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 30:
//flaw_line_below:
#line 393 ""re_grammar.y"" /* yacc.c:1646  */
//fix_flaw_line_below:
//#line 407 ""re_grammar.y"" /* yacc.c:1646  */
     {
         (yyval.re_node) = yr_re_node_create(RE_NODE_NON_DIGIT, NULL, NULL);
 
         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
       }
//flaw_line_below:
#line 1724 ""re_grammar.c"" /* yacc.c:1646  */
//fix_flaw_line_below:
//#line 1738 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
   case 31:
//flaw_line_below:
#line 399 ""re_grammar.y"" /* yacc.c:1646  */
//fix_flaw_line_below:
//#line 413 ""re_grammar.y"" /* yacc.c:1646  */
     {
         (yyval.re_node) = yr_re_node_create(RE_NODE_CLASS, NULL, NULL);
 
         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
 
         (yyval.re_node)->class_vector = (yyvsp[0].class_vector);
       }
//flaw_line_below:
#line 1736 ""re_grammar.c"" /* yacc.c:1646  */
//fix_flaw_line_below:
//#line 1750 ""re_grammar.c"" /* yacc.c:1646  */
     break;
 
 
//flaw_line_below:
#line 1740 ""re_grammar.c"" /* yacc.c:1646  */
//fix_flaw_line_below:
//#line 1754 ""re_grammar.c"" /* yacc.c:1646  */
       default: break;
     }
   /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT (""-> $$ ="", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;

  /* Now 'shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*--------------------------------------.
| yyerrlab -- here on detecting error.  |
`--------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYEMPTY : YYTRANSLATE (yychar);

  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (yyscanner, lex_env, YY_(""syntax error""));
#else
# define YYSYNTAX_ERROR yysyntax_error (&yymsg_alloc, &yymsg, \
                                        yyssp, yytoken)
      {
        char const *yymsgp = YY_(""syntax error"");
        int yysyntax_error_status;
        yysyntax_error_status = YYSYNTAX_ERROR;
        if (yysyntax_error_status == 0)
          yymsgp = yymsg;
        else if (yysyntax_error_status == 1)
          {
            if (yymsg != yymsgbuf)
              YYSTACK_FREE (yymsg);
            yymsg = (char *) YYSTACK_ALLOC (yymsg_alloc);
            if (!yymsg)
              {
                yymsg = yymsgbuf;
                yymsg_alloc = sizeof yymsgbuf;
                yysyntax_error_status = 2;
              }
            else
              {
                yysyntax_error_status = YYSYNTAX_ERROR;
                yymsgp = yymsg;
              }
          }
        yyerror (yyscanner, lex_env, yymsgp);
        if (yysyntax_error_status == 2)
          goto yyexhaustedlab;
      }
# undef YYSYNTAX_ERROR
#endif
    }



  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
         error, discard it.  */

      if (yychar <= YYEOF)
        {
          /* Return failure if at end of input.  */
          if (yychar == YYEOF)
            YYABORT;
        }
      else
        {
          yydestruct (""Error: discarding"",
                      yytoken, &yylval, yyscanner, lex_env);
          yychar = YYEMPTY;
        }
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  /* Do not reclaim the symbols of the rule whose action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;      /* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
        {
          yyn += YYTERROR;
          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
            {
              yyn = yytable[yyn];
              if (0 < yyn)
                break;
            }
        }

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
        YYABORT;


      yydestruct (""Error: popping"",
                  yystos[yystate], yyvsp, yyscanner, lex_env);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END


  /* Shift the error token.  */
  YY_SYMBOL_PRINT (""Shifting"", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#if !defined yyoverflow || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (yyscanner, lex_env, YY_(""memory exhausted""));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct (""Cleanup: discarding lookahead"",
                  yytoken, &yylval, yyscanner, lex_env);
    }
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct (""Cleanup: popping"",
                  yystos[*yyssp], yyvsp, yyscanner, lex_env);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
 #endif
   return yyresult;
 }
"
4506,182242,,Local,Not required,Partial,CVE-2018-16426,https://www.cvedetails.com/cve/CVE-2018-16426/,CWE-674,Low,,,,2018-09-03,2.1,Endless recursion when handling responses from an IAS-ECC card in iasecc_select_file in libopensc/card-iasecc.c in OpenSC before 0.19.0-rc1 could be used by attackers able to supply crafted smartcards to hang or crash the opensc library using programs.,2019-10-02,,5,https://github.com/OpenSC/OpenSC/commit/03628449b75a93787eb2359412a3980365dda49b#diff-f8c0128e14031ed9307d47f10f601b54,03628449b75a93787eb2359412a3980365dda49b#diff-f8c0128e14031ed9307d47f10f601b54,iasecc: fixed unbound recursion,5,src/libopensc/card-iasecc.c,"{""sha"": ""b37b833b7760ae807b793deb38e5ab4d459f5b74"", ""filename"": ""src/libopensc/card-iasecc.c"", ""status"": ""modified"", ""additions"": 5, ""deletions"": 5, ""changes"": 10, ""blob_url"": ""https://github.com/OpenSC/OpenSC/blob/03628449b75a93787eb2359412a3980365dda49b/src/libopensc/card-iasecc.c"", ""raw_url"": ""https://github.com/OpenSC/OpenSC/raw/03628449b75a93787eb2359412a3980365dda49b/src/libopensc/card-iasecc.c"", ""contents_url"": ""https://api.github.com/repos/OpenSC/OpenSC/contents/src/libopensc/card-iasecc.c?ref=03628449b75a93787eb2359412a3980365dda49b"", ""patch"": ""@@ -827,16 +827,16 @@ iasecc_select_file(struct sc_card *card, const struct sc_path *path,\n \tsc_log(ctx, \""iasecc_select_file() path:%s\"", sc_print_path(path));\n \n \tsc_print_cache(card);\n-\tif (lpath.len >= 2 && lpath.value[0] == 0x3F && lpath.value[1] == 0x00)   {\n+\tif (path->type != SC_PATH_TYPE_DF_NAME\n+\t\t\t&& lpath.len >= 2\n+\t\t\t&& lpath.value[0] == 0x3F && lpath.value[1] == 0x00)   {\n \t\tsc_log(ctx, \""EF.ATR(aid:'%s')\"", card->ef_atr ? sc_dump_hex(card->ef_atr->aid.value, card->ef_atr->aid.len) : \""\"");\n \n \t\trv = iasecc_select_mf(card, file_out);\n \t\tLOG_TEST_RET(ctx, rv, \""MF selection error\"");\n \n-\t\tif (lpath.len >= 2 && lpath.value[0] == 0x3F && lpath.value[1] == 0x00)\t   {\n-\t\t\tmemmove(&lpath.value[0], &lpath.value[2], lpath.len - 2);\n-\t\t\tlpath.len -=  2;\n-\t\t}\n+\t\tmemmove(&lpath.value[0], &lpath.value[2], lpath.len - 2);\n+\t\tlpath.len -=  2;\n \t}\n \n \tif (lpath.aid.len)\t{""}","iasecc_select_file(struct sc_card *card, const struct sc_path *path,
		 struct sc_file **file_out)
{
	struct sc_context *ctx = card->ctx;
	struct sc_path lpath;
	int cache_valid = card->cache.valid, df_from_cache = 0;
	int rv, ii;

	LOG_FUNC_CALLED(ctx);
	memcpy(&lpath, path, sizeof(struct sc_path));
	if (file_out)
		*file_out = NULL;

	sc_log(ctx,
	       ""iasecc_select_file(card:%p) path.len %""SC_FORMAT_LEN_SIZE_T""u; path.type %i; aid_len %""SC_FORMAT_LEN_SIZE_T""u"",
	       card, path->len, path->type, path->aid.len);
 	sc_log(ctx, ""iasecc_select_file() path:%s"", sc_print_path(path));
 
 	sc_print_cache(card);
	if (path->type != SC_PATH_TYPE_DF_NAME
			&& lpath.len >= 2
			&& lpath.value[0] == 0x3F && lpath.value[1] == 0x00)   {
 		sc_log(ctx, ""EF.ATR(aid:'%s')"", card->ef_atr ? sc_dump_hex(card->ef_atr->aid.value, card->ef_atr->aid.len) : """");
 
 		rv = iasecc_select_mf(card, file_out);
 		LOG_TEST_RET(ctx, rv, ""MF selection error"");
 
		memmove(&lpath.value[0], &lpath.value[2], lpath.len - 2);
		lpath.len -=  2;
 	}
 
 	if (lpath.aid.len)	{
		struct sc_file *file = NULL;
		struct sc_path ppath;

		sc_log(ctx,
		       ""iasecc_select_file() select parent AID:%p/%""SC_FORMAT_LEN_SIZE_T""u"",
		       lpath.aid.value, lpath.aid.len);
		sc_log(ctx, ""iasecc_select_file() select parent AID:%s"", sc_dump_hex(lpath.aid.value, lpath.aid.len));
		memset(&ppath, 0, sizeof(ppath));
		memcpy(ppath.value, lpath.aid.value, lpath.aid.len);
		ppath.len = lpath.aid.len;
		ppath.type = SC_PATH_TYPE_DF_NAME;

		if (card->cache.valid && card->cache.current_df
				&& card->cache.current_df->path.len == lpath.aid.len
				&& !memcmp(card->cache.current_df->path.value, lpath.aid.value, lpath.aid.len))
			df_from_cache = 1;

		rv = iasecc_select_file(card, &ppath, &file);
		LOG_TEST_RET(ctx, rv, ""select AID path failed"");

		if (file_out)
			*file_out = file;
		else
		   sc_file_free(file);

		if (lpath.type == SC_PATH_TYPE_DF_NAME)
			lpath.type = SC_PATH_TYPE_FROM_CURRENT;
	}

	if (lpath.type == SC_PATH_TYPE_PATH)
		lpath.type = SC_PATH_TYPE_FROM_CURRENT;

	if (!lpath.len)
		LOG_FUNC_RETURN(ctx, SC_SUCCESS);

	sc_print_cache(card);

	if (card->cache.valid && card->cache.current_df && lpath.type == SC_PATH_TYPE_DF_NAME
			&& card->cache.current_df->path.len == lpath.len
			&& !memcmp(card->cache.current_df->path.value, lpath.value, lpath.len))   {
		sc_log(ctx, ""returns current DF path %s"", sc_print_path(&card->cache.current_df->path));
		if (file_out)   {
			sc_file_free(*file_out);
			sc_file_dup(file_out, card->cache.current_df);
		}

		sc_print_cache(card);
		LOG_FUNC_RETURN(ctx, SC_SUCCESS);
	}

	do   {
		struct sc_apdu apdu;
		struct sc_file *file = NULL;
		unsigned char rbuf[SC_MAX_APDU_BUFFER_SIZE];
		int pathlen = lpath.len;

		sc_format_apdu(card, &apdu, SC_APDU_CASE_4_SHORT, 0xA4, 0x00, 0x00);

		if (card->type != SC_CARD_TYPE_IASECC_GEMALTO
				&& card->type != SC_CARD_TYPE_IASECC_OBERTHUR
				&& card->type != SC_CARD_TYPE_IASECC_SAGEM
				&& card->type != SC_CARD_TYPE_IASECC_AMOS
				&& card->type != SC_CARD_TYPE_IASECC_MI
				&& card->type != SC_CARD_TYPE_IASECC_MI2)
			LOG_TEST_RET(ctx, SC_ERROR_NOT_SUPPORTED, ""Unsupported card"");

		if (lpath.type == SC_PATH_TYPE_FILE_ID)   {
			apdu.p1 = 0x02;
			if (card->type == SC_CARD_TYPE_IASECC_OBERTHUR)   {
				apdu.p1 = 0x01;
				apdu.p2 = 0x04;
			}
			if (card->type == SC_CARD_TYPE_IASECC_AMOS)
				apdu.p2 = 0x04;
			if (card->type == SC_CARD_TYPE_IASECC_MI)
				apdu.p2 = 0x04;
			if (card->type == SC_CARD_TYPE_IASECC_MI2)
				apdu.p2 = 0x04;
		}
		else if (lpath.type == SC_PATH_TYPE_FROM_CURRENT)  {
			apdu.p1 = 0x09;
			if (card->type == SC_CARD_TYPE_IASECC_OBERTHUR)
				apdu.p2 = 0x04;
			if (card->type == SC_CARD_TYPE_IASECC_AMOS)
				apdu.p2 = 0x04;
			if (card->type == SC_CARD_TYPE_IASECC_MI)
				apdu.p2 = 0x04;
			if (card->type == SC_CARD_TYPE_IASECC_MI2)
				apdu.p2 = 0x04;
		}
		else if (lpath.type == SC_PATH_TYPE_PARENT)   {
			apdu.p1 = 0x03;
			pathlen = 0;
			apdu.cse = SC_APDU_CASE_2_SHORT;
		}
		else if (lpath.type == SC_PATH_TYPE_DF_NAME)   {
			apdu.p1 = 0x04;
			if (card->type == SC_CARD_TYPE_IASECC_AMOS)
				apdu.p2 = 0x04;
			if (card->type == SC_CARD_TYPE_IASECC_MI2)
				apdu.p2 = 0x04;
		}
		else   {
			sc_log(ctx, ""Invalid PATH type: 0x%X"", lpath.type);
			LOG_TEST_RET(ctx, SC_ERROR_NOT_SUPPORTED, ""iasecc_select_file() invalid PATH type"");
		}

		for (ii=0; ii<2; ii++)   {
			apdu.lc = pathlen;
			apdu.data = lpath.value;
			apdu.datalen = pathlen;

			apdu.resp = rbuf;
			apdu.resplen = sizeof(rbuf);
			apdu.le = 256;

			rv = sc_transmit_apdu(card, &apdu);
			LOG_TEST_RET(ctx, rv, ""APDU transmit failed"");
			rv = sc_check_sw(card, apdu.sw1, apdu.sw2);
			if (rv == SC_ERROR_INCORRECT_PARAMETERS &&
					lpath.type == SC_PATH_TYPE_DF_NAME && apdu.p2 == 0x00)   {
				apdu.p2 = 0x0C;
				continue;
			}

			if (ii)   {
				/* 'SELECT AID' do not returned FCP. Try to emulate. */
				apdu.resplen = sizeof(rbuf);
				rv = iasecc_emulate_fcp(ctx, &apdu);
				LOG_TEST_RET(ctx, rv, ""Failed to emulate DF FCP"");
			}

			break;
		}

		/*
		 * Using of the cached DF and EF can cause problems in the multi-thread environment.
		 * FIXME: introduce config. option that invalidates this cache outside the locked card session,
		 *        (or invent something else)
		 */
		if (rv == SC_ERROR_FILE_NOT_FOUND && cache_valid && df_from_cache)   {
			sc_invalidate_cache(card);
			sc_log(ctx, ""iasecc_select_file() file not found, retry without cached DF"");
			if (file_out)   {
				sc_file_free(*file_out);
				*file_out = NULL;
			}
			rv = iasecc_select_file(card, path, file_out);
			LOG_FUNC_RETURN(ctx, rv);
		}

		LOG_TEST_RET(ctx, rv, ""iasecc_select_file() check SW failed"");

		sc_log(ctx,
		       ""iasecc_select_file() apdu.resp %""SC_FORMAT_LEN_SIZE_T""u"",
		       apdu.resplen);
		if (apdu.resplen)   {
			sc_log(ctx, ""apdu.resp %02X:%02X:%02X..."", apdu.resp[0], apdu.resp[1], apdu.resp[2]);

			switch (apdu.resp[0]) {
			case 0x62:
			case 0x6F:
				file = sc_file_new();
				if (file == NULL)
					LOG_FUNC_RETURN(ctx, SC_ERROR_OUT_OF_MEMORY);
				file->path = lpath;

				rv = iasecc_process_fci(card, file, apdu.resp, apdu.resplen);
				if (rv)
					LOG_FUNC_RETURN(ctx, rv);
				break;
			default:
				LOG_FUNC_RETURN(ctx, SC_ERROR_UNKNOWN_DATA_RECEIVED);
			}

			sc_log(ctx, ""FileType %i"", file->type);
			if (file->type == SC_FILE_TYPE_DF)   {
				if (card->cache.valid)
					sc_file_free(card->cache.current_df);
				card->cache.current_df = NULL;


				if (card->cache.valid)
					sc_file_free(card->cache.current_ef);
				card->cache.current_ef = NULL;

				sc_file_dup(&card->cache.current_df, file);
				card->cache.valid = 1;
			}
			else   {
				if (card->cache.valid)
					sc_file_free(card->cache.current_ef);

				card->cache.current_ef = NULL;

				sc_file_dup(&card->cache.current_ef, file);
			}

			if (file_out)   {
				sc_file_free(*file_out);
				*file_out = file;
			}
			else   {
				sc_file_free(file);
			}
		}
		else if (lpath.type == SC_PATH_TYPE_DF_NAME)   {
			sc_file_free(card->cache.current_df);
			card->cache.current_df = NULL;

			sc_file_free(card->cache.current_ef);
			card->cache.current_ef = NULL;

			card->cache.valid = 1;
		}
	} while(0);

	sc_print_cache(card);
	LOG_FUNC_RETURN(ctx, SC_SUCCESS);
}
","iasecc_select_file(struct sc_card *card, const struct sc_path *path,
		 struct sc_file **file_out)
{
	struct sc_context *ctx = card->ctx;
	struct sc_path lpath;
	int cache_valid = card->cache.valid, df_from_cache = 0;
	int rv, ii;

	LOG_FUNC_CALLED(ctx);
	memcpy(&lpath, path, sizeof(struct sc_path));
	if (file_out)
		*file_out = NULL;

	sc_log(ctx,
	       ""iasecc_select_file(card:%p) path.len %""SC_FORMAT_LEN_SIZE_T""u; path.type %i; aid_len %""SC_FORMAT_LEN_SIZE_T""u"",
	       card, path->len, path->type, path->aid.len);
 	sc_log(ctx, ""iasecc_select_file() path:%s"", sc_print_path(path));
 
 	sc_print_cache(card);
	if (lpath.len >= 2 && lpath.value[0] == 0x3F && lpath.value[1] == 0x00)   {
 		sc_log(ctx, ""EF.ATR(aid:'%s')"", card->ef_atr ? sc_dump_hex(card->ef_atr->aid.value, card->ef_atr->aid.len) : """");
 
 		rv = iasecc_select_mf(card, file_out);
 		LOG_TEST_RET(ctx, rv, ""MF selection error"");
 
		if (lpath.len >= 2 && lpath.value[0] == 0x3F && lpath.value[1] == 0x00)	   {
			memmove(&lpath.value[0], &lpath.value[2], lpath.len - 2);
			lpath.len -=  2;
		}
 	}
 
 	if (lpath.aid.len)	{
		struct sc_file *file = NULL;
		struct sc_path ppath;

		sc_log(ctx,
		       ""iasecc_select_file() select parent AID:%p/%""SC_FORMAT_LEN_SIZE_T""u"",
		       lpath.aid.value, lpath.aid.len);
		sc_log(ctx, ""iasecc_select_file() select parent AID:%s"", sc_dump_hex(lpath.aid.value, lpath.aid.len));
		memset(&ppath, 0, sizeof(ppath));
		memcpy(ppath.value, lpath.aid.value, lpath.aid.len);
		ppath.len = lpath.aid.len;
		ppath.type = SC_PATH_TYPE_DF_NAME;

		if (card->cache.valid && card->cache.current_df
				&& card->cache.current_df->path.len == lpath.aid.len
				&& !memcmp(card->cache.current_df->path.value, lpath.aid.value, lpath.aid.len))
			df_from_cache = 1;

		rv = iasecc_select_file(card, &ppath, &file);
		LOG_TEST_RET(ctx, rv, ""select AID path failed"");

		if (file_out)
			*file_out = file;
		else
		   sc_file_free(file);

		if (lpath.type == SC_PATH_TYPE_DF_NAME)
			lpath.type = SC_PATH_TYPE_FROM_CURRENT;
	}

	if (lpath.type == SC_PATH_TYPE_PATH)
		lpath.type = SC_PATH_TYPE_FROM_CURRENT;

	if (!lpath.len)
		LOG_FUNC_RETURN(ctx, SC_SUCCESS);

	sc_print_cache(card);

	if (card->cache.valid && card->cache.current_df && lpath.type == SC_PATH_TYPE_DF_NAME
			&& card->cache.current_df->path.len == lpath.len
			&& !memcmp(card->cache.current_df->path.value, lpath.value, lpath.len))   {
		sc_log(ctx, ""returns current DF path %s"", sc_print_path(&card->cache.current_df->path));
		if (file_out)   {
			sc_file_free(*file_out);
			sc_file_dup(file_out, card->cache.current_df);
		}

		sc_print_cache(card);
		LOG_FUNC_RETURN(ctx, SC_SUCCESS);
	}

	do   {
		struct sc_apdu apdu;
		struct sc_file *file = NULL;
		unsigned char rbuf[SC_MAX_APDU_BUFFER_SIZE];
		int pathlen = lpath.len;

		sc_format_apdu(card, &apdu, SC_APDU_CASE_4_SHORT, 0xA4, 0x00, 0x00);

		if (card->type != SC_CARD_TYPE_IASECC_GEMALTO
				&& card->type != SC_CARD_TYPE_IASECC_OBERTHUR
				&& card->type != SC_CARD_TYPE_IASECC_SAGEM
				&& card->type != SC_CARD_TYPE_IASECC_AMOS
				&& card->type != SC_CARD_TYPE_IASECC_MI
				&& card->type != SC_CARD_TYPE_IASECC_MI2)
			LOG_TEST_RET(ctx, SC_ERROR_NOT_SUPPORTED, ""Unsupported card"");

		if (lpath.type == SC_PATH_TYPE_FILE_ID)   {
			apdu.p1 = 0x02;
			if (card->type == SC_CARD_TYPE_IASECC_OBERTHUR)   {
				apdu.p1 = 0x01;
				apdu.p2 = 0x04;
			}
			if (card->type == SC_CARD_TYPE_IASECC_AMOS)
				apdu.p2 = 0x04;
			if (card->type == SC_CARD_TYPE_IASECC_MI)
				apdu.p2 = 0x04;
			if (card->type == SC_CARD_TYPE_IASECC_MI2)
				apdu.p2 = 0x04;
		}
		else if (lpath.type == SC_PATH_TYPE_FROM_CURRENT)  {
			apdu.p1 = 0x09;
			if (card->type == SC_CARD_TYPE_IASECC_OBERTHUR)
				apdu.p2 = 0x04;
			if (card->type == SC_CARD_TYPE_IASECC_AMOS)
				apdu.p2 = 0x04;
			if (card->type == SC_CARD_TYPE_IASECC_MI)
				apdu.p2 = 0x04;
			if (card->type == SC_CARD_TYPE_IASECC_MI2)
				apdu.p2 = 0x04;
		}
		else if (lpath.type == SC_PATH_TYPE_PARENT)   {
			apdu.p1 = 0x03;
			pathlen = 0;
			apdu.cse = SC_APDU_CASE_2_SHORT;
		}
		else if (lpath.type == SC_PATH_TYPE_DF_NAME)   {
			apdu.p1 = 0x04;
			if (card->type == SC_CARD_TYPE_IASECC_AMOS)
				apdu.p2 = 0x04;
			if (card->type == SC_CARD_TYPE_IASECC_MI2)
				apdu.p2 = 0x04;
		}
		else   {
			sc_log(ctx, ""Invalid PATH type: 0x%X"", lpath.type);
			LOG_TEST_RET(ctx, SC_ERROR_NOT_SUPPORTED, ""iasecc_select_file() invalid PATH type"");
		}

		for (ii=0; ii<2; ii++)   {
			apdu.lc = pathlen;
			apdu.data = lpath.value;
			apdu.datalen = pathlen;

			apdu.resp = rbuf;
			apdu.resplen = sizeof(rbuf);
			apdu.le = 256;

			rv = sc_transmit_apdu(card, &apdu);
			LOG_TEST_RET(ctx, rv, ""APDU transmit failed"");
			rv = sc_check_sw(card, apdu.sw1, apdu.sw2);
			if (rv == SC_ERROR_INCORRECT_PARAMETERS &&
					lpath.type == SC_PATH_TYPE_DF_NAME && apdu.p2 == 0x00)   {
				apdu.p2 = 0x0C;
				continue;
			}

			if (ii)   {
				/* 'SELECT AID' do not returned FCP. Try to emulate. */
				apdu.resplen = sizeof(rbuf);
				rv = iasecc_emulate_fcp(ctx, &apdu);
				LOG_TEST_RET(ctx, rv, ""Failed to emulate DF FCP"");
			}

			break;
		}

		/*
		 * Using of the cached DF and EF can cause problems in the multi-thread environment.
		 * FIXME: introduce config. option that invalidates this cache outside the locked card session,
		 *        (or invent something else)
		 */
		if (rv == SC_ERROR_FILE_NOT_FOUND && cache_valid && df_from_cache)   {
			sc_invalidate_cache(card);
			sc_log(ctx, ""iasecc_select_file() file not found, retry without cached DF"");
			if (file_out)   {
				sc_file_free(*file_out);
				*file_out = NULL;
			}
			rv = iasecc_select_file(card, path, file_out);
			LOG_FUNC_RETURN(ctx, rv);
		}

		LOG_TEST_RET(ctx, rv, ""iasecc_select_file() check SW failed"");

		sc_log(ctx,
		       ""iasecc_select_file() apdu.resp %""SC_FORMAT_LEN_SIZE_T""u"",
		       apdu.resplen);
		if (apdu.resplen)   {
			sc_log(ctx, ""apdu.resp %02X:%02X:%02X..."", apdu.resp[0], apdu.resp[1], apdu.resp[2]);

			switch (apdu.resp[0]) {
			case 0x62:
			case 0x6F:
				file = sc_file_new();
				if (file == NULL)
					LOG_FUNC_RETURN(ctx, SC_ERROR_OUT_OF_MEMORY);
				file->path = lpath;

				rv = iasecc_process_fci(card, file, apdu.resp, apdu.resplen);
				if (rv)
					LOG_FUNC_RETURN(ctx, rv);
				break;
			default:
				LOG_FUNC_RETURN(ctx, SC_ERROR_UNKNOWN_DATA_RECEIVED);
			}

			sc_log(ctx, ""FileType %i"", file->type);
			if (file->type == SC_FILE_TYPE_DF)   {
				if (card->cache.valid)
					sc_file_free(card->cache.current_df);
				card->cache.current_df = NULL;


				if (card->cache.valid)
					sc_file_free(card->cache.current_ef);
				card->cache.current_ef = NULL;

				sc_file_dup(&card->cache.current_df, file);
				card->cache.valid = 1;
			}
			else   {
				if (card->cache.valid)
					sc_file_free(card->cache.current_ef);

				card->cache.current_ef = NULL;

				sc_file_dup(&card->cache.current_ef, file);
			}

			if (file_out)   {
				sc_file_free(*file_out);
				*file_out = file;
			}
			else   {
				sc_file_free(file);
			}
		}
		else if (lpath.type == SC_PATH_TYPE_DF_NAME)   {
			sc_file_free(card->cache.current_df);
			card->cache.current_df = NULL;

			sc_file_free(card->cache.current_ef);
			card->cache.current_ef = NULL;

			card->cache.valid = 1;
		}
	} while(0);

	sc_print_cache(card);
	LOG_FUNC_RETURN(ctx, SC_SUCCESS);
}
",C,"	if (path->type != SC_PATH_TYPE_DF_NAME
			&& lpath.len >= 2
			&& lpath.value[0] == 0x3F && lpath.value[1] == 0x00)   {
		memmove(&lpath.value[0], &lpath.value[2], lpath.len - 2);
		lpath.len -=  2;
","	if (lpath.len >= 2 && lpath.value[0] == 0x3F && lpath.value[1] == 0x00)   {
		if (lpath.len >= 2 && lpath.value[0] == 0x3F && lpath.value[1] == 0x00)	   {
			memmove(&lpath.value[0], &lpath.value[2], lpath.len - 2);
			lpath.len -=  2;
		}
",,"@@ -827,16 +827,16 @@ iasecc_select_file(struct sc_card *card, const struct sc_path *path,
 	sc_log(ctx, ""iasecc_select_file() path:%s"", sc_print_path(path));
 
 	sc_print_cache(card);
-	if (lpath.len >= 2 && lpath.value[0] == 0x3F && lpath.value[1] == 0x00)   {
+	if (path->type != SC_PATH_TYPE_DF_NAME
+			&& lpath.len >= 2
+			&& lpath.value[0] == 0x3F && lpath.value[1] == 0x00)   {
 		sc_log(ctx, ""EF.ATR(aid:'%s')"", card->ef_atr ? sc_dump_hex(card->ef_atr->aid.value, card->ef_atr->aid.len) : """");
 
 		rv = iasecc_select_mf(card, file_out);
 		LOG_TEST_RET(ctx, rv, ""MF selection error"");
 
-		if (lpath.len >= 2 && lpath.value[0] == 0x3F && lpath.value[1] == 0x00)	   {
-			memmove(&lpath.value[0], &lpath.value[2], lpath.len - 2);
-			lpath.len -=  2;
-		}
+		memmove(&lpath.value[0], &lpath.value[2], lpath.len - 2);
+		lpath.len -=  2;
 	}
 
 	if (lpath.aid.len)	{",OpenSC,03628449b75a93787eb2359412a3980365dda49b#diff-f8c0128e14031ed9307d47f10f601b54,5807368ed44a6feb78e6107eaa2f337d474a8d36,1,"iasecc_select_file(struct sc_card *card, const struct sc_path *path,
		 struct sc_file **file_out)
{
	struct sc_context *ctx = card->ctx;
	struct sc_path lpath;
	int cache_valid = card->cache.valid, df_from_cache = 0;
	int rv, ii;

	LOG_FUNC_CALLED(ctx);
	memcpy(&lpath, path, sizeof(struct sc_path));
	if (file_out)
		*file_out = NULL;

	sc_log(ctx,
	       ""iasecc_select_file(card:%p) path.len %""SC_FORMAT_LEN_SIZE_T""u; path.type %i; aid_len %""SC_FORMAT_LEN_SIZE_T""u"",
	       card, path->len, path->type, path->aid.len);
 	sc_log(ctx, ""iasecc_select_file() path:%s"", sc_print_path(path));
 
 	sc_print_cache(card);
//flaw_line_below:
	if (lpath.len >= 2 && lpath.value[0] == 0x3F && lpath.value[1] == 0x00)   {
//fix_flaw_line_below:
//	if (path->type != SC_PATH_TYPE_DF_NAME
//fix_flaw_line_below:
//			&& lpath.len >= 2
//fix_flaw_line_below:
//			&& lpath.value[0] == 0x3F && lpath.value[1] == 0x00)   {
 		sc_log(ctx, ""EF.ATR(aid:'%s')"", card->ef_atr ? sc_dump_hex(card->ef_atr->aid.value, card->ef_atr->aid.len) : """");
 
 		rv = iasecc_select_mf(card, file_out);
 		LOG_TEST_RET(ctx, rv, ""MF selection error"");
 
//flaw_line_below:
		if (lpath.len >= 2 && lpath.value[0] == 0x3F && lpath.value[1] == 0x00)	   {
//flaw_line_below:
			memmove(&lpath.value[0], &lpath.value[2], lpath.len - 2);
//flaw_line_below:
			lpath.len -=  2;
//flaw_line_below:
		}
//fix_flaw_line_below:
//		memmove(&lpath.value[0], &lpath.value[2], lpath.len - 2);
//fix_flaw_line_below:
//		lpath.len -=  2;
 	}
 
 	if (lpath.aid.len)	{
		struct sc_file *file = NULL;
		struct sc_path ppath;

		sc_log(ctx,
		       ""iasecc_select_file() select parent AID:%p/%""SC_FORMAT_LEN_SIZE_T""u"",
		       lpath.aid.value, lpath.aid.len);
		sc_log(ctx, ""iasecc_select_file() select parent AID:%s"", sc_dump_hex(lpath.aid.value, lpath.aid.len));
		memset(&ppath, 0, sizeof(ppath));
		memcpy(ppath.value, lpath.aid.value, lpath.aid.len);
		ppath.len = lpath.aid.len;
		ppath.type = SC_PATH_TYPE_DF_NAME;

		if (card->cache.valid && card->cache.current_df
				&& card->cache.current_df->path.len == lpath.aid.len
				&& !memcmp(card->cache.current_df->path.value, lpath.aid.value, lpath.aid.len))
			df_from_cache = 1;

		rv = iasecc_select_file(card, &ppath, &file);
		LOG_TEST_RET(ctx, rv, ""select AID path failed"");

		if (file_out)
			*file_out = file;
		else
		   sc_file_free(file);

		if (lpath.type == SC_PATH_TYPE_DF_NAME)
			lpath.type = SC_PATH_TYPE_FROM_CURRENT;
	}

	if (lpath.type == SC_PATH_TYPE_PATH)
		lpath.type = SC_PATH_TYPE_FROM_CURRENT;

	if (!lpath.len)
		LOG_FUNC_RETURN(ctx, SC_SUCCESS);

	sc_print_cache(card);

	if (card->cache.valid && card->cache.current_df && lpath.type == SC_PATH_TYPE_DF_NAME
			&& card->cache.current_df->path.len == lpath.len
			&& !memcmp(card->cache.current_df->path.value, lpath.value, lpath.len))   {
		sc_log(ctx, ""returns current DF path %s"", sc_print_path(&card->cache.current_df->path));
		if (file_out)   {
			sc_file_free(*file_out);
			sc_file_dup(file_out, card->cache.current_df);
		}

		sc_print_cache(card);
		LOG_FUNC_RETURN(ctx, SC_SUCCESS);
	}

	do   {
		struct sc_apdu apdu;
		struct sc_file *file = NULL;
		unsigned char rbuf[SC_MAX_APDU_BUFFER_SIZE];
		int pathlen = lpath.len;

		sc_format_apdu(card, &apdu, SC_APDU_CASE_4_SHORT, 0xA4, 0x00, 0x00);

		if (card->type != SC_CARD_TYPE_IASECC_GEMALTO
				&& card->type != SC_CARD_TYPE_IASECC_OBERTHUR
				&& card->type != SC_CARD_TYPE_IASECC_SAGEM
				&& card->type != SC_CARD_TYPE_IASECC_AMOS
				&& card->type != SC_CARD_TYPE_IASECC_MI
				&& card->type != SC_CARD_TYPE_IASECC_MI2)
			LOG_TEST_RET(ctx, SC_ERROR_NOT_SUPPORTED, ""Unsupported card"");

		if (lpath.type == SC_PATH_TYPE_FILE_ID)   {
			apdu.p1 = 0x02;
			if (card->type == SC_CARD_TYPE_IASECC_OBERTHUR)   {
				apdu.p1 = 0x01;
				apdu.p2 = 0x04;
			}
			if (card->type == SC_CARD_TYPE_IASECC_AMOS)
				apdu.p2 = 0x04;
			if (card->type == SC_CARD_TYPE_IASECC_MI)
				apdu.p2 = 0x04;
			if (card->type == SC_CARD_TYPE_IASECC_MI2)
				apdu.p2 = 0x04;
		}
		else if (lpath.type == SC_PATH_TYPE_FROM_CURRENT)  {
			apdu.p1 = 0x09;
			if (card->type == SC_CARD_TYPE_IASECC_OBERTHUR)
				apdu.p2 = 0x04;
			if (card->type == SC_CARD_TYPE_IASECC_AMOS)
				apdu.p2 = 0x04;
			if (card->type == SC_CARD_TYPE_IASECC_MI)
				apdu.p2 = 0x04;
			if (card->type == SC_CARD_TYPE_IASECC_MI2)
				apdu.p2 = 0x04;
		}
		else if (lpath.type == SC_PATH_TYPE_PARENT)   {
			apdu.p1 = 0x03;
			pathlen = 0;
			apdu.cse = SC_APDU_CASE_2_SHORT;
		}
		else if (lpath.type == SC_PATH_TYPE_DF_NAME)   {
			apdu.p1 = 0x04;
			if (card->type == SC_CARD_TYPE_IASECC_AMOS)
				apdu.p2 = 0x04;
			if (card->type == SC_CARD_TYPE_IASECC_MI2)
				apdu.p2 = 0x04;
		}
		else   {
			sc_log(ctx, ""Invalid PATH type: 0x%X"", lpath.type);
			LOG_TEST_RET(ctx, SC_ERROR_NOT_SUPPORTED, ""iasecc_select_file() invalid PATH type"");
		}

		for (ii=0; ii<2; ii++)   {
			apdu.lc = pathlen;
			apdu.data = lpath.value;
			apdu.datalen = pathlen;

			apdu.resp = rbuf;
			apdu.resplen = sizeof(rbuf);
			apdu.le = 256;

			rv = sc_transmit_apdu(card, &apdu);
			LOG_TEST_RET(ctx, rv, ""APDU transmit failed"");
			rv = sc_check_sw(card, apdu.sw1, apdu.sw2);
			if (rv == SC_ERROR_INCORRECT_PARAMETERS &&
					lpath.type == SC_PATH_TYPE_DF_NAME && apdu.p2 == 0x00)   {
				apdu.p2 = 0x0C;
				continue;
			}

			if (ii)   {
				/* 'SELECT AID' do not returned FCP. Try to emulate. */
				apdu.resplen = sizeof(rbuf);
				rv = iasecc_emulate_fcp(ctx, &apdu);
				LOG_TEST_RET(ctx, rv, ""Failed to emulate DF FCP"");
			}

			break;
		}

		/*
		 * Using of the cached DF and EF can cause problems in the multi-thread environment.
		 * FIXME: introduce config. option that invalidates this cache outside the locked card session,
		 *        (or invent something else)
		 */
		if (rv == SC_ERROR_FILE_NOT_FOUND && cache_valid && df_from_cache)   {
			sc_invalidate_cache(card);
			sc_log(ctx, ""iasecc_select_file() file not found, retry without cached DF"");
			if (file_out)   {
				sc_file_free(*file_out);
				*file_out = NULL;
			}
			rv = iasecc_select_file(card, path, file_out);
			LOG_FUNC_RETURN(ctx, rv);
		}

		LOG_TEST_RET(ctx, rv, ""iasecc_select_file() check SW failed"");

		sc_log(ctx,
		       ""iasecc_select_file() apdu.resp %""SC_FORMAT_LEN_SIZE_T""u"",
		       apdu.resplen);
		if (apdu.resplen)   {
			sc_log(ctx, ""apdu.resp %02X:%02X:%02X..."", apdu.resp[0], apdu.resp[1], apdu.resp[2]);

			switch (apdu.resp[0]) {
			case 0x62:
			case 0x6F:
				file = sc_file_new();
				if (file == NULL)
					LOG_FUNC_RETURN(ctx, SC_ERROR_OUT_OF_MEMORY);
				file->path = lpath;

				rv = iasecc_process_fci(card, file, apdu.resp, apdu.resplen);
				if (rv)
					LOG_FUNC_RETURN(ctx, rv);
				break;
			default:
				LOG_FUNC_RETURN(ctx, SC_ERROR_UNKNOWN_DATA_RECEIVED);
			}

			sc_log(ctx, ""FileType %i"", file->type);
			if (file->type == SC_FILE_TYPE_DF)   {
				if (card->cache.valid)
					sc_file_free(card->cache.current_df);
				card->cache.current_df = NULL;


				if (card->cache.valid)
					sc_file_free(card->cache.current_ef);
				card->cache.current_ef = NULL;

				sc_file_dup(&card->cache.current_df, file);
				card->cache.valid = 1;
			}
			else   {
				if (card->cache.valid)
					sc_file_free(card->cache.current_ef);

				card->cache.current_ef = NULL;

				sc_file_dup(&card->cache.current_ef, file);
			}

			if (file_out)   {
				sc_file_free(*file_out);
				*file_out = file;
			}
			else   {
				sc_file_free(file);
			}
		}
		else if (lpath.type == SC_PATH_TYPE_DF_NAME)   {
			sc_file_free(card->cache.current_df);
			card->cache.current_df = NULL;

			sc_file_free(card->cache.current_ef);
			card->cache.current_ef = NULL;

			card->cache.valid = 1;
		}
	} while(0);

	sc_print_cache(card);
	LOG_FUNC_RETURN(ctx, SC_SUCCESS);
}
"
5250,182986,,Remote,Not required,Partial,CVE-2018-16452,https://www.cvedetails.com/cve/CVE-2018-16452/,CWE-674,Low,,,,2019-10-03,5.0,The SMB parser in tcpdump before 4.9.3 has stack exhaustion in smbutil.c:smb_fdata() via recursion.,2019-10-11,,8,https://github.com/the-tcpdump-group/tcpdump/commit/24182d959f661327525a20d9a94c98a8ec016778,24182d959f661327525a20d9a94c98a8ec016778,"(for 4.9.3) CVE-2018-16452/SMB: prevent stack exhaustion

Enforce a limit on how many times smb_fdata() can recurse.

This fixes a stack exhaustion discovered by Include Security working
under the Mozilla SOS program in 2018 by means of code audit.",1,smbutil.c,"{""sha"": ""7b01f487dbc2de43cb1cdb19c5a017866d27d80d"", ""filename"": ""smbutil.c"", ""status"": ""modified"", ""additions"": 8, ""deletions"": 1, ""changes"": 9, ""blob_url"": ""https://github.com/the-tcpdump-group/tcpdump/blob/24182d959f661327525a20d9a94c98a8ec016778/smbutil.c"", ""raw_url"": ""https://github.com/the-tcpdump-group/tcpdump/raw/24182d959f661327525a20d9a94c98a8ec016778/smbutil.c"", ""contents_url"": ""https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/smbutil.c?ref=24182d959f661327525a20d9a94c98a8ec016778"", ""patch"": ""@@ -807,7 +807,14 @@ smb_fdata(netdissect_options *ndo,\n \t    while (buf < maxbuf) {\n \t\tconst u_char *buf2;\n \t\tdepth++;\n-\t\tbuf2 = smb_fdata(ndo, buf, fmt, maxbuf, unicodestr);\n+\t\t/* Not sure how this relates with the protocol specification,\n+\t\t * but in order to avoid stack exhaustion recurse at most that\n+\t\t * many levels.\n+\t\t */\n+\t\tif (depth == 10)\n+\t\t\tND_PRINT((ndo, \""(too many nested levels, not recursing)\""));\n+\t\telse\n+\t\t\tbuf2 = smb_fdata(ndo, buf, fmt, maxbuf, unicodestr);\n \t\tdepth--;\n \t\tif (buf2 == NULL)\n \t\t    return(NULL);""}","smb_fdata(netdissect_options *ndo,
          const u_char *buf, const char *fmt, const u_char *maxbuf,
          int unicodestr)
{
    static int depth = 0;
    char s[128];
    char *p;

    while (*fmt) {
	switch (*fmt) {
	case '*':
	    fmt++;
 	    while (buf < maxbuf) {
 		const u_char *buf2;
 		depth++;
		/* Not sure how this relates with the protocol specification,
		 * but in order to avoid stack exhaustion recurse at most that
		 * many levels.
		 */
		if (depth == 10)
			ND_PRINT((ndo, ""(too many nested levels, not recursing)""));
		else
			buf2 = smb_fdata(ndo, buf, fmt, maxbuf, unicodestr);
 		depth--;
 		if (buf2 == NULL)
 		    return(NULL);
		if (buf2 == buf)
		    return(buf);
		buf = buf2;
	    }
	    return(buf);

	case '|':
	    fmt++;
	    if (buf >= maxbuf)
		return(buf);
	    break;

	case '%':
	    fmt++;
	    buf = maxbuf;
	    break;

	case '#':
	    fmt++;
	    return(buf);
	    break;

	case '[':
	    fmt++;
	    if (buf >= maxbuf)
		return(buf);
	    memset(s, 0, sizeof(s));
	    p = strchr(fmt, ']');
	    if ((size_t)(p - fmt + 1) > sizeof(s)) {
		/* overrun */
		return(buf);
	    }
	    strncpy(s, fmt, p - fmt);
	    s[p - fmt] = '\0';
	    fmt = p + 1;
	    buf = smb_fdata1(ndo, buf, s, maxbuf, unicodestr);
	    if (buf == NULL)
		return(NULL);
	    break;

	default:
	    ND_PRINT((ndo, ""%c"", *fmt));
	    fmt++;
	    break;
	}
    }
    if (!depth && buf < maxbuf) {
	size_t len = PTR_DIFF(maxbuf, buf);
	ND_PRINT((ndo, ""Data: (%lu bytes)\n"", (unsigned long)len));
	smb_print_data(ndo, buf, len);
	return(buf + len);
    }
    return(buf);
}
","smb_fdata(netdissect_options *ndo,
          const u_char *buf, const char *fmt, const u_char *maxbuf,
          int unicodestr)
{
    static int depth = 0;
    char s[128];
    char *p;

    while (*fmt) {
	switch (*fmt) {
	case '*':
	    fmt++;
 	    while (buf < maxbuf) {
 		const u_char *buf2;
 		depth++;
		buf2 = smb_fdata(ndo, buf, fmt, maxbuf, unicodestr);
 		depth--;
 		if (buf2 == NULL)
 		    return(NULL);
		if (buf2 == buf)
		    return(buf);
		buf = buf2;
	    }
	    return(buf);

	case '|':
	    fmt++;
	    if (buf >= maxbuf)
		return(buf);
	    break;

	case '%':
	    fmt++;
	    buf = maxbuf;
	    break;

	case '#':
	    fmt++;
	    return(buf);
	    break;

	case '[':
	    fmt++;
	    if (buf >= maxbuf)
		return(buf);
	    memset(s, 0, sizeof(s));
	    p = strchr(fmt, ']');
	    if ((size_t)(p - fmt + 1) > sizeof(s)) {
		/* overrun */
		return(buf);
	    }
	    strncpy(s, fmt, p - fmt);
	    s[p - fmt] = '\0';
	    fmt = p + 1;
	    buf = smb_fdata1(ndo, buf, s, maxbuf, unicodestr);
	    if (buf == NULL)
		return(NULL);
	    break;

	default:
	    ND_PRINT((ndo, ""%c"", *fmt));
	    fmt++;
	    break;
	}
    }
    if (!depth && buf < maxbuf) {
	size_t len = PTR_DIFF(maxbuf, buf);
	ND_PRINT((ndo, ""Data: (%lu bytes)\n"", (unsigned long)len));
	smb_print_data(ndo, buf, len);
	return(buf + len);
    }
    return(buf);
}
",C,"		/* Not sure how this relates with the protocol specification,
		 * but in order to avoid stack exhaustion recurse at most that
		 * many levels.
		 */
		if (depth == 10)
			ND_PRINT((ndo, ""(too many nested levels, not recursing)""));
		else
			buf2 = smb_fdata(ndo, buf, fmt, maxbuf, unicodestr);
","		buf2 = smb_fdata(ndo, buf, fmt, maxbuf, unicodestr);
",,"@@ -807,7 +807,14 @@ smb_fdata(netdissect_options *ndo,
 	    while (buf < maxbuf) {
 		const u_char *buf2;
 		depth++;
-		buf2 = smb_fdata(ndo, buf, fmt, maxbuf, unicodestr);
+		/* Not sure how this relates with the protocol specification,
+		 * but in order to avoid stack exhaustion recurse at most that
+		 * many levels.
+		 */
+		if (depth == 10)
+			ND_PRINT((ndo, ""(too many nested levels, not recursing)""));
+		else
+			buf2 = smb_fdata(ndo, buf, fmt, maxbuf, unicodestr);
 		depth--;
 		if (buf2 == NULL)
 		    return(NULL);",tcpdump,24182d959f661327525a20d9a94c98a8ec016778,af2cf04a9394c1a56227c2289ae8da262828294a,1,"smb_fdata(netdissect_options *ndo,
          const u_char *buf, const char *fmt, const u_char *maxbuf,
          int unicodestr)
{
    static int depth = 0;
    char s[128];
    char *p;

    while (*fmt) {
	switch (*fmt) {
	case '*':
	    fmt++;
 	    while (buf < maxbuf) {
 		const u_char *buf2;
 		depth++;
//flaw_line_below:
		buf2 = smb_fdata(ndo, buf, fmt, maxbuf, unicodestr);
//fix_flaw_line_below:
//		/* Not sure how this relates with the protocol specification,
//fix_flaw_line_below:
//		 * but in order to avoid stack exhaustion recurse at most that
//fix_flaw_line_below:
//		 * many levels.
//fix_flaw_line_below:
//		 */
//fix_flaw_line_below:
//		if (depth == 10)
//fix_flaw_line_below:
//			ND_PRINT((ndo, ""(too many nested levels, not recursing)""));
//fix_flaw_line_below:
//		else
//fix_flaw_line_below:
//			buf2 = smb_fdata(ndo, buf, fmt, maxbuf, unicodestr);
 		depth--;
 		if (buf2 == NULL)
 		    return(NULL);
		if (buf2 == buf)
		    return(buf);
		buf = buf2;
	    }
	    return(buf);

	case '|':
	    fmt++;
	    if (buf >= maxbuf)
		return(buf);
	    break;

	case '%':
	    fmt++;
	    buf = maxbuf;
	    break;

	case '#':
	    fmt++;
	    return(buf);
	    break;

	case '[':
	    fmt++;
	    if (buf >= maxbuf)
		return(buf);
	    memset(s, 0, sizeof(s));
	    p = strchr(fmt, ']');
	    if ((size_t)(p - fmt + 1) > sizeof(s)) {
		/* overrun */
		return(buf);
	    }
	    strncpy(s, fmt, p - fmt);
	    s[p - fmt] = '\0';
	    fmt = p + 1;
	    buf = smb_fdata1(ndo, buf, s, maxbuf, unicodestr);
	    if (buf == NULL)
		return(NULL);
	    break;

	default:
	    ND_PRINT((ndo, ""%c"", *fmt));
	    fmt++;
	    break;
	}
    }
    if (!depth && buf < maxbuf) {
	size_t len = PTR_DIFF(maxbuf, buf);
	ND_PRINT((ndo, ""Data: (%lu bytes)\n"", (unsigned long)len));
	smb_print_data(ndo, buf, len);
	return(buf + len);
    }
    return(buf);
}
"
5252,182988,,Remote,Not required,Partial,CVE-2018-16300,https://www.cvedetails.com/cve/CVE-2018-16300/,CWE-674,Low,,,,2019-10-03,5.0,The BGP parser in tcpdump before 4.9.3 allows stack consumption in print-bgp.c:bgp_attr_print() because of unlimited recursion.,2019-10-11,,11,https://github.com/the-tcpdump-group/tcpdump/commit/af2cf04a9394c1a56227c2289ae8da262828294a,af2cf04a9394c1a56227c2289ae8da262828294a,"(for 4.9.3) CVE-2018-16300/BGP: prevent stack exhaustion

Enforce a limit on how many times bgp_attr_print() can recurse.

This fixes a stack exhaustion discovered by Include Security working
under the Mozilla SOS program in 2018 by means of code audit.",3,print-bgp.c,"{""sha"": ""7db3c6bb0f93931a2cdddae9ff55cdf544dac2f5"", ""filename"": ""print-bgp.c"", ""status"": ""modified"", ""additions"": 12, ""deletions"": 4, ""changes"": 16, ""blob_url"": ""https://github.com/the-tcpdump-group/tcpdump/blob/af2cf04a9394c1a56227c2289ae8da262828294a/print-bgp.c"", ""raw_url"": ""https://github.com/the-tcpdump-group/tcpdump/raw/af2cf04a9394c1a56227c2289ae8da262828294a/print-bgp.c"", ""contents_url"": ""https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/print-bgp.c?ref=af2cf04a9394c1a56227c2289ae8da262828294a"", ""patch"": ""@@ -1361,7 +1361,7 @@ bgp_attr_get_as_size(netdissect_options *ndo,\n \n static int\n bgp_attr_print(netdissect_options *ndo,\n-               u_int atype, const u_char *pptr, u_int len)\n+               u_int atype, const u_char *pptr, u_int len, const unsigned attr_set_level)\n {\n \tint i;\n \tuint16_t af;\n@@ -2284,8 +2284,16 @@ bgp_attr_print(netdissect_options *ndo,\n                             ND_PRINT((ndo, \""+%x\"", aflags & 0xf));\n                         ND_PRINT((ndo, \""]: \""));\n                     }\n-                    /* FIXME check for recursion */\n-                    if (!bgp_attr_print(ndo, atype, tptr, alen))\n+                    /* The protocol encoding per se allows ATTR_SET to be nested as many times\n+                     * as the message can accommodate. This printer used to be able to recurse\n+                     * into ATTR_SET contents until the stack exhaustion, but now there is a\n+                     * limit on that (if live protocol exchange goes that many levels deep,\n+                     * something is probably wrong anyway). Feel free to refine this value if\n+                     * you can find the spec with respective normative text.\n+                     */\n+                    if (attr_set_level == 10)\n+                        ND_PRINT((ndo, \""(too many nested levels, not recursing)\""));\n+                    else if (!bgp_attr_print(ndo, atype, tptr, alen, attr_set_level + 1))\n                         return 0;\n                     tptr += alen;\n                     len -= alen;\n@@ -2592,7 +2600,7 @@ bgp_update_print(netdissect_options *ndo,\n \t\t\t\tgoto trunc;\n \t\t\tif (length < alen)\n \t\t\t\tgoto trunc;\n-\t\t\tif (!bgp_attr_print(ndo, atype, p, alen))\n+\t\t\tif (!bgp_attr_print(ndo, atype, p, alen, 0))\n \t\t\t\tgoto trunc;\n \t\t\tp += alen;\n \t\t\tlen -= alen;""}"," bgp_attr_print(netdissect_options *ndo,
               u_int atype, const u_char *pptr, u_int len, const unsigned attr_set_level)
 {
 	int i;
 	uint16_t af;
	uint8_t safi, snpa, nhlen;
        union { /* copy buffer for bandwidth values */
            float f;
            uint32_t i;
        } bw;
	int advance;
	u_int tlen;
	const u_char *tptr;
	char buf[MAXHOSTNAMELEN + 100];
        int  as_size;

        tptr = pptr;
        tlen=len;

	switch (atype) {
	case BGPTYPE_ORIGIN:
		if (len != 1)
			ND_PRINT((ndo, ""invalid len""));
		else {
			ND_TCHECK(*tptr);
			ND_PRINT((ndo, ""%s"", tok2str(bgp_origin_values,
						""Unknown Origin Typecode"",
						tptr[0])));
		}
		break;

        /*
         * Process AS4 byte path and AS2 byte path attributes here.
         */
	case BGPTYPE_AS4_PATH:
	case BGPTYPE_AS_PATH:
		if (len % 2) {
			ND_PRINT((ndo, ""invalid len""));
			break;
		}
                if (!len) {
			ND_PRINT((ndo, ""empty""));
			break;
                }

                /*
                 * BGP updates exchanged between New speakers that support 4
                 * byte AS, ASs are always encoded in 4 bytes. There is no
                 * definitive way to find this, just by the packet's
                 * contents. So, check for packet's TLV's sanity assuming
                 * 2 bytes first, and it does not pass, assume that ASs are
                 * encoded in 4 bytes format and move on.
                 */
                as_size = bgp_attr_get_as_size(ndo, atype, pptr, len);

		while (tptr < pptr + len) {
			ND_TCHECK(tptr[0]);
                        ND_PRINT((ndo, ""%s"", tok2str(bgp_as_path_segment_open_values,
						""?"", tptr[0])));
			ND_TCHECK(tptr[1]);
                        for (i = 0; i < tptr[1] * as_size; i += as_size) {
                            ND_TCHECK2(tptr[2 + i], as_size);
			    ND_PRINT((ndo, ""%s "",
				as_printf(ndo, astostr, sizeof(astostr),
				as_size == 2 ?
				EXTRACT_16BITS(&tptr[2 + i]) :
				EXTRACT_32BITS(&tptr[2 + i]))));
                        }
			ND_TCHECK(tptr[0]);
                        ND_PRINT((ndo, ""%s"", tok2str(bgp_as_path_segment_close_values,
						""?"", tptr[0])));
                        ND_TCHECK(tptr[1]);
                        tptr += 2 + tptr[1] * as_size;
		}
		break;
	case BGPTYPE_NEXT_HOP:
		if (len != 4)
			ND_PRINT((ndo, ""invalid len""));
		else {
			ND_TCHECK2(tptr[0], 4);
			ND_PRINT((ndo, ""%s"", ipaddr_string(ndo, tptr)));
		}
		break;
	case BGPTYPE_MULTI_EXIT_DISC:
	case BGPTYPE_LOCAL_PREF:
		if (len != 4)
			ND_PRINT((ndo, ""invalid len""));
		else {
			ND_TCHECK2(tptr[0], 4);
			ND_PRINT((ndo, ""%u"", EXTRACT_32BITS(tptr)));
		}
		break;
	case BGPTYPE_ATOMIC_AGGREGATE:
		if (len != 0)
			ND_PRINT((ndo, ""invalid len""));
		break;
        case BGPTYPE_AGGREGATOR:

                /*
                 * Depending on the AS encoded is of 2 bytes or of 4 bytes,
                 * the length of this PA can be either 6 bytes or 8 bytes.
                 */
                if (len != 6 && len != 8) {
                    ND_PRINT((ndo, ""invalid len""));
                    break;
                }
                ND_TCHECK2(tptr[0], len);
                if (len == 6) {
		    ND_PRINT((ndo, "" AS #%s, origin %s"",
			as_printf(ndo, astostr, sizeof(astostr), EXTRACT_16BITS(tptr)),
			ipaddr_string(ndo, tptr + 2)));
                } else {
		    ND_PRINT((ndo, "" AS #%s, origin %s"",
			as_printf(ndo, astostr, sizeof(astostr),
			EXTRACT_32BITS(tptr)), ipaddr_string(ndo, tptr + 4)));
                }
                break;
	case BGPTYPE_AGGREGATOR4:
		if (len != 8) {
			ND_PRINT((ndo, ""invalid len""));
			break;
		}
		ND_TCHECK2(tptr[0], 8);
		ND_PRINT((ndo, "" AS #%s, origin %s"",
		    as_printf(ndo, astostr, sizeof(astostr), EXTRACT_32BITS(tptr)),
		    ipaddr_string(ndo, tptr + 4)));
		break;
	case BGPTYPE_COMMUNITIES:
		if (len % 4) {
			ND_PRINT((ndo, ""invalid len""));
			break;
		}
		while (tlen>0) {
			uint32_t comm;
			ND_TCHECK2(tptr[0], 4);
			comm = EXTRACT_32BITS(tptr);
			switch (comm) {
			case BGP_COMMUNITY_NO_EXPORT:
				ND_PRINT((ndo, "" NO_EXPORT""));
				break;
			case BGP_COMMUNITY_NO_ADVERT:
				ND_PRINT((ndo, "" NO_ADVERTISE""));
				break;
			case BGP_COMMUNITY_NO_EXPORT_SUBCONFED:
				ND_PRINT((ndo, "" NO_EXPORT_SUBCONFED""));
				break;
			default:
				ND_PRINT((ndo, ""%u:%u%s"",
                                       (comm >> 16) & 0xffff,
                                       comm & 0xffff,
                                       (tlen>4) ? "", "" : """"));
				break;
			}
                        tlen -=4;
                        tptr +=4;
		}
		break;
        case BGPTYPE_ORIGINATOR_ID:
		if (len != 4) {
			ND_PRINT((ndo, ""invalid len""));
			break;
		}
		ND_TCHECK2(tptr[0], 4);
                ND_PRINT((ndo, ""%s"",ipaddr_string(ndo, tptr)));
                break;
        case BGPTYPE_CLUSTER_LIST:
		if (len % 4) {
			ND_PRINT((ndo, ""invalid len""));
			break;
		}
                while (tlen>0) {
			ND_TCHECK2(tptr[0], 4);
                        ND_PRINT((ndo, ""%s%s"",
                               ipaddr_string(ndo, tptr),
                                (tlen>4) ? "", "" : """"));
                        tlen -=4;
                        tptr +=4;
                }
                break;
	case BGPTYPE_MP_REACH_NLRI:
		ND_TCHECK2(tptr[0], 3);
		af = EXTRACT_16BITS(tptr);
		safi = tptr[2];

                ND_PRINT((ndo, ""\n\t    AFI: %s (%u), %sSAFI: %s (%u)"",
                       tok2str(af_values, ""Unknown AFI"", af),
                       af,
                       (safi>128) ? ""vendor specific "" : """", /* 128 is meanwhile wellknown */
                       tok2str(bgp_safi_values, ""Unknown SAFI"", safi),
                       safi));

                switch(af<<8 | safi) {
                case (AFNUM_INET<<8 | SAFNUM_UNICAST):
                case (AFNUM_INET<<8 | SAFNUM_MULTICAST):
                case (AFNUM_INET<<8 | SAFNUM_UNIMULTICAST):
                case (AFNUM_INET<<8 | SAFNUM_LABUNICAST):
                case (AFNUM_INET<<8 | SAFNUM_RT_ROUTING_INFO):
                case (AFNUM_INET<<8 | SAFNUM_VPNUNICAST):
                case (AFNUM_INET<<8 | SAFNUM_VPNMULTICAST):
                case (AFNUM_INET<<8 | SAFNUM_VPNUNIMULTICAST):
                case (AFNUM_INET<<8 | SAFNUM_MULTICAST_VPN):
		case (AFNUM_INET<<8 | SAFNUM_MDT):
                case (AFNUM_INET6<<8 | SAFNUM_UNICAST):
                case (AFNUM_INET6<<8 | SAFNUM_MULTICAST):
                case (AFNUM_INET6<<8 | SAFNUM_UNIMULTICAST):
                case (AFNUM_INET6<<8 | SAFNUM_LABUNICAST):
                case (AFNUM_INET6<<8 | SAFNUM_VPNUNICAST):
                case (AFNUM_INET6<<8 | SAFNUM_VPNMULTICAST):
                case (AFNUM_INET6<<8 | SAFNUM_VPNUNIMULTICAST):
                case (AFNUM_NSAP<<8 | SAFNUM_UNICAST):
                case (AFNUM_NSAP<<8 | SAFNUM_MULTICAST):
                case (AFNUM_NSAP<<8 | SAFNUM_UNIMULTICAST):
                case (AFNUM_NSAP<<8 | SAFNUM_VPNUNICAST):
                case (AFNUM_NSAP<<8 | SAFNUM_VPNMULTICAST):
                case (AFNUM_NSAP<<8 | SAFNUM_VPNUNIMULTICAST):
                case (AFNUM_L2VPN<<8 | SAFNUM_VPNUNICAST):
                case (AFNUM_L2VPN<<8 | SAFNUM_VPNMULTICAST):
                case (AFNUM_L2VPN<<8 | SAFNUM_VPNUNIMULTICAST):
                case (AFNUM_VPLS<<8 | SAFNUM_VPLS):
                    break;
                default:
                    ND_TCHECK2(tptr[0], tlen);
                    ND_PRINT((ndo, ""\n\t    no AFI %u / SAFI %u decoder"", af, safi));
                    if (ndo->ndo_vflag <= 1)
                        print_unknown_data(ndo, tptr, ""\n\t    "", tlen);
                    goto done;
                    break;
                }

                tptr +=3;

		ND_TCHECK(tptr[0]);
		nhlen = tptr[0];
                tlen = nhlen;
                tptr++;

		if (tlen) {
                    int nnh = 0;
                    ND_PRINT((ndo, ""\n\t    nexthop: ""));
                    while (tlen > 0) {
                        if ( nnh++ > 0 ) {
                            ND_PRINT((ndo,  "", "" ));
                        }
                        switch(af<<8 | safi) {
                        case (AFNUM_INET<<8 | SAFNUM_UNICAST):
                        case (AFNUM_INET<<8 | SAFNUM_MULTICAST):
                        case (AFNUM_INET<<8 | SAFNUM_UNIMULTICAST):
                        case (AFNUM_INET<<8 | SAFNUM_LABUNICAST):
                        case (AFNUM_INET<<8 | SAFNUM_RT_ROUTING_INFO):
                        case (AFNUM_INET<<8 | SAFNUM_MULTICAST_VPN):
                        case (AFNUM_INET<<8 | SAFNUM_MDT):
			    if (tlen < (int)sizeof(struct in_addr)) {
                                ND_PRINT((ndo, ""invalid len""));
                                tlen = 0;
                            } else {
                                ND_TCHECK2(tptr[0], sizeof(struct in_addr));
                                ND_PRINT((ndo, ""%s"",ipaddr_string(ndo, tptr)));
                                tlen -= sizeof(struct in_addr);
                                tptr += sizeof(struct in_addr);
                            }
                            break;
                        case (AFNUM_INET<<8 | SAFNUM_VPNUNICAST):
                        case (AFNUM_INET<<8 | SAFNUM_VPNMULTICAST):
                        case (AFNUM_INET<<8 | SAFNUM_VPNUNIMULTICAST):
                            if (tlen < (int)(sizeof(struct in_addr)+BGP_VPN_RD_LEN)) {
                                ND_PRINT((ndo, ""invalid len""));
                                tlen = 0;
                            } else {
                                ND_TCHECK2(tptr[0], sizeof(struct in_addr)+BGP_VPN_RD_LEN);
                                ND_PRINT((ndo, ""RD: %s, %s"",
                                       bgp_vpn_rd_print(ndo, tptr),
                                       ipaddr_string(ndo, tptr+BGP_VPN_RD_LEN)));
                                tlen -= (sizeof(struct in_addr)+BGP_VPN_RD_LEN);
                                tptr += (sizeof(struct in_addr)+BGP_VPN_RD_LEN);
                            }
                            break;
                        case (AFNUM_INET6<<8 | SAFNUM_UNICAST):
                        case (AFNUM_INET6<<8 | SAFNUM_MULTICAST):
                        case (AFNUM_INET6<<8 | SAFNUM_UNIMULTICAST):
                        case (AFNUM_INET6<<8 | SAFNUM_LABUNICAST):
                            if (tlen < (int)sizeof(struct in6_addr)) {
                                ND_PRINT((ndo, ""invalid len""));
                                tlen = 0;
                            } else {
                                ND_TCHECK2(tptr[0], sizeof(struct in6_addr));
                                ND_PRINT((ndo, ""%s"", ip6addr_string(ndo, tptr)));
                                tlen -= sizeof(struct in6_addr);
                                tptr += sizeof(struct in6_addr);
                            }
                            break;
                        case (AFNUM_INET6<<8 | SAFNUM_VPNUNICAST):
                        case (AFNUM_INET6<<8 | SAFNUM_VPNMULTICAST):
                        case (AFNUM_INET6<<8 | SAFNUM_VPNUNIMULTICAST):
                            if (tlen < (int)(sizeof(struct in6_addr)+BGP_VPN_RD_LEN)) {
                                ND_PRINT((ndo, ""invalid len""));
                                tlen = 0;
                            } else {
                                ND_TCHECK2(tptr[0], sizeof(struct in6_addr)+BGP_VPN_RD_LEN);
                                ND_PRINT((ndo, ""RD: %s, %s"",
                                       bgp_vpn_rd_print(ndo, tptr),
                                       ip6addr_string(ndo, tptr+BGP_VPN_RD_LEN)));
                                tlen -= (sizeof(struct in6_addr)+BGP_VPN_RD_LEN);
                                tptr += (sizeof(struct in6_addr)+BGP_VPN_RD_LEN);
                            }
                            break;
                        case (AFNUM_VPLS<<8 | SAFNUM_VPLS):
                        case (AFNUM_L2VPN<<8 | SAFNUM_VPNUNICAST):
                        case (AFNUM_L2VPN<<8 | SAFNUM_VPNMULTICAST):
                        case (AFNUM_L2VPN<<8 | SAFNUM_VPNUNIMULTICAST):
                            if (tlen < (int)sizeof(struct in_addr)) {
                                ND_PRINT((ndo, ""invalid len""));
                                tlen = 0;
                            } else {
                                ND_TCHECK2(tptr[0], sizeof(struct in_addr));
                                ND_PRINT((ndo, ""%s"", ipaddr_string(ndo, tptr)));
                                tlen -= (sizeof(struct in_addr));
                                tptr += (sizeof(struct in_addr));
                            }
                            break;
                        case (AFNUM_NSAP<<8 | SAFNUM_UNICAST):
                        case (AFNUM_NSAP<<8 | SAFNUM_MULTICAST):
                        case (AFNUM_NSAP<<8 | SAFNUM_UNIMULTICAST):
                            ND_TCHECK2(tptr[0], tlen);
                            ND_PRINT((ndo, ""%s"", isonsap_string(ndo, tptr, tlen)));
                            tptr += tlen;
                            tlen = 0;
                            break;

                        case (AFNUM_NSAP<<8 | SAFNUM_VPNUNICAST):
                        case (AFNUM_NSAP<<8 | SAFNUM_VPNMULTICAST):
                        case (AFNUM_NSAP<<8 | SAFNUM_VPNUNIMULTICAST):
                            if (tlen < BGP_VPN_RD_LEN+1) {
                                ND_PRINT((ndo, ""invalid len""));
                                tlen = 0;
                            } else {
                                ND_TCHECK2(tptr[0], tlen);
                                ND_PRINT((ndo, ""RD: %s, %s"",
                                       bgp_vpn_rd_print(ndo, tptr),
                                       isonsap_string(ndo, tptr+BGP_VPN_RD_LEN,tlen-BGP_VPN_RD_LEN)));
                                /* rfc986 mapped IPv4 address ? */
                                if (tlen == BGP_VPN_RD_LEN + 4 + sizeof(struct in_addr)
                                    && EXTRACT_32BITS(tptr+BGP_VPN_RD_LEN) ==  0x47000601)
                                    ND_PRINT((ndo, "" = %s"", ipaddr_string(ndo, tptr+BGP_VPN_RD_LEN+4)));
                                /* rfc1888 mapped IPv6 address ? */
                                else if (tlen == BGP_VPN_RD_LEN + 3 + sizeof(struct in6_addr)
                                         && EXTRACT_24BITS(tptr+BGP_VPN_RD_LEN) ==  0x350000)
                                    ND_PRINT((ndo, "" = %s"", ip6addr_string(ndo, tptr+BGP_VPN_RD_LEN+3)));
                                tptr += tlen;
                                tlen = 0;
                            }
                            break;
                        default:
                            ND_TCHECK2(tptr[0], tlen);
                            ND_PRINT((ndo, ""no AFI %u/SAFI %u decoder"", af, safi));
                            if (ndo->ndo_vflag <= 1)
                                print_unknown_data(ndo, tptr, ""\n\t    "", tlen);
                            tptr += tlen;
                            tlen = 0;
                            goto done;
                            break;
                        }
                    }
		}
		ND_PRINT((ndo, "", nh-length: %u"", nhlen));
		tptr += tlen;

		ND_TCHECK(tptr[0]);
		snpa = tptr[0];
		tptr++;

		if (snpa) {
			ND_PRINT((ndo, ""\n\t    %u SNPA"", snpa));
			for (/*nothing*/; snpa > 0; snpa--) {
				ND_TCHECK(tptr[0]);
				ND_PRINT((ndo, ""\n\t      %d bytes"", tptr[0]));
				tptr += tptr[0] + 1;
			}
		} else {
			ND_PRINT((ndo, "", no SNPA""));
                }

		while (tptr < pptr + len) {
                    switch (af<<8 | safi) {
                    case (AFNUM_INET<<8 | SAFNUM_UNICAST):
                    case (AFNUM_INET<<8 | SAFNUM_MULTICAST):
                    case (AFNUM_INET<<8 | SAFNUM_UNIMULTICAST):
                        advance = decode_prefix4(ndo, tptr, len, buf, sizeof(buf));
                        if (advance == -1)
                            ND_PRINT((ndo, ""\n\t    (illegal prefix length)""));
                        else if (advance == -2)
                            goto trunc;
                        else if (advance == -3)
                            break; /* bytes left, but not enough */
                        else
                            ND_PRINT((ndo, ""\n\t      %s"", buf));
                        break;
                    case (AFNUM_INET<<8 | SAFNUM_LABUNICAST):
                        advance = decode_labeled_prefix4(ndo, tptr, len, buf, sizeof(buf));
                        if (advance == -1)
                            ND_PRINT((ndo, ""\n\t    (illegal prefix length)""));
                        else if (advance == -2)
                            goto trunc;
                        else if (advance == -3)
                            break; /* bytes left, but not enough */
                        else
                            ND_PRINT((ndo, ""\n\t      %s"", buf));
                        break;
                    case (AFNUM_INET<<8 | SAFNUM_VPNUNICAST):
                    case (AFNUM_INET<<8 | SAFNUM_VPNMULTICAST):
                    case (AFNUM_INET<<8 | SAFNUM_VPNUNIMULTICAST):
                        advance = decode_labeled_vpn_prefix4(ndo, tptr, buf, sizeof(buf));
                        if (advance == -1)
                            ND_PRINT((ndo, ""\n\t    (illegal prefix length)""));
                        else if (advance == -2)
                            goto trunc;
                        else
                            ND_PRINT((ndo, ""\n\t      %s"", buf));
                        break;
                    case (AFNUM_INET<<8 | SAFNUM_RT_ROUTING_INFO):
                        advance = decode_rt_routing_info(ndo, tptr, buf, sizeof(buf));
                        if (advance == -1)
                            ND_PRINT((ndo, ""\n\t    (illegal prefix length)""));
                        else if (advance == -2)
                            goto trunc;
                        else
                            ND_PRINT((ndo, ""\n\t      %s"", buf));
                        break;
                    case (AFNUM_INET<<8 | SAFNUM_MULTICAST_VPN): /* fall through */
                    case (AFNUM_INET6<<8 | SAFNUM_MULTICAST_VPN):
                        advance = decode_multicast_vpn(ndo, tptr, buf, sizeof(buf));
                        if (advance == -1)
                            ND_PRINT((ndo, ""\n\t    (illegal prefix length)""));
                        else if (advance == -2)
                            goto trunc;
                        else
                            ND_PRINT((ndo, ""\n\t      %s"", buf));
                        break;

		    case (AFNUM_INET<<8 | SAFNUM_MDT):
		      advance = decode_mdt_vpn_nlri(ndo, tptr, buf, sizeof(buf));
		      if (advance == -1)
                            ND_PRINT((ndo, ""\n\t    (illegal prefix length)""));
                        else if (advance == -2)
                            goto trunc;
                        else
                            ND_PRINT((ndo, ""\n\t      %s"", buf));
		       break;
                    case (AFNUM_INET6<<8 | SAFNUM_UNICAST):
                    case (AFNUM_INET6<<8 | SAFNUM_MULTICAST):
                    case (AFNUM_INET6<<8 | SAFNUM_UNIMULTICAST):
                        advance = decode_prefix6(ndo, tptr, len, buf, sizeof(buf));
                        if (advance == -1)
                            ND_PRINT((ndo, ""\n\t    (illegal prefix length)""));
                        else if (advance == -2)
                            goto trunc;
                        else if (advance == -3)
                            break; /* bytes left, but not enough */
                        else
                            ND_PRINT((ndo, ""\n\t      %s"", buf));
                        break;
                    case (AFNUM_INET6<<8 | SAFNUM_LABUNICAST):
                        advance = decode_labeled_prefix6(ndo, tptr, len, buf, sizeof(buf));
                        if (advance == -1)
                            ND_PRINT((ndo, ""\n\t    (illegal prefix length)""));
                        else if (advance == -2)
                            goto trunc;
                        else if (advance == -3)
                            break; /* bytes left, but not enough */
                        else
                            ND_PRINT((ndo, ""\n\t      %s"", buf));
                        break;
                    case (AFNUM_INET6<<8 | SAFNUM_VPNUNICAST):
                    case (AFNUM_INET6<<8 | SAFNUM_VPNMULTICAST):
                    case (AFNUM_INET6<<8 | SAFNUM_VPNUNIMULTICAST):
                        advance = decode_labeled_vpn_prefix6(ndo, tptr, buf, sizeof(buf));
                        if (advance == -1)
                            ND_PRINT((ndo, ""\n\t    (illegal prefix length)""));
                        else if (advance == -2)
                            goto trunc;
                        else
                            ND_PRINT((ndo, ""\n\t      %s"", buf));
                        break;
                    case (AFNUM_VPLS<<8 | SAFNUM_VPLS):
                    case (AFNUM_L2VPN<<8 | SAFNUM_VPNUNICAST):
                    case (AFNUM_L2VPN<<8 | SAFNUM_VPNMULTICAST):
                    case (AFNUM_L2VPN<<8 | SAFNUM_VPNUNIMULTICAST):
                        advance = decode_labeled_vpn_l2(ndo, tptr, buf, sizeof(buf));
                        if (advance == -1)
                            ND_PRINT((ndo, ""\n\t    (illegal length)""));
                        else if (advance == -2)
                            goto trunc;
                        else
                            ND_PRINT((ndo, ""\n\t      %s"", buf));
                        break;
                    case (AFNUM_NSAP<<8 | SAFNUM_UNICAST):
                    case (AFNUM_NSAP<<8 | SAFNUM_MULTICAST):
                    case (AFNUM_NSAP<<8 | SAFNUM_UNIMULTICAST):
                        advance = decode_clnp_prefix(ndo, tptr, buf, sizeof(buf));
                        if (advance == -1)
                            ND_PRINT((ndo, ""\n\t    (illegal prefix length)""));
                        else if (advance == -2)
                            goto trunc;
                        else
                            ND_PRINT((ndo, ""\n\t      %s"", buf));
                        break;
                    case (AFNUM_NSAP<<8 | SAFNUM_VPNUNICAST):
                    case (AFNUM_NSAP<<8 | SAFNUM_VPNMULTICAST):
                    case (AFNUM_NSAP<<8 | SAFNUM_VPNUNIMULTICAST):
                        advance = decode_labeled_vpn_clnp_prefix(ndo, tptr, buf, sizeof(buf));
                        if (advance == -1)
                            ND_PRINT((ndo, ""\n\t    (illegal prefix length)""));
                        else if (advance == -2)
                            goto trunc;
                        else
                            ND_PRINT((ndo, ""\n\t      %s"", buf));
                        break;
                    default:
                        ND_TCHECK2(*tptr,tlen);
                        ND_PRINT((ndo, ""\n\t    no AFI %u / SAFI %u decoder"", af, safi));
                        if (ndo->ndo_vflag <= 1)
                            print_unknown_data(ndo, tptr, ""\n\t    "", tlen);
                        advance = 0;
                        tptr = pptr + len;
                        break;
                    }
                    if (advance < 0)
                        break;
                    tptr += advance;
		}
        done:
		break;

	case BGPTYPE_MP_UNREACH_NLRI:
		ND_TCHECK2(tptr[0], BGP_MP_NLRI_MINSIZE);
		af = EXTRACT_16BITS(tptr);
		safi = tptr[2];

                ND_PRINT((ndo, ""\n\t    AFI: %s (%u), %sSAFI: %s (%u)"",
                       tok2str(af_values, ""Unknown AFI"", af),
                       af,
                       (safi>128) ? ""vendor specific "" : """", /* 128 is meanwhile wellknown */
                       tok2str(bgp_safi_values, ""Unknown SAFI"", safi),
                       safi));

                if (len == BGP_MP_NLRI_MINSIZE)
                    ND_PRINT((ndo, ""\n\t      End-of-Rib Marker (empty NLRI)""));

		tptr += 3;

		while (tptr < pptr + len) {
                    switch (af<<8 | safi) {
                    case (AFNUM_INET<<8 | SAFNUM_UNICAST):
                    case (AFNUM_INET<<8 | SAFNUM_MULTICAST):
                    case (AFNUM_INET<<8 | SAFNUM_UNIMULTICAST):
                        advance = decode_prefix4(ndo, tptr, len, buf, sizeof(buf));
                        if (advance == -1)
                            ND_PRINT((ndo, ""\n\t    (illegal prefix length)""));
                        else if (advance == -2)
                            goto trunc;
                        else if (advance == -3)
                            break; /* bytes left, but not enough */
                        else
                            ND_PRINT((ndo, ""\n\t      %s"", buf));
                        break;
                    case (AFNUM_INET<<8 | SAFNUM_LABUNICAST):
                        advance = decode_labeled_prefix4(ndo, tptr, len, buf, sizeof(buf));
                        if (advance == -1)
                            ND_PRINT((ndo, ""\n\t    (illegal prefix length)""));
                        else if (advance == -2)
                            goto trunc;
                        else if (advance == -3)
                            break; /* bytes left, but not enough */
                        else
                            ND_PRINT((ndo, ""\n\t      %s"", buf));
                        break;
                    case (AFNUM_INET<<8 | SAFNUM_VPNUNICAST):
                    case (AFNUM_INET<<8 | SAFNUM_VPNMULTICAST):
                    case (AFNUM_INET<<8 | SAFNUM_VPNUNIMULTICAST):
                        advance = decode_labeled_vpn_prefix4(ndo, tptr, buf, sizeof(buf));
                        if (advance == -1)
                            ND_PRINT((ndo, ""\n\t    (illegal prefix length)""));
                        else if (advance == -2)
                            goto trunc;
                        else
                            ND_PRINT((ndo, ""\n\t      %s"", buf));
                        break;
                    case (AFNUM_INET6<<8 | SAFNUM_UNICAST):
                    case (AFNUM_INET6<<8 | SAFNUM_MULTICAST):
                    case (AFNUM_INET6<<8 | SAFNUM_UNIMULTICAST):
                        advance = decode_prefix6(ndo, tptr, len, buf, sizeof(buf));
                        if (advance == -1)
                            ND_PRINT((ndo, ""\n\t    (illegal prefix length)""));
                        else if (advance == -2)
                            goto trunc;
                        else if (advance == -3)
                            break; /* bytes left, but not enough */
                        else
                            ND_PRINT((ndo, ""\n\t      %s"", buf));
                        break;
                    case (AFNUM_INET6<<8 | SAFNUM_LABUNICAST):
                        advance = decode_labeled_prefix6(ndo, tptr, len, buf, sizeof(buf));
                        if (advance == -1)
                            ND_PRINT((ndo, ""\n\t    (illegal prefix length)""));
                        else if (advance == -2)
                            goto trunc;
                        else if (advance == -3)
                            break; /* bytes left, but not enough */
                        else
                            ND_PRINT((ndo, ""\n\t      %s"", buf));
                        break;
                    case (AFNUM_INET6<<8 | SAFNUM_VPNUNICAST):
                    case (AFNUM_INET6<<8 | SAFNUM_VPNMULTICAST):
                    case (AFNUM_INET6<<8 | SAFNUM_VPNUNIMULTICAST):
                        advance = decode_labeled_vpn_prefix6(ndo, tptr, buf, sizeof(buf));
                        if (advance == -1)
                            ND_PRINT((ndo, ""\n\t    (illegal prefix length)""));
                        else if (advance == -2)
                            goto trunc;
                        else
                            ND_PRINT((ndo, ""\n\t      %s"", buf));
                        break;
                    case (AFNUM_VPLS<<8 | SAFNUM_VPLS):
                    case (AFNUM_L2VPN<<8 | SAFNUM_VPNUNICAST):
                    case (AFNUM_L2VPN<<8 | SAFNUM_VPNMULTICAST):
                    case (AFNUM_L2VPN<<8 | SAFNUM_VPNUNIMULTICAST):
                        advance = decode_labeled_vpn_l2(ndo, tptr, buf, sizeof(buf));
                        if (advance == -1)
                            ND_PRINT((ndo, ""\n\t    (illegal length)""));
                        else if (advance == -2)
                            goto trunc;
                        else
                            ND_PRINT((ndo, ""\n\t      %s"", buf));
                        break;
                    case (AFNUM_NSAP<<8 | SAFNUM_UNICAST):
                    case (AFNUM_NSAP<<8 | SAFNUM_MULTICAST):
                    case (AFNUM_NSAP<<8 | SAFNUM_UNIMULTICAST):
                        advance = decode_clnp_prefix(ndo, tptr, buf, sizeof(buf));
                        if (advance == -1)
                            ND_PRINT((ndo, ""\n\t    (illegal prefix length)""));
                        else if (advance == -2)
                            goto trunc;
                        else
                            ND_PRINT((ndo, ""\n\t      %s"", buf));
                        break;
                    case (AFNUM_NSAP<<8 | SAFNUM_VPNUNICAST):
                    case (AFNUM_NSAP<<8 | SAFNUM_VPNMULTICAST):
                    case (AFNUM_NSAP<<8 | SAFNUM_VPNUNIMULTICAST):
                        advance = decode_labeled_vpn_clnp_prefix(ndo, tptr, buf, sizeof(buf));
                        if (advance == -1)
                            ND_PRINT((ndo, ""\n\t    (illegal prefix length)""));
                        else if (advance == -2)
                            goto trunc;
                        else
                            ND_PRINT((ndo, ""\n\t      %s"", buf));
                        break;
		    case (AFNUM_INET<<8 | SAFNUM_MDT):
		      advance = decode_mdt_vpn_nlri(ndo, tptr, buf, sizeof(buf));
		      if (advance == -1)
                            ND_PRINT((ndo, ""\n\t    (illegal prefix length)""));
                        else if (advance == -2)
                            goto trunc;
                        else
                            ND_PRINT((ndo, ""\n\t      %s"", buf));
		       break;
                    case (AFNUM_INET<<8 | SAFNUM_MULTICAST_VPN): /* fall through */
                    case (AFNUM_INET6<<8 | SAFNUM_MULTICAST_VPN):
                        advance = decode_multicast_vpn(ndo, tptr, buf, sizeof(buf));
                        if (advance == -1)
                            ND_PRINT((ndo, ""\n\t    (illegal prefix length)""));
                        else if (advance == -2)
                            goto trunc;
                        else
                            ND_PRINT((ndo, ""\n\t      %s"", buf));
                        break;
                    default:
                        ND_TCHECK2(*(tptr-3),tlen);
                        ND_PRINT((ndo, ""no AFI %u / SAFI %u decoder"", af, safi));
                        if (ndo->ndo_vflag <= 1)
                            print_unknown_data(ndo, tptr-3, ""\n\t    "", tlen);
                        advance = 0;
                        tptr = pptr + len;
                        break;
                    }
                    if (advance < 0)
                        break;
                    tptr += advance;
		}
		break;
        case BGPTYPE_EXTD_COMMUNITIES:
		if (len % 8) {
			ND_PRINT((ndo, ""invalid len""));
			break;
		}
                while (tlen>0) {
                    uint16_t extd_comm;

                    ND_TCHECK2(tptr[0], 2);
                    extd_comm=EXTRACT_16BITS(tptr);

		    ND_PRINT((ndo, ""\n\t    %s (0x%04x), Flags [%s]"",
			   tok2str(bgp_extd_comm_subtype_values,
				      ""unknown extd community typecode"",
				      extd_comm),
			   extd_comm,
			   bittok2str(bgp_extd_comm_flag_values, ""none"", extd_comm)));

                    ND_TCHECK2(*(tptr+2), 6);
                    switch(extd_comm) {
                    case BGP_EXT_COM_RT_0:
                    case BGP_EXT_COM_RO_0:
                    case BGP_EXT_COM_L2VPN_RT_0:
                        ND_PRINT((ndo, "": %u:%u (= %s)"",
                               EXTRACT_16BITS(tptr+2),
                               EXTRACT_32BITS(tptr+4),
                               ipaddr_string(ndo, tptr+4)));
                        break;
                    case BGP_EXT_COM_RT_1:
                    case BGP_EXT_COM_RO_1:
                    case BGP_EXT_COM_L2VPN_RT_1:
                    case BGP_EXT_COM_VRF_RT_IMP:
                        ND_PRINT((ndo, "": %s:%u"",
                               ipaddr_string(ndo, tptr+2),
                               EXTRACT_16BITS(tptr+6)));
                        break;
                    case BGP_EXT_COM_RT_2:
                    case BGP_EXT_COM_RO_2:
			ND_PRINT((ndo, "": %s:%u"",
			    as_printf(ndo, astostr, sizeof(astostr),
			    EXTRACT_32BITS(tptr+2)), EXTRACT_16BITS(tptr+6)));
			break;
                    case BGP_EXT_COM_LINKBAND:
		        bw.i = EXTRACT_32BITS(tptr+2);
                        ND_PRINT((ndo, "": bandwidth: %.3f Mbps"",
                               bw.f*8/1000000));
                        break;
                    case BGP_EXT_COM_VPN_ORIGIN:
                    case BGP_EXT_COM_VPN_ORIGIN2:
                    case BGP_EXT_COM_VPN_ORIGIN3:
                    case BGP_EXT_COM_VPN_ORIGIN4:
                    case BGP_EXT_COM_OSPF_RID:
                    case BGP_EXT_COM_OSPF_RID2:
                        ND_PRINT((ndo, ""%s"", ipaddr_string(ndo, tptr+2)));
                        break;
                    case BGP_EXT_COM_OSPF_RTYPE:
                    case BGP_EXT_COM_OSPF_RTYPE2:
                        ND_PRINT((ndo, "": area:%s, router-type:%s, metric-type:%s%s"",
                               ipaddr_string(ndo, tptr+2),
                               tok2str(bgp_extd_comm_ospf_rtype_values,
					  ""unknown (0x%02x)"",
					  *(tptr+6)),
                               (*(tptr+7) &  BGP_OSPF_RTYPE_METRIC_TYPE) ? ""E2"" : """",
                               ((*(tptr+6) == BGP_OSPF_RTYPE_EXT) || (*(tptr+6) == BGP_OSPF_RTYPE_NSSA)) ? ""E1"" : """"));
                        break;
                    case BGP_EXT_COM_L2INFO:
                        ND_PRINT((ndo, "": %s Control Flags [0x%02x]:MTU %u"",
                               tok2str(l2vpn_encaps_values,
					  ""unknown encaps"",
					  *(tptr+2)),
                                       *(tptr+3),
                               EXTRACT_16BITS(tptr+4)));
                        break;
                    case BGP_EXT_COM_SOURCE_AS:
                        ND_PRINT((ndo, "": AS %u"", EXTRACT_16BITS(tptr+2)));
                        break;
                    default:
                        ND_TCHECK2(*tptr,8);
                        print_unknown_data(ndo, tptr, ""\n\t      "", 8);
                        break;
                    }
                    tlen -=8;
                    tptr +=8;
                }
                break;

        case BGPTYPE_PMSI_TUNNEL:
        {
                uint8_t tunnel_type, flags;

                ND_TCHECK2(tptr[0], 5);
                tunnel_type = *(tptr+1);
                flags = *tptr;
                tlen = len;

                ND_PRINT((ndo, ""\n\t    Tunnel-type %s (%u), Flags [%s], MPLS Label %u"",
                       tok2str(bgp_pmsi_tunnel_values, ""Unknown"", tunnel_type),
                       tunnel_type,
                       bittok2str(bgp_pmsi_flag_values, ""none"", flags),
                       EXTRACT_24BITS(tptr+2)>>4));

                tptr +=5;
                tlen -= 5;

                switch (tunnel_type) {
                case BGP_PMSI_TUNNEL_PIM_SM: /* fall through */
                case BGP_PMSI_TUNNEL_PIM_BIDIR:
                    ND_TCHECK2(tptr[0], 8);
                    ND_PRINT((ndo, ""\n\t      Sender %s, P-Group %s"",
                           ipaddr_string(ndo, tptr),
                           ipaddr_string(ndo, tptr+4)));
                    break;

                case BGP_PMSI_TUNNEL_PIM_SSM:
                    ND_TCHECK2(tptr[0], 8);
                    ND_PRINT((ndo, ""\n\t      Root-Node %s, P-Group %s"",
                           ipaddr_string(ndo, tptr),
                           ipaddr_string(ndo, tptr+4)));
                    break;
                case BGP_PMSI_TUNNEL_INGRESS:
                    ND_TCHECK2(tptr[0], 4);
                    ND_PRINT((ndo, ""\n\t      Tunnel-Endpoint %s"",
                           ipaddr_string(ndo, tptr)));
                    break;
                case BGP_PMSI_TUNNEL_LDP_P2MP: /* fall through */
                case BGP_PMSI_TUNNEL_LDP_MP2MP:
                    ND_TCHECK2(tptr[0], 8);
                    ND_PRINT((ndo, ""\n\t      Root-Node %s, LSP-ID 0x%08x"",
                           ipaddr_string(ndo, tptr),
                           EXTRACT_32BITS(tptr+4)));
                    break;
                case BGP_PMSI_TUNNEL_RSVP_P2MP:
                    ND_TCHECK2(tptr[0], 8);
                    ND_PRINT((ndo, ""\n\t      Extended-Tunnel-ID %s, P2MP-ID 0x%08x"",
                           ipaddr_string(ndo, tptr),
                           EXTRACT_32BITS(tptr+4)));
                    break;
                default:
                    if (ndo->ndo_vflag <= 1) {
                        print_unknown_data(ndo, tptr, ""\n\t      "", tlen);
                    }
                }
                break;
        }
	case BGPTYPE_AIGP:
	{
		uint8_t type;
		uint16_t length;

		tlen = len;

		while (tlen >= 3) {

		    ND_TCHECK2(tptr[0], 3);

		    type = *tptr;
		    length = EXTRACT_16BITS(tptr+1);
		    tptr += 3;
		    tlen -= 3;

		    ND_PRINT((ndo, ""\n\t    %s TLV (%u), length %u"",
			      tok2str(bgp_aigp_values, ""Unknown"", type),
			      type, length));

		    if (length < 3)
			goto trunc;
		    length -= 3;

		    /*
		     * Check if we can read the TLV data.
		     */
		    ND_TCHECK2(tptr[3], length);

		    switch (type) {

		    case BGP_AIGP_TLV:
		        if (length < 8)
		            goto trunc;
			ND_PRINT((ndo, "", metric %"" PRIu64,
				  EXTRACT_64BITS(tptr)));
			break;

		    default:
			if (ndo->ndo_vflag <= 1) {
			    print_unknown_data(ndo, tptr,""\n\t      "", length);
			}
		    }

		    tptr += length;
		    tlen -= length;
		}
		break;
	}
        case BGPTYPE_ATTR_SET:
                ND_TCHECK2(tptr[0], 4);
                if (len < 4)
                	goto trunc;
		ND_PRINT((ndo, ""\n\t    Origin AS: %s"",
		    as_printf(ndo, astostr, sizeof(astostr), EXTRACT_32BITS(tptr))));
		tptr+=4;
                len -=4;

                while (len) {
                    u_int aflags, alenlen, alen;

                    ND_TCHECK2(tptr[0], 2);
                    if (len < 2)
                        goto trunc;
                    aflags = *tptr;
                    atype = *(tptr + 1);
                    tptr += 2;
                    len -= 2;
                    alenlen = bgp_attr_lenlen(aflags, tptr);
                    ND_TCHECK2(tptr[0], alenlen);
                    if (len < alenlen)
                        goto trunc;
                    alen = bgp_attr_len(aflags, tptr);
                    tptr += alenlen;
                    len -= alenlen;

                    ND_PRINT((ndo, ""\n\t      %s (%u), length: %u"",
                           tok2str(bgp_attr_values,
                                      ""Unknown Attribute"", atype),
                           atype,
                           alen));

                    if (aflags) {
                        ND_PRINT((ndo, "", Flags [%s%s%s%s"",
                               aflags & 0x80 ? ""O"" : """",
                               aflags & 0x40 ? ""T"" : """",
                               aflags & 0x20 ? ""P"" : """",
                               aflags & 0x10 ? ""E"" : """"));
                        if (aflags & 0xf)
                             ND_PRINT((ndo, ""+%x"", aflags & 0xf));
                         ND_PRINT((ndo, ""]: ""));
                     }
                    /* The protocol encoding per se allows ATTR_SET to be nested as many times
                     * as the message can accommodate. This printer used to be able to recurse
                     * into ATTR_SET contents until the stack exhaustion, but now there is a
                     * limit on that (if live protocol exchange goes that many levels deep,
                     * something is probably wrong anyway). Feel free to refine this value if
                     * you can find the spec with respective normative text.
                     */
                    if (attr_set_level == 10)
                        ND_PRINT((ndo, ""(too many nested levels, not recursing)""));
                    else if (!bgp_attr_print(ndo, atype, tptr, alen, attr_set_level + 1))
                         return 0;
                     tptr += alen;
                     len -= alen;
		}
                break;

	case BGPTYPE_LARGE_COMMUNITY:
		if (len == 0 || len % 12) {
			ND_PRINT((ndo, ""invalid len""));
			break;
		}
		ND_PRINT((ndo, ""\n\t    ""));
		while (len > 0) {
			ND_TCHECK2(*tptr, 12);
			ND_PRINT((ndo, ""%u:%u:%u%s"",
				 EXTRACT_32BITS(tptr),
				 EXTRACT_32BITS(tptr + 4),
				 EXTRACT_32BITS(tptr + 8),
				 (len > 12) ? "", "" : """"));
                        tptr += 12;
                        len -= 12;
		}
		break;
	default:
	    ND_TCHECK2(*pptr,len);
            ND_PRINT((ndo, ""\n\t    no Attribute %u decoder"", atype)); /* we have no decoder for the attribute */
            if (ndo->ndo_vflag <= 1)
                print_unknown_data(ndo, pptr, ""\n\t    "", len);
            break;
	}
        if (ndo->ndo_vflag > 1 && len) { /* omit zero length attributes*/
            ND_TCHECK2(*pptr,len);
            print_unknown_data(ndo, pptr, ""\n\t    "", len);
        }
        return 1;

trunc:
        return 0;
}
"," bgp_attr_print(netdissect_options *ndo,
               u_int atype, const u_char *pptr, u_int len)
 {
 	int i;
 	uint16_t af;
	uint8_t safi, snpa, nhlen;
        union { /* copy buffer for bandwidth values */
            float f;
            uint32_t i;
        } bw;
	int advance;
	u_int tlen;
	const u_char *tptr;
	char buf[MAXHOSTNAMELEN + 100];
        int  as_size;

        tptr = pptr;
        tlen=len;

	switch (atype) {
	case BGPTYPE_ORIGIN:
		if (len != 1)
			ND_PRINT((ndo, ""invalid len""));
		else {
			ND_TCHECK(*tptr);
			ND_PRINT((ndo, ""%s"", tok2str(bgp_origin_values,
						""Unknown Origin Typecode"",
						tptr[0])));
		}
		break;

        /*
         * Process AS4 byte path and AS2 byte path attributes here.
         */
	case BGPTYPE_AS4_PATH:
	case BGPTYPE_AS_PATH:
		if (len % 2) {
			ND_PRINT((ndo, ""invalid len""));
			break;
		}
                if (!len) {
			ND_PRINT((ndo, ""empty""));
			break;
                }

                /*
                 * BGP updates exchanged between New speakers that support 4
                 * byte AS, ASs are always encoded in 4 bytes. There is no
                 * definitive way to find this, just by the packet's
                 * contents. So, check for packet's TLV's sanity assuming
                 * 2 bytes first, and it does not pass, assume that ASs are
                 * encoded in 4 bytes format and move on.
                 */
                as_size = bgp_attr_get_as_size(ndo, atype, pptr, len);

		while (tptr < pptr + len) {
			ND_TCHECK(tptr[0]);
                        ND_PRINT((ndo, ""%s"", tok2str(bgp_as_path_segment_open_values,
						""?"", tptr[0])));
			ND_TCHECK(tptr[1]);
                        for (i = 0; i < tptr[1] * as_size; i += as_size) {
                            ND_TCHECK2(tptr[2 + i], as_size);
			    ND_PRINT((ndo, ""%s "",
				as_printf(ndo, astostr, sizeof(astostr),
				as_size == 2 ?
				EXTRACT_16BITS(&tptr[2 + i]) :
				EXTRACT_32BITS(&tptr[2 + i]))));
                        }
			ND_TCHECK(tptr[0]);
                        ND_PRINT((ndo, ""%s"", tok2str(bgp_as_path_segment_close_values,
						""?"", tptr[0])));
                        ND_TCHECK(tptr[1]);
                        tptr += 2 + tptr[1] * as_size;
		}
		break;
	case BGPTYPE_NEXT_HOP:
		if (len != 4)
			ND_PRINT((ndo, ""invalid len""));
		else {
			ND_TCHECK2(tptr[0], 4);
			ND_PRINT((ndo, ""%s"", ipaddr_string(ndo, tptr)));
		}
		break;
	case BGPTYPE_MULTI_EXIT_DISC:
	case BGPTYPE_LOCAL_PREF:
		if (len != 4)
			ND_PRINT((ndo, ""invalid len""));
		else {
			ND_TCHECK2(tptr[0], 4);
			ND_PRINT((ndo, ""%u"", EXTRACT_32BITS(tptr)));
		}
		break;
	case BGPTYPE_ATOMIC_AGGREGATE:
		if (len != 0)
			ND_PRINT((ndo, ""invalid len""));
		break;
        case BGPTYPE_AGGREGATOR:

                /*
                 * Depending on the AS encoded is of 2 bytes or of 4 bytes,
                 * the length of this PA can be either 6 bytes or 8 bytes.
                 */
                if (len != 6 && len != 8) {
                    ND_PRINT((ndo, ""invalid len""));
                    break;
                }
                ND_TCHECK2(tptr[0], len);
                if (len == 6) {
		    ND_PRINT((ndo, "" AS #%s, origin %s"",
			as_printf(ndo, astostr, sizeof(astostr), EXTRACT_16BITS(tptr)),
			ipaddr_string(ndo, tptr + 2)));
                } else {
		    ND_PRINT((ndo, "" AS #%s, origin %s"",
			as_printf(ndo, astostr, sizeof(astostr),
			EXTRACT_32BITS(tptr)), ipaddr_string(ndo, tptr + 4)));
                }
                break;
	case BGPTYPE_AGGREGATOR4:
		if (len != 8) {
			ND_PRINT((ndo, ""invalid len""));
			break;
		}
		ND_TCHECK2(tptr[0], 8);
		ND_PRINT((ndo, "" AS #%s, origin %s"",
		    as_printf(ndo, astostr, sizeof(astostr), EXTRACT_32BITS(tptr)),
		    ipaddr_string(ndo, tptr + 4)));
		break;
	case BGPTYPE_COMMUNITIES:
		if (len % 4) {
			ND_PRINT((ndo, ""invalid len""));
			break;
		}
		while (tlen>0) {
			uint32_t comm;
			ND_TCHECK2(tptr[0], 4);
			comm = EXTRACT_32BITS(tptr);
			switch (comm) {
			case BGP_COMMUNITY_NO_EXPORT:
				ND_PRINT((ndo, "" NO_EXPORT""));
				break;
			case BGP_COMMUNITY_NO_ADVERT:
				ND_PRINT((ndo, "" NO_ADVERTISE""));
				break;
			case BGP_COMMUNITY_NO_EXPORT_SUBCONFED:
				ND_PRINT((ndo, "" NO_EXPORT_SUBCONFED""));
				break;
			default:
				ND_PRINT((ndo, ""%u:%u%s"",
                                       (comm >> 16) & 0xffff,
                                       comm & 0xffff,
                                       (tlen>4) ? "", "" : """"));
				break;
			}
                        tlen -=4;
                        tptr +=4;
		}
		break;
        case BGPTYPE_ORIGINATOR_ID:
		if (len != 4) {
			ND_PRINT((ndo, ""invalid len""));
			break;
		}
		ND_TCHECK2(tptr[0], 4);
                ND_PRINT((ndo, ""%s"",ipaddr_string(ndo, tptr)));
                break;
        case BGPTYPE_CLUSTER_LIST:
		if (len % 4) {
			ND_PRINT((ndo, ""invalid len""));
			break;
		}
                while (tlen>0) {
			ND_TCHECK2(tptr[0], 4);
                        ND_PRINT((ndo, ""%s%s"",
                               ipaddr_string(ndo, tptr),
                                (tlen>4) ? "", "" : """"));
                        tlen -=4;
                        tptr +=4;
                }
                break;
	case BGPTYPE_MP_REACH_NLRI:
		ND_TCHECK2(tptr[0], 3);
		af = EXTRACT_16BITS(tptr);
		safi = tptr[2];

                ND_PRINT((ndo, ""\n\t    AFI: %s (%u), %sSAFI: %s (%u)"",
                       tok2str(af_values, ""Unknown AFI"", af),
                       af,
                       (safi>128) ? ""vendor specific "" : """", /* 128 is meanwhile wellknown */
                       tok2str(bgp_safi_values, ""Unknown SAFI"", safi),
                       safi));

                switch(af<<8 | safi) {
                case (AFNUM_INET<<8 | SAFNUM_UNICAST):
                case (AFNUM_INET<<8 | SAFNUM_MULTICAST):
                case (AFNUM_INET<<8 | SAFNUM_UNIMULTICAST):
                case (AFNUM_INET<<8 | SAFNUM_LABUNICAST):
                case (AFNUM_INET<<8 | SAFNUM_RT_ROUTING_INFO):
                case (AFNUM_INET<<8 | SAFNUM_VPNUNICAST):
                case (AFNUM_INET<<8 | SAFNUM_VPNMULTICAST):
                case (AFNUM_INET<<8 | SAFNUM_VPNUNIMULTICAST):
                case (AFNUM_INET<<8 | SAFNUM_MULTICAST_VPN):
		case (AFNUM_INET<<8 | SAFNUM_MDT):
                case (AFNUM_INET6<<8 | SAFNUM_UNICAST):
                case (AFNUM_INET6<<8 | SAFNUM_MULTICAST):
                case (AFNUM_INET6<<8 | SAFNUM_UNIMULTICAST):
                case (AFNUM_INET6<<8 | SAFNUM_LABUNICAST):
                case (AFNUM_INET6<<8 | SAFNUM_VPNUNICAST):
                case (AFNUM_INET6<<8 | SAFNUM_VPNMULTICAST):
                case (AFNUM_INET6<<8 | SAFNUM_VPNUNIMULTICAST):
                case (AFNUM_NSAP<<8 | SAFNUM_UNICAST):
                case (AFNUM_NSAP<<8 | SAFNUM_MULTICAST):
                case (AFNUM_NSAP<<8 | SAFNUM_UNIMULTICAST):
                case (AFNUM_NSAP<<8 | SAFNUM_VPNUNICAST):
                case (AFNUM_NSAP<<8 | SAFNUM_VPNMULTICAST):
                case (AFNUM_NSAP<<8 | SAFNUM_VPNUNIMULTICAST):
                case (AFNUM_L2VPN<<8 | SAFNUM_VPNUNICAST):
                case (AFNUM_L2VPN<<8 | SAFNUM_VPNMULTICAST):
                case (AFNUM_L2VPN<<8 | SAFNUM_VPNUNIMULTICAST):
                case (AFNUM_VPLS<<8 | SAFNUM_VPLS):
                    break;
                default:
                    ND_TCHECK2(tptr[0], tlen);
                    ND_PRINT((ndo, ""\n\t    no AFI %u / SAFI %u decoder"", af, safi));
                    if (ndo->ndo_vflag <= 1)
                        print_unknown_data(ndo, tptr, ""\n\t    "", tlen);
                    goto done;
                    break;
                }

                tptr +=3;

		ND_TCHECK(tptr[0]);
		nhlen = tptr[0];
                tlen = nhlen;
                tptr++;

		if (tlen) {
                    int nnh = 0;
                    ND_PRINT((ndo, ""\n\t    nexthop: ""));
                    while (tlen > 0) {
                        if ( nnh++ > 0 ) {
                            ND_PRINT((ndo,  "", "" ));
                        }
                        switch(af<<8 | safi) {
                        case (AFNUM_INET<<8 | SAFNUM_UNICAST):
                        case (AFNUM_INET<<8 | SAFNUM_MULTICAST):
                        case (AFNUM_INET<<8 | SAFNUM_UNIMULTICAST):
                        case (AFNUM_INET<<8 | SAFNUM_LABUNICAST):
                        case (AFNUM_INET<<8 | SAFNUM_RT_ROUTING_INFO):
                        case (AFNUM_INET<<8 | SAFNUM_MULTICAST_VPN):
                        case (AFNUM_INET<<8 | SAFNUM_MDT):
			    if (tlen < (int)sizeof(struct in_addr)) {
                                ND_PRINT((ndo, ""invalid len""));
                                tlen = 0;
                            } else {
                                ND_TCHECK2(tptr[0], sizeof(struct in_addr));
                                ND_PRINT((ndo, ""%s"",ipaddr_string(ndo, tptr)));
                                tlen -= sizeof(struct in_addr);
                                tptr += sizeof(struct in_addr);
                            }
                            break;
                        case (AFNUM_INET<<8 | SAFNUM_VPNUNICAST):
                        case (AFNUM_INET<<8 | SAFNUM_VPNMULTICAST):
                        case (AFNUM_INET<<8 | SAFNUM_VPNUNIMULTICAST):
                            if (tlen < (int)(sizeof(struct in_addr)+BGP_VPN_RD_LEN)) {
                                ND_PRINT((ndo, ""invalid len""));
                                tlen = 0;
                            } else {
                                ND_TCHECK2(tptr[0], sizeof(struct in_addr)+BGP_VPN_RD_LEN);
                                ND_PRINT((ndo, ""RD: %s, %s"",
                                       bgp_vpn_rd_print(ndo, tptr),
                                       ipaddr_string(ndo, tptr+BGP_VPN_RD_LEN)));
                                tlen -= (sizeof(struct in_addr)+BGP_VPN_RD_LEN);
                                tptr += (sizeof(struct in_addr)+BGP_VPN_RD_LEN);
                            }
                            break;
                        case (AFNUM_INET6<<8 | SAFNUM_UNICAST):
                        case (AFNUM_INET6<<8 | SAFNUM_MULTICAST):
                        case (AFNUM_INET6<<8 | SAFNUM_UNIMULTICAST):
                        case (AFNUM_INET6<<8 | SAFNUM_LABUNICAST):
                            if (tlen < (int)sizeof(struct in6_addr)) {
                                ND_PRINT((ndo, ""invalid len""));
                                tlen = 0;
                            } else {
                                ND_TCHECK2(tptr[0], sizeof(struct in6_addr));
                                ND_PRINT((ndo, ""%s"", ip6addr_string(ndo, tptr)));
                                tlen -= sizeof(struct in6_addr);
                                tptr += sizeof(struct in6_addr);
                            }
                            break;
                        case (AFNUM_INET6<<8 | SAFNUM_VPNUNICAST):
                        case (AFNUM_INET6<<8 | SAFNUM_VPNMULTICAST):
                        case (AFNUM_INET6<<8 | SAFNUM_VPNUNIMULTICAST):
                            if (tlen < (int)(sizeof(struct in6_addr)+BGP_VPN_RD_LEN)) {
                                ND_PRINT((ndo, ""invalid len""));
                                tlen = 0;
                            } else {
                                ND_TCHECK2(tptr[0], sizeof(struct in6_addr)+BGP_VPN_RD_LEN);
                                ND_PRINT((ndo, ""RD: %s, %s"",
                                       bgp_vpn_rd_print(ndo, tptr),
                                       ip6addr_string(ndo, tptr+BGP_VPN_RD_LEN)));
                                tlen -= (sizeof(struct in6_addr)+BGP_VPN_RD_LEN);
                                tptr += (sizeof(struct in6_addr)+BGP_VPN_RD_LEN);
                            }
                            break;
                        case (AFNUM_VPLS<<8 | SAFNUM_VPLS):
                        case (AFNUM_L2VPN<<8 | SAFNUM_VPNUNICAST):
                        case (AFNUM_L2VPN<<8 | SAFNUM_VPNMULTICAST):
                        case (AFNUM_L2VPN<<8 | SAFNUM_VPNUNIMULTICAST):
                            if (tlen < (int)sizeof(struct in_addr)) {
                                ND_PRINT((ndo, ""invalid len""));
                                tlen = 0;
                            } else {
                                ND_TCHECK2(tptr[0], sizeof(struct in_addr));
                                ND_PRINT((ndo, ""%s"", ipaddr_string(ndo, tptr)));
                                tlen -= (sizeof(struct in_addr));
                                tptr += (sizeof(struct in_addr));
                            }
                            break;
                        case (AFNUM_NSAP<<8 | SAFNUM_UNICAST):
                        case (AFNUM_NSAP<<8 | SAFNUM_MULTICAST):
                        case (AFNUM_NSAP<<8 | SAFNUM_UNIMULTICAST):
                            ND_TCHECK2(tptr[0], tlen);
                            ND_PRINT((ndo, ""%s"", isonsap_string(ndo, tptr, tlen)));
                            tptr += tlen;
                            tlen = 0;
                            break;

                        case (AFNUM_NSAP<<8 | SAFNUM_VPNUNICAST):
                        case (AFNUM_NSAP<<8 | SAFNUM_VPNMULTICAST):
                        case (AFNUM_NSAP<<8 | SAFNUM_VPNUNIMULTICAST):
                            if (tlen < BGP_VPN_RD_LEN+1) {
                                ND_PRINT((ndo, ""invalid len""));
                                tlen = 0;
                            } else {
                                ND_TCHECK2(tptr[0], tlen);
                                ND_PRINT((ndo, ""RD: %s, %s"",
                                       bgp_vpn_rd_print(ndo, tptr),
                                       isonsap_string(ndo, tptr+BGP_VPN_RD_LEN,tlen-BGP_VPN_RD_LEN)));
                                /* rfc986 mapped IPv4 address ? */
                                if (tlen == BGP_VPN_RD_LEN + 4 + sizeof(struct in_addr)
                                    && EXTRACT_32BITS(tptr+BGP_VPN_RD_LEN) ==  0x47000601)
                                    ND_PRINT((ndo, "" = %s"", ipaddr_string(ndo, tptr+BGP_VPN_RD_LEN+4)));
                                /* rfc1888 mapped IPv6 address ? */
                                else if (tlen == BGP_VPN_RD_LEN + 3 + sizeof(struct in6_addr)
                                         && EXTRACT_24BITS(tptr+BGP_VPN_RD_LEN) ==  0x350000)
                                    ND_PRINT((ndo, "" = %s"", ip6addr_string(ndo, tptr+BGP_VPN_RD_LEN+3)));
                                tptr += tlen;
                                tlen = 0;
                            }
                            break;
                        default:
                            ND_TCHECK2(tptr[0], tlen);
                            ND_PRINT((ndo, ""no AFI %u/SAFI %u decoder"", af, safi));
                            if (ndo->ndo_vflag <= 1)
                                print_unknown_data(ndo, tptr, ""\n\t    "", tlen);
                            tptr += tlen;
                            tlen = 0;
                            goto done;
                            break;
                        }
                    }
		}
		ND_PRINT((ndo, "", nh-length: %u"", nhlen));
		tptr += tlen;

		ND_TCHECK(tptr[0]);
		snpa = tptr[0];
		tptr++;

		if (snpa) {
			ND_PRINT((ndo, ""\n\t    %u SNPA"", snpa));
			for (/*nothing*/; snpa > 0; snpa--) {
				ND_TCHECK(tptr[0]);
				ND_PRINT((ndo, ""\n\t      %d bytes"", tptr[0]));
				tptr += tptr[0] + 1;
			}
		} else {
			ND_PRINT((ndo, "", no SNPA""));
                }

		while (tptr < pptr + len) {
                    switch (af<<8 | safi) {
                    case (AFNUM_INET<<8 | SAFNUM_UNICAST):
                    case (AFNUM_INET<<8 | SAFNUM_MULTICAST):
                    case (AFNUM_INET<<8 | SAFNUM_UNIMULTICAST):
                        advance = decode_prefix4(ndo, tptr, len, buf, sizeof(buf));
                        if (advance == -1)
                            ND_PRINT((ndo, ""\n\t    (illegal prefix length)""));
                        else if (advance == -2)
                            goto trunc;
                        else if (advance == -3)
                            break; /* bytes left, but not enough */
                        else
                            ND_PRINT((ndo, ""\n\t      %s"", buf));
                        break;
                    case (AFNUM_INET<<8 | SAFNUM_LABUNICAST):
                        advance = decode_labeled_prefix4(ndo, tptr, len, buf, sizeof(buf));
                        if (advance == -1)
                            ND_PRINT((ndo, ""\n\t    (illegal prefix length)""));
                        else if (advance == -2)
                            goto trunc;
                        else if (advance == -3)
                            break; /* bytes left, but not enough */
                        else
                            ND_PRINT((ndo, ""\n\t      %s"", buf));
                        break;
                    case (AFNUM_INET<<8 | SAFNUM_VPNUNICAST):
                    case (AFNUM_INET<<8 | SAFNUM_VPNMULTICAST):
                    case (AFNUM_INET<<8 | SAFNUM_VPNUNIMULTICAST):
                        advance = decode_labeled_vpn_prefix4(ndo, tptr, buf, sizeof(buf));
                        if (advance == -1)
                            ND_PRINT((ndo, ""\n\t    (illegal prefix length)""));
                        else if (advance == -2)
                            goto trunc;
                        else
                            ND_PRINT((ndo, ""\n\t      %s"", buf));
                        break;
                    case (AFNUM_INET<<8 | SAFNUM_RT_ROUTING_INFO):
                        advance = decode_rt_routing_info(ndo, tptr, buf, sizeof(buf));
                        if (advance == -1)
                            ND_PRINT((ndo, ""\n\t    (illegal prefix length)""));
                        else if (advance == -2)
                            goto trunc;
                        else
                            ND_PRINT((ndo, ""\n\t      %s"", buf));
                        break;
                    case (AFNUM_INET<<8 | SAFNUM_MULTICAST_VPN): /* fall through */
                    case (AFNUM_INET6<<8 | SAFNUM_MULTICAST_VPN):
                        advance = decode_multicast_vpn(ndo, tptr, buf, sizeof(buf));
                        if (advance == -1)
                            ND_PRINT((ndo, ""\n\t    (illegal prefix length)""));
                        else if (advance == -2)
                            goto trunc;
                        else
                            ND_PRINT((ndo, ""\n\t      %s"", buf));
                        break;

		    case (AFNUM_INET<<8 | SAFNUM_MDT):
		      advance = decode_mdt_vpn_nlri(ndo, tptr, buf, sizeof(buf));
		      if (advance == -1)
                            ND_PRINT((ndo, ""\n\t    (illegal prefix length)""));
                        else if (advance == -2)
                            goto trunc;
                        else
                            ND_PRINT((ndo, ""\n\t      %s"", buf));
		       break;
                    case (AFNUM_INET6<<8 | SAFNUM_UNICAST):
                    case (AFNUM_INET6<<8 | SAFNUM_MULTICAST):
                    case (AFNUM_INET6<<8 | SAFNUM_UNIMULTICAST):
                        advance = decode_prefix6(ndo, tptr, len, buf, sizeof(buf));
                        if (advance == -1)
                            ND_PRINT((ndo, ""\n\t    (illegal prefix length)""));
                        else if (advance == -2)
                            goto trunc;
                        else if (advance == -3)
                            break; /* bytes left, but not enough */
                        else
                            ND_PRINT((ndo, ""\n\t      %s"", buf));
                        break;
                    case (AFNUM_INET6<<8 | SAFNUM_LABUNICAST):
                        advance = decode_labeled_prefix6(ndo, tptr, len, buf, sizeof(buf));
                        if (advance == -1)
                            ND_PRINT((ndo, ""\n\t    (illegal prefix length)""));
                        else if (advance == -2)
                            goto trunc;
                        else if (advance == -3)
                            break; /* bytes left, but not enough */
                        else
                            ND_PRINT((ndo, ""\n\t      %s"", buf));
                        break;
                    case (AFNUM_INET6<<8 | SAFNUM_VPNUNICAST):
                    case (AFNUM_INET6<<8 | SAFNUM_VPNMULTICAST):
                    case (AFNUM_INET6<<8 | SAFNUM_VPNUNIMULTICAST):
                        advance = decode_labeled_vpn_prefix6(ndo, tptr, buf, sizeof(buf));
                        if (advance == -1)
                            ND_PRINT((ndo, ""\n\t    (illegal prefix length)""));
                        else if (advance == -2)
                            goto trunc;
                        else
                            ND_PRINT((ndo, ""\n\t      %s"", buf));
                        break;
                    case (AFNUM_VPLS<<8 | SAFNUM_VPLS):
                    case (AFNUM_L2VPN<<8 | SAFNUM_VPNUNICAST):
                    case (AFNUM_L2VPN<<8 | SAFNUM_VPNMULTICAST):
                    case (AFNUM_L2VPN<<8 | SAFNUM_VPNUNIMULTICAST):
                        advance = decode_labeled_vpn_l2(ndo, tptr, buf, sizeof(buf));
                        if (advance == -1)
                            ND_PRINT((ndo, ""\n\t    (illegal length)""));
                        else if (advance == -2)
                            goto trunc;
                        else
                            ND_PRINT((ndo, ""\n\t      %s"", buf));
                        break;
                    case (AFNUM_NSAP<<8 | SAFNUM_UNICAST):
                    case (AFNUM_NSAP<<8 | SAFNUM_MULTICAST):
                    case (AFNUM_NSAP<<8 | SAFNUM_UNIMULTICAST):
                        advance = decode_clnp_prefix(ndo, tptr, buf, sizeof(buf));
                        if (advance == -1)
                            ND_PRINT((ndo, ""\n\t    (illegal prefix length)""));
                        else if (advance == -2)
                            goto trunc;
                        else
                            ND_PRINT((ndo, ""\n\t      %s"", buf));
                        break;
                    case (AFNUM_NSAP<<8 | SAFNUM_VPNUNICAST):
                    case (AFNUM_NSAP<<8 | SAFNUM_VPNMULTICAST):
                    case (AFNUM_NSAP<<8 | SAFNUM_VPNUNIMULTICAST):
                        advance = decode_labeled_vpn_clnp_prefix(ndo, tptr, buf, sizeof(buf));
                        if (advance == -1)
                            ND_PRINT((ndo, ""\n\t    (illegal prefix length)""));
                        else if (advance == -2)
                            goto trunc;
                        else
                            ND_PRINT((ndo, ""\n\t      %s"", buf));
                        break;
                    default:
                        ND_TCHECK2(*tptr,tlen);
                        ND_PRINT((ndo, ""\n\t    no AFI %u / SAFI %u decoder"", af, safi));
                        if (ndo->ndo_vflag <= 1)
                            print_unknown_data(ndo, tptr, ""\n\t    "", tlen);
                        advance = 0;
                        tptr = pptr + len;
                        break;
                    }
                    if (advance < 0)
                        break;
                    tptr += advance;
		}
        done:
		break;

	case BGPTYPE_MP_UNREACH_NLRI:
		ND_TCHECK2(tptr[0], BGP_MP_NLRI_MINSIZE);
		af = EXTRACT_16BITS(tptr);
		safi = tptr[2];

                ND_PRINT((ndo, ""\n\t    AFI: %s (%u), %sSAFI: %s (%u)"",
                       tok2str(af_values, ""Unknown AFI"", af),
                       af,
                       (safi>128) ? ""vendor specific "" : """", /* 128 is meanwhile wellknown */
                       tok2str(bgp_safi_values, ""Unknown SAFI"", safi),
                       safi));

                if (len == BGP_MP_NLRI_MINSIZE)
                    ND_PRINT((ndo, ""\n\t      End-of-Rib Marker (empty NLRI)""));

		tptr += 3;

		while (tptr < pptr + len) {
                    switch (af<<8 | safi) {
                    case (AFNUM_INET<<8 | SAFNUM_UNICAST):
                    case (AFNUM_INET<<8 | SAFNUM_MULTICAST):
                    case (AFNUM_INET<<8 | SAFNUM_UNIMULTICAST):
                        advance = decode_prefix4(ndo, tptr, len, buf, sizeof(buf));
                        if (advance == -1)
                            ND_PRINT((ndo, ""\n\t    (illegal prefix length)""));
                        else if (advance == -2)
                            goto trunc;
                        else if (advance == -3)
                            break; /* bytes left, but not enough */
                        else
                            ND_PRINT((ndo, ""\n\t      %s"", buf));
                        break;
                    case (AFNUM_INET<<8 | SAFNUM_LABUNICAST):
                        advance = decode_labeled_prefix4(ndo, tptr, len, buf, sizeof(buf));
                        if (advance == -1)
                            ND_PRINT((ndo, ""\n\t    (illegal prefix length)""));
                        else if (advance == -2)
                            goto trunc;
                        else if (advance == -3)
                            break; /* bytes left, but not enough */
                        else
                            ND_PRINT((ndo, ""\n\t      %s"", buf));
                        break;
                    case (AFNUM_INET<<8 | SAFNUM_VPNUNICAST):
                    case (AFNUM_INET<<8 | SAFNUM_VPNMULTICAST):
                    case (AFNUM_INET<<8 | SAFNUM_VPNUNIMULTICAST):
                        advance = decode_labeled_vpn_prefix4(ndo, tptr, buf, sizeof(buf));
                        if (advance == -1)
                            ND_PRINT((ndo, ""\n\t    (illegal prefix length)""));
                        else if (advance == -2)
                            goto trunc;
                        else
                            ND_PRINT((ndo, ""\n\t      %s"", buf));
                        break;
                    case (AFNUM_INET6<<8 | SAFNUM_UNICAST):
                    case (AFNUM_INET6<<8 | SAFNUM_MULTICAST):
                    case (AFNUM_INET6<<8 | SAFNUM_UNIMULTICAST):
                        advance = decode_prefix6(ndo, tptr, len, buf, sizeof(buf));
                        if (advance == -1)
                            ND_PRINT((ndo, ""\n\t    (illegal prefix length)""));
                        else if (advance == -2)
                            goto trunc;
                        else if (advance == -3)
                            break; /* bytes left, but not enough */
                        else
                            ND_PRINT((ndo, ""\n\t      %s"", buf));
                        break;
                    case (AFNUM_INET6<<8 | SAFNUM_LABUNICAST):
                        advance = decode_labeled_prefix6(ndo, tptr, len, buf, sizeof(buf));
                        if (advance == -1)
                            ND_PRINT((ndo, ""\n\t    (illegal prefix length)""));
                        else if (advance == -2)
                            goto trunc;
                        else if (advance == -3)
                            break; /* bytes left, but not enough */
                        else
                            ND_PRINT((ndo, ""\n\t      %s"", buf));
                        break;
                    case (AFNUM_INET6<<8 | SAFNUM_VPNUNICAST):
                    case (AFNUM_INET6<<8 | SAFNUM_VPNMULTICAST):
                    case (AFNUM_INET6<<8 | SAFNUM_VPNUNIMULTICAST):
                        advance = decode_labeled_vpn_prefix6(ndo, tptr, buf, sizeof(buf));
                        if (advance == -1)
                            ND_PRINT((ndo, ""\n\t    (illegal prefix length)""));
                        else if (advance == -2)
                            goto trunc;
                        else
                            ND_PRINT((ndo, ""\n\t      %s"", buf));
                        break;
                    case (AFNUM_VPLS<<8 | SAFNUM_VPLS):
                    case (AFNUM_L2VPN<<8 | SAFNUM_VPNUNICAST):
                    case (AFNUM_L2VPN<<8 | SAFNUM_VPNMULTICAST):
                    case (AFNUM_L2VPN<<8 | SAFNUM_VPNUNIMULTICAST):
                        advance = decode_labeled_vpn_l2(ndo, tptr, buf, sizeof(buf));
                        if (advance == -1)
                            ND_PRINT((ndo, ""\n\t    (illegal length)""));
                        else if (advance == -2)
                            goto trunc;
                        else
                            ND_PRINT((ndo, ""\n\t      %s"", buf));
                        break;
                    case (AFNUM_NSAP<<8 | SAFNUM_UNICAST):
                    case (AFNUM_NSAP<<8 | SAFNUM_MULTICAST):
                    case (AFNUM_NSAP<<8 | SAFNUM_UNIMULTICAST):
                        advance = decode_clnp_prefix(ndo, tptr, buf, sizeof(buf));
                        if (advance == -1)
                            ND_PRINT((ndo, ""\n\t    (illegal prefix length)""));
                        else if (advance == -2)
                            goto trunc;
                        else
                            ND_PRINT((ndo, ""\n\t      %s"", buf));
                        break;
                    case (AFNUM_NSAP<<8 | SAFNUM_VPNUNICAST):
                    case (AFNUM_NSAP<<8 | SAFNUM_VPNMULTICAST):
                    case (AFNUM_NSAP<<8 | SAFNUM_VPNUNIMULTICAST):
                        advance = decode_labeled_vpn_clnp_prefix(ndo, tptr, buf, sizeof(buf));
                        if (advance == -1)
                            ND_PRINT((ndo, ""\n\t    (illegal prefix length)""));
                        else if (advance == -2)
                            goto trunc;
                        else
                            ND_PRINT((ndo, ""\n\t      %s"", buf));
                        break;
		    case (AFNUM_INET<<8 | SAFNUM_MDT):
		      advance = decode_mdt_vpn_nlri(ndo, tptr, buf, sizeof(buf));
		      if (advance == -1)
                            ND_PRINT((ndo, ""\n\t    (illegal prefix length)""));
                        else if (advance == -2)
                            goto trunc;
                        else
                            ND_PRINT((ndo, ""\n\t      %s"", buf));
		       break;
                    case (AFNUM_INET<<8 | SAFNUM_MULTICAST_VPN): /* fall through */
                    case (AFNUM_INET6<<8 | SAFNUM_MULTICAST_VPN):
                        advance = decode_multicast_vpn(ndo, tptr, buf, sizeof(buf));
                        if (advance == -1)
                            ND_PRINT((ndo, ""\n\t    (illegal prefix length)""));
                        else if (advance == -2)
                            goto trunc;
                        else
                            ND_PRINT((ndo, ""\n\t      %s"", buf));
                        break;
                    default:
                        ND_TCHECK2(*(tptr-3),tlen);
                        ND_PRINT((ndo, ""no AFI %u / SAFI %u decoder"", af, safi));
                        if (ndo->ndo_vflag <= 1)
                            print_unknown_data(ndo, tptr-3, ""\n\t    "", tlen);
                        advance = 0;
                        tptr = pptr + len;
                        break;
                    }
                    if (advance < 0)
                        break;
                    tptr += advance;
		}
		break;
        case BGPTYPE_EXTD_COMMUNITIES:
		if (len % 8) {
			ND_PRINT((ndo, ""invalid len""));
			break;
		}
                while (tlen>0) {
                    uint16_t extd_comm;

                    ND_TCHECK2(tptr[0], 2);
                    extd_comm=EXTRACT_16BITS(tptr);

		    ND_PRINT((ndo, ""\n\t    %s (0x%04x), Flags [%s]"",
			   tok2str(bgp_extd_comm_subtype_values,
				      ""unknown extd community typecode"",
				      extd_comm),
			   extd_comm,
			   bittok2str(bgp_extd_comm_flag_values, ""none"", extd_comm)));

                    ND_TCHECK2(*(tptr+2), 6);
                    switch(extd_comm) {
                    case BGP_EXT_COM_RT_0:
                    case BGP_EXT_COM_RO_0:
                    case BGP_EXT_COM_L2VPN_RT_0:
                        ND_PRINT((ndo, "": %u:%u (= %s)"",
                               EXTRACT_16BITS(tptr+2),
                               EXTRACT_32BITS(tptr+4),
                               ipaddr_string(ndo, tptr+4)));
                        break;
                    case BGP_EXT_COM_RT_1:
                    case BGP_EXT_COM_RO_1:
                    case BGP_EXT_COM_L2VPN_RT_1:
                    case BGP_EXT_COM_VRF_RT_IMP:
                        ND_PRINT((ndo, "": %s:%u"",
                               ipaddr_string(ndo, tptr+2),
                               EXTRACT_16BITS(tptr+6)));
                        break;
                    case BGP_EXT_COM_RT_2:
                    case BGP_EXT_COM_RO_2:
			ND_PRINT((ndo, "": %s:%u"",
			    as_printf(ndo, astostr, sizeof(astostr),
			    EXTRACT_32BITS(tptr+2)), EXTRACT_16BITS(tptr+6)));
			break;
                    case BGP_EXT_COM_LINKBAND:
		        bw.i = EXTRACT_32BITS(tptr+2);
                        ND_PRINT((ndo, "": bandwidth: %.3f Mbps"",
                               bw.f*8/1000000));
                        break;
                    case BGP_EXT_COM_VPN_ORIGIN:
                    case BGP_EXT_COM_VPN_ORIGIN2:
                    case BGP_EXT_COM_VPN_ORIGIN3:
                    case BGP_EXT_COM_VPN_ORIGIN4:
                    case BGP_EXT_COM_OSPF_RID:
                    case BGP_EXT_COM_OSPF_RID2:
                        ND_PRINT((ndo, ""%s"", ipaddr_string(ndo, tptr+2)));
                        break;
                    case BGP_EXT_COM_OSPF_RTYPE:
                    case BGP_EXT_COM_OSPF_RTYPE2:
                        ND_PRINT((ndo, "": area:%s, router-type:%s, metric-type:%s%s"",
                               ipaddr_string(ndo, tptr+2),
                               tok2str(bgp_extd_comm_ospf_rtype_values,
					  ""unknown (0x%02x)"",
					  *(tptr+6)),
                               (*(tptr+7) &  BGP_OSPF_RTYPE_METRIC_TYPE) ? ""E2"" : """",
                               ((*(tptr+6) == BGP_OSPF_RTYPE_EXT) || (*(tptr+6) == BGP_OSPF_RTYPE_NSSA)) ? ""E1"" : """"));
                        break;
                    case BGP_EXT_COM_L2INFO:
                        ND_PRINT((ndo, "": %s Control Flags [0x%02x]:MTU %u"",
                               tok2str(l2vpn_encaps_values,
					  ""unknown encaps"",
					  *(tptr+2)),
                                       *(tptr+3),
                               EXTRACT_16BITS(tptr+4)));
                        break;
                    case BGP_EXT_COM_SOURCE_AS:
                        ND_PRINT((ndo, "": AS %u"", EXTRACT_16BITS(tptr+2)));
                        break;
                    default:
                        ND_TCHECK2(*tptr,8);
                        print_unknown_data(ndo, tptr, ""\n\t      "", 8);
                        break;
                    }
                    tlen -=8;
                    tptr +=8;
                }
                break;

        case BGPTYPE_PMSI_TUNNEL:
        {
                uint8_t tunnel_type, flags;

                ND_TCHECK2(tptr[0], 5);
                tunnel_type = *(tptr+1);
                flags = *tptr;
                tlen = len;

                ND_PRINT((ndo, ""\n\t    Tunnel-type %s (%u), Flags [%s], MPLS Label %u"",
                       tok2str(bgp_pmsi_tunnel_values, ""Unknown"", tunnel_type),
                       tunnel_type,
                       bittok2str(bgp_pmsi_flag_values, ""none"", flags),
                       EXTRACT_24BITS(tptr+2)>>4));

                tptr +=5;
                tlen -= 5;

                switch (tunnel_type) {
                case BGP_PMSI_TUNNEL_PIM_SM: /* fall through */
                case BGP_PMSI_TUNNEL_PIM_BIDIR:
                    ND_TCHECK2(tptr[0], 8);
                    ND_PRINT((ndo, ""\n\t      Sender %s, P-Group %s"",
                           ipaddr_string(ndo, tptr),
                           ipaddr_string(ndo, tptr+4)));
                    break;

                case BGP_PMSI_TUNNEL_PIM_SSM:
                    ND_TCHECK2(tptr[0], 8);
                    ND_PRINT((ndo, ""\n\t      Root-Node %s, P-Group %s"",
                           ipaddr_string(ndo, tptr),
                           ipaddr_string(ndo, tptr+4)));
                    break;
                case BGP_PMSI_TUNNEL_INGRESS:
                    ND_TCHECK2(tptr[0], 4);
                    ND_PRINT((ndo, ""\n\t      Tunnel-Endpoint %s"",
                           ipaddr_string(ndo, tptr)));
                    break;
                case BGP_PMSI_TUNNEL_LDP_P2MP: /* fall through */
                case BGP_PMSI_TUNNEL_LDP_MP2MP:
                    ND_TCHECK2(tptr[0], 8);
                    ND_PRINT((ndo, ""\n\t      Root-Node %s, LSP-ID 0x%08x"",
                           ipaddr_string(ndo, tptr),
                           EXTRACT_32BITS(tptr+4)));
                    break;
                case BGP_PMSI_TUNNEL_RSVP_P2MP:
                    ND_TCHECK2(tptr[0], 8);
                    ND_PRINT((ndo, ""\n\t      Extended-Tunnel-ID %s, P2MP-ID 0x%08x"",
                           ipaddr_string(ndo, tptr),
                           EXTRACT_32BITS(tptr+4)));
                    break;
                default:
                    if (ndo->ndo_vflag <= 1) {
                        print_unknown_data(ndo, tptr, ""\n\t      "", tlen);
                    }
                }
                break;
        }
	case BGPTYPE_AIGP:
	{
		uint8_t type;
		uint16_t length;

		tlen = len;

		while (tlen >= 3) {

		    ND_TCHECK2(tptr[0], 3);

		    type = *tptr;
		    length = EXTRACT_16BITS(tptr+1);
		    tptr += 3;
		    tlen -= 3;

		    ND_PRINT((ndo, ""\n\t    %s TLV (%u), length %u"",
			      tok2str(bgp_aigp_values, ""Unknown"", type),
			      type, length));

		    if (length < 3)
			goto trunc;
		    length -= 3;

		    /*
		     * Check if we can read the TLV data.
		     */
		    ND_TCHECK2(tptr[3], length);

		    switch (type) {

		    case BGP_AIGP_TLV:
		        if (length < 8)
		            goto trunc;
			ND_PRINT((ndo, "", metric %"" PRIu64,
				  EXTRACT_64BITS(tptr)));
			break;

		    default:
			if (ndo->ndo_vflag <= 1) {
			    print_unknown_data(ndo, tptr,""\n\t      "", length);
			}
		    }

		    tptr += length;
		    tlen -= length;
		}
		break;
	}
        case BGPTYPE_ATTR_SET:
                ND_TCHECK2(tptr[0], 4);
                if (len < 4)
                	goto trunc;
		ND_PRINT((ndo, ""\n\t    Origin AS: %s"",
		    as_printf(ndo, astostr, sizeof(astostr), EXTRACT_32BITS(tptr))));
		tptr+=4;
                len -=4;

                while (len) {
                    u_int aflags, alenlen, alen;

                    ND_TCHECK2(tptr[0], 2);
                    if (len < 2)
                        goto trunc;
                    aflags = *tptr;
                    atype = *(tptr + 1);
                    tptr += 2;
                    len -= 2;
                    alenlen = bgp_attr_lenlen(aflags, tptr);
                    ND_TCHECK2(tptr[0], alenlen);
                    if (len < alenlen)
                        goto trunc;
                    alen = bgp_attr_len(aflags, tptr);
                    tptr += alenlen;
                    len -= alenlen;

                    ND_PRINT((ndo, ""\n\t      %s (%u), length: %u"",
                           tok2str(bgp_attr_values,
                                      ""Unknown Attribute"", atype),
                           atype,
                           alen));

                    if (aflags) {
                        ND_PRINT((ndo, "", Flags [%s%s%s%s"",
                               aflags & 0x80 ? ""O"" : """",
                               aflags & 0x40 ? ""T"" : """",
                               aflags & 0x20 ? ""P"" : """",
                               aflags & 0x10 ? ""E"" : """"));
                        if (aflags & 0xf)
                             ND_PRINT((ndo, ""+%x"", aflags & 0xf));
                         ND_PRINT((ndo, ""]: ""));
                     }
                    /* FIXME check for recursion */
                    if (!bgp_attr_print(ndo, atype, tptr, alen))
                         return 0;
                     tptr += alen;
                     len -= alen;
		}
                break;

	case BGPTYPE_LARGE_COMMUNITY:
		if (len == 0 || len % 12) {
			ND_PRINT((ndo, ""invalid len""));
			break;
		}
		ND_PRINT((ndo, ""\n\t    ""));
		while (len > 0) {
			ND_TCHECK2(*tptr, 12);
			ND_PRINT((ndo, ""%u:%u:%u%s"",
				 EXTRACT_32BITS(tptr),
				 EXTRACT_32BITS(tptr + 4),
				 EXTRACT_32BITS(tptr + 8),
				 (len > 12) ? "", "" : """"));
                        tptr += 12;
                        len -= 12;
		}
		break;
	default:
	    ND_TCHECK2(*pptr,len);
            ND_PRINT((ndo, ""\n\t    no Attribute %u decoder"", atype)); /* we have no decoder for the attribute */
            if (ndo->ndo_vflag <= 1)
                print_unknown_data(ndo, pptr, ""\n\t    "", len);
            break;
	}
        if (ndo->ndo_vflag > 1 && len) { /* omit zero length attributes*/
            ND_TCHECK2(*pptr,len);
            print_unknown_data(ndo, pptr, ""\n\t    "", len);
        }
        return 1;

trunc:
        return 0;
}
",C,"               u_int atype, const u_char *pptr, u_int len, const unsigned attr_set_level)
                    /* The protocol encoding per se allows ATTR_SET to be nested as many times
                     * as the message can accommodate. This printer used to be able to recurse
                     * into ATTR_SET contents until the stack exhaustion, but now there is a
                     * limit on that (if live protocol exchange goes that many levels deep,
                     * something is probably wrong anyway). Feel free to refine this value if
                     * you can find the spec with respective normative text.
                     */
                    if (attr_set_level == 10)
                        ND_PRINT((ndo, ""(too many nested levels, not recursing)""));
                    else if (!bgp_attr_print(ndo, atype, tptr, alen, attr_set_level + 1))
","               u_int atype, const u_char *pptr, u_int len)
                    /* FIXME check for recursion */
                    if (!bgp_attr_print(ndo, atype, tptr, alen))
",,"@@ -1361,7 +1361,7 @@ bgp_attr_get_as_size(netdissect_options *ndo,
 
 static int
 bgp_attr_print(netdissect_options *ndo,
-               u_int atype, const u_char *pptr, u_int len)
+               u_int atype, const u_char *pptr, u_int len, const unsigned attr_set_level)
 {
 	int i;
 	uint16_t af;
@@ -2284,8 +2284,16 @@ bgp_attr_print(netdissect_options *ndo,
                             ND_PRINT((ndo, ""+%x"", aflags & 0xf));
                         ND_PRINT((ndo, ""]: ""));
                     }
-                    /* FIXME check for recursion */
-                    if (!bgp_attr_print(ndo, atype, tptr, alen))
+                    /* The protocol encoding per se allows ATTR_SET to be nested as many times
+                     * as the message can accommodate. This printer used to be able to recurse
+                     * into ATTR_SET contents until the stack exhaustion, but now there is a
+                     * limit on that (if live protocol exchange goes that many levels deep,
+                     * something is probably wrong anyway). Feel free to refine this value if
+                     * you can find the spec with respective normative text.
+                     */
+                    if (attr_set_level == 10)
+                        ND_PRINT((ndo, ""(too many nested levels, not recursing)""));
+                    else if (!bgp_attr_print(ndo, atype, tptr, alen, attr_set_level + 1))
                         return 0;
                     tptr += alen;
                     len -= alen;
@@ -2592,7 +2600,7 @@ bgp_update_print(netdissect_options *ndo,
 				goto trunc;
 			if (length < alen)
 				goto trunc;
-			if (!bgp_attr_print(ndo, atype, p, alen))
+			if (!bgp_attr_print(ndo, atype, p, alen, 0))
 				goto trunc;
 			p += alen;
 			len -= alen;",tcpdump,af2cf04a9394c1a56227c2289ae8da262828294a,4bfd71eee41a1db0647fa4d434841a51b07ec38a,1," bgp_attr_print(netdissect_options *ndo,
//flaw_line_below:
               u_int atype, const u_char *pptr, u_int len)
//fix_flaw_line_below:
//               u_int atype, const u_char *pptr, u_int len, const unsigned attr_set_level)
 {
 	int i;
 	uint16_t af;
	uint8_t safi, snpa, nhlen;
        union { /* copy buffer for bandwidth values */
            float f;
            uint32_t i;
        } bw;
	int advance;
	u_int tlen;
	const u_char *tptr;
	char buf[MAXHOSTNAMELEN + 100];
        int  as_size;

        tptr = pptr;
        tlen=len;

	switch (atype) {
	case BGPTYPE_ORIGIN:
		if (len != 1)
			ND_PRINT((ndo, ""invalid len""));
		else {
			ND_TCHECK(*tptr);
			ND_PRINT((ndo, ""%s"", tok2str(bgp_origin_values,
						""Unknown Origin Typecode"",
						tptr[0])));
		}
		break;

        /*
         * Process AS4 byte path and AS2 byte path attributes here.
         */
	case BGPTYPE_AS4_PATH:
	case BGPTYPE_AS_PATH:
		if (len % 2) {
			ND_PRINT((ndo, ""invalid len""));
			break;
		}
                if (!len) {
			ND_PRINT((ndo, ""empty""));
			break;
                }

                /*
                 * BGP updates exchanged between New speakers that support 4
                 * byte AS, ASs are always encoded in 4 bytes. There is no
                 * definitive way to find this, just by the packet's
                 * contents. So, check for packet's TLV's sanity assuming
                 * 2 bytes first, and it does not pass, assume that ASs are
                 * encoded in 4 bytes format and move on.
                 */
                as_size = bgp_attr_get_as_size(ndo, atype, pptr, len);

		while (tptr < pptr + len) {
			ND_TCHECK(tptr[0]);
                        ND_PRINT((ndo, ""%s"", tok2str(bgp_as_path_segment_open_values,
						""?"", tptr[0])));
			ND_TCHECK(tptr[1]);
                        for (i = 0; i < tptr[1] * as_size; i += as_size) {
                            ND_TCHECK2(tptr[2 + i], as_size);
			    ND_PRINT((ndo, ""%s "",
				as_printf(ndo, astostr, sizeof(astostr),
				as_size == 2 ?
				EXTRACT_16BITS(&tptr[2 + i]) :
				EXTRACT_32BITS(&tptr[2 + i]))));
                        }
			ND_TCHECK(tptr[0]);
                        ND_PRINT((ndo, ""%s"", tok2str(bgp_as_path_segment_close_values,
						""?"", tptr[0])));
                        ND_TCHECK(tptr[1]);
                        tptr += 2 + tptr[1] * as_size;
		}
		break;
	case BGPTYPE_NEXT_HOP:
		if (len != 4)
			ND_PRINT((ndo, ""invalid len""));
		else {
			ND_TCHECK2(tptr[0], 4);
			ND_PRINT((ndo, ""%s"", ipaddr_string(ndo, tptr)));
		}
		break;
	case BGPTYPE_MULTI_EXIT_DISC:
	case BGPTYPE_LOCAL_PREF:
		if (len != 4)
			ND_PRINT((ndo, ""invalid len""));
		else {
			ND_TCHECK2(tptr[0], 4);
			ND_PRINT((ndo, ""%u"", EXTRACT_32BITS(tptr)));
		}
		break;
	case BGPTYPE_ATOMIC_AGGREGATE:
		if (len != 0)
			ND_PRINT((ndo, ""invalid len""));
		break;
        case BGPTYPE_AGGREGATOR:

                /*
                 * Depending on the AS encoded is of 2 bytes or of 4 bytes,
                 * the length of this PA can be either 6 bytes or 8 bytes.
                 */
                if (len != 6 && len != 8) {
                    ND_PRINT((ndo, ""invalid len""));
                    break;
                }
                ND_TCHECK2(tptr[0], len);
                if (len == 6) {
		    ND_PRINT((ndo, "" AS #%s, origin %s"",
			as_printf(ndo, astostr, sizeof(astostr), EXTRACT_16BITS(tptr)),
			ipaddr_string(ndo, tptr + 2)));
                } else {
		    ND_PRINT((ndo, "" AS #%s, origin %s"",
			as_printf(ndo, astostr, sizeof(astostr),
			EXTRACT_32BITS(tptr)), ipaddr_string(ndo, tptr + 4)));
                }
                break;
	case BGPTYPE_AGGREGATOR4:
		if (len != 8) {
			ND_PRINT((ndo, ""invalid len""));
			break;
		}
		ND_TCHECK2(tptr[0], 8);
		ND_PRINT((ndo, "" AS #%s, origin %s"",
		    as_printf(ndo, astostr, sizeof(astostr), EXTRACT_32BITS(tptr)),
		    ipaddr_string(ndo, tptr + 4)));
		break;
	case BGPTYPE_COMMUNITIES:
		if (len % 4) {
			ND_PRINT((ndo, ""invalid len""));
			break;
		}
		while (tlen>0) {
			uint32_t comm;
			ND_TCHECK2(tptr[0], 4);
			comm = EXTRACT_32BITS(tptr);
			switch (comm) {
			case BGP_COMMUNITY_NO_EXPORT:
				ND_PRINT((ndo, "" NO_EXPORT""));
				break;
			case BGP_COMMUNITY_NO_ADVERT:
				ND_PRINT((ndo, "" NO_ADVERTISE""));
				break;
			case BGP_COMMUNITY_NO_EXPORT_SUBCONFED:
				ND_PRINT((ndo, "" NO_EXPORT_SUBCONFED""));
				break;
			default:
				ND_PRINT((ndo, ""%u:%u%s"",
                                       (comm >> 16) & 0xffff,
                                       comm & 0xffff,
                                       (tlen>4) ? "", "" : """"));
				break;
			}
                        tlen -=4;
                        tptr +=4;
		}
		break;
        case BGPTYPE_ORIGINATOR_ID:
		if (len != 4) {
			ND_PRINT((ndo, ""invalid len""));
			break;
		}
		ND_TCHECK2(tptr[0], 4);
                ND_PRINT((ndo, ""%s"",ipaddr_string(ndo, tptr)));
                break;
        case BGPTYPE_CLUSTER_LIST:
		if (len % 4) {
			ND_PRINT((ndo, ""invalid len""));
			break;
		}
                while (tlen>0) {
			ND_TCHECK2(tptr[0], 4);
                        ND_PRINT((ndo, ""%s%s"",
                               ipaddr_string(ndo, tptr),
                                (tlen>4) ? "", "" : """"));
                        tlen -=4;
                        tptr +=4;
                }
                break;
	case BGPTYPE_MP_REACH_NLRI:
		ND_TCHECK2(tptr[0], 3);
		af = EXTRACT_16BITS(tptr);
		safi = tptr[2];

                ND_PRINT((ndo, ""\n\t    AFI: %s (%u), %sSAFI: %s (%u)"",
                       tok2str(af_values, ""Unknown AFI"", af),
                       af,
                       (safi>128) ? ""vendor specific "" : """", /* 128 is meanwhile wellknown */
                       tok2str(bgp_safi_values, ""Unknown SAFI"", safi),
                       safi));

                switch(af<<8 | safi) {
                case (AFNUM_INET<<8 | SAFNUM_UNICAST):
                case (AFNUM_INET<<8 | SAFNUM_MULTICAST):
                case (AFNUM_INET<<8 | SAFNUM_UNIMULTICAST):
                case (AFNUM_INET<<8 | SAFNUM_LABUNICAST):
                case (AFNUM_INET<<8 | SAFNUM_RT_ROUTING_INFO):
                case (AFNUM_INET<<8 | SAFNUM_VPNUNICAST):
                case (AFNUM_INET<<8 | SAFNUM_VPNMULTICAST):
                case (AFNUM_INET<<8 | SAFNUM_VPNUNIMULTICAST):
                case (AFNUM_INET<<8 | SAFNUM_MULTICAST_VPN):
		case (AFNUM_INET<<8 | SAFNUM_MDT):
                case (AFNUM_INET6<<8 | SAFNUM_UNICAST):
                case (AFNUM_INET6<<8 | SAFNUM_MULTICAST):
                case (AFNUM_INET6<<8 | SAFNUM_UNIMULTICAST):
                case (AFNUM_INET6<<8 | SAFNUM_LABUNICAST):
                case (AFNUM_INET6<<8 | SAFNUM_VPNUNICAST):
                case (AFNUM_INET6<<8 | SAFNUM_VPNMULTICAST):
                case (AFNUM_INET6<<8 | SAFNUM_VPNUNIMULTICAST):
                case (AFNUM_NSAP<<8 | SAFNUM_UNICAST):
                case (AFNUM_NSAP<<8 | SAFNUM_MULTICAST):
                case (AFNUM_NSAP<<8 | SAFNUM_UNIMULTICAST):
                case (AFNUM_NSAP<<8 | SAFNUM_VPNUNICAST):
                case (AFNUM_NSAP<<8 | SAFNUM_VPNMULTICAST):
                case (AFNUM_NSAP<<8 | SAFNUM_VPNUNIMULTICAST):
                case (AFNUM_L2VPN<<8 | SAFNUM_VPNUNICAST):
                case (AFNUM_L2VPN<<8 | SAFNUM_VPNMULTICAST):
                case (AFNUM_L2VPN<<8 | SAFNUM_VPNUNIMULTICAST):
                case (AFNUM_VPLS<<8 | SAFNUM_VPLS):
                    break;
                default:
                    ND_TCHECK2(tptr[0], tlen);
                    ND_PRINT((ndo, ""\n\t    no AFI %u / SAFI %u decoder"", af, safi));
                    if (ndo->ndo_vflag <= 1)
                        print_unknown_data(ndo, tptr, ""\n\t    "", tlen);
                    goto done;
                    break;
                }

                tptr +=3;

		ND_TCHECK(tptr[0]);
		nhlen = tptr[0];
                tlen = nhlen;
                tptr++;

		if (tlen) {
                    int nnh = 0;
                    ND_PRINT((ndo, ""\n\t    nexthop: ""));
                    while (tlen > 0) {
                        if ( nnh++ > 0 ) {
                            ND_PRINT((ndo,  "", "" ));
                        }
                        switch(af<<8 | safi) {
                        case (AFNUM_INET<<8 | SAFNUM_UNICAST):
                        case (AFNUM_INET<<8 | SAFNUM_MULTICAST):
                        case (AFNUM_INET<<8 | SAFNUM_UNIMULTICAST):
                        case (AFNUM_INET<<8 | SAFNUM_LABUNICAST):
                        case (AFNUM_INET<<8 | SAFNUM_RT_ROUTING_INFO):
                        case (AFNUM_INET<<8 | SAFNUM_MULTICAST_VPN):
                        case (AFNUM_INET<<8 | SAFNUM_MDT):
			    if (tlen < (int)sizeof(struct in_addr)) {
                                ND_PRINT((ndo, ""invalid len""));
                                tlen = 0;
                            } else {
                                ND_TCHECK2(tptr[0], sizeof(struct in_addr));
                                ND_PRINT((ndo, ""%s"",ipaddr_string(ndo, tptr)));
                                tlen -= sizeof(struct in_addr);
                                tptr += sizeof(struct in_addr);
                            }
                            break;
                        case (AFNUM_INET<<8 | SAFNUM_VPNUNICAST):
                        case (AFNUM_INET<<8 | SAFNUM_VPNMULTICAST):
                        case (AFNUM_INET<<8 | SAFNUM_VPNUNIMULTICAST):
                            if (tlen < (int)(sizeof(struct in_addr)+BGP_VPN_RD_LEN)) {
                                ND_PRINT((ndo, ""invalid len""));
                                tlen = 0;
                            } else {
                                ND_TCHECK2(tptr[0], sizeof(struct in_addr)+BGP_VPN_RD_LEN);
                                ND_PRINT((ndo, ""RD: %s, %s"",
                                       bgp_vpn_rd_print(ndo, tptr),
                                       ipaddr_string(ndo, tptr+BGP_VPN_RD_LEN)));
                                tlen -= (sizeof(struct in_addr)+BGP_VPN_RD_LEN);
                                tptr += (sizeof(struct in_addr)+BGP_VPN_RD_LEN);
                            }
                            break;
                        case (AFNUM_INET6<<8 | SAFNUM_UNICAST):
                        case (AFNUM_INET6<<8 | SAFNUM_MULTICAST):
                        case (AFNUM_INET6<<8 | SAFNUM_UNIMULTICAST):
                        case (AFNUM_INET6<<8 | SAFNUM_LABUNICAST):
                            if (tlen < (int)sizeof(struct in6_addr)) {
                                ND_PRINT((ndo, ""invalid len""));
                                tlen = 0;
                            } else {
                                ND_TCHECK2(tptr[0], sizeof(struct in6_addr));
                                ND_PRINT((ndo, ""%s"", ip6addr_string(ndo, tptr)));
                                tlen -= sizeof(struct in6_addr);
                                tptr += sizeof(struct in6_addr);
                            }
                            break;
                        case (AFNUM_INET6<<8 | SAFNUM_VPNUNICAST):
                        case (AFNUM_INET6<<8 | SAFNUM_VPNMULTICAST):
                        case (AFNUM_INET6<<8 | SAFNUM_VPNUNIMULTICAST):
                            if (tlen < (int)(sizeof(struct in6_addr)+BGP_VPN_RD_LEN)) {
                                ND_PRINT((ndo, ""invalid len""));
                                tlen = 0;
                            } else {
                                ND_TCHECK2(tptr[0], sizeof(struct in6_addr)+BGP_VPN_RD_LEN);
                                ND_PRINT((ndo, ""RD: %s, %s"",
                                       bgp_vpn_rd_print(ndo, tptr),
                                       ip6addr_string(ndo, tptr+BGP_VPN_RD_LEN)));
                                tlen -= (sizeof(struct in6_addr)+BGP_VPN_RD_LEN);
                                tptr += (sizeof(struct in6_addr)+BGP_VPN_RD_LEN);
                            }
                            break;
                        case (AFNUM_VPLS<<8 | SAFNUM_VPLS):
                        case (AFNUM_L2VPN<<8 | SAFNUM_VPNUNICAST):
                        case (AFNUM_L2VPN<<8 | SAFNUM_VPNMULTICAST):
                        case (AFNUM_L2VPN<<8 | SAFNUM_VPNUNIMULTICAST):
                            if (tlen < (int)sizeof(struct in_addr)) {
                                ND_PRINT((ndo, ""invalid len""));
                                tlen = 0;
                            } else {
                                ND_TCHECK2(tptr[0], sizeof(struct in_addr));
                                ND_PRINT((ndo, ""%s"", ipaddr_string(ndo, tptr)));
                                tlen -= (sizeof(struct in_addr));
                                tptr += (sizeof(struct in_addr));
                            }
                            break;
                        case (AFNUM_NSAP<<8 | SAFNUM_UNICAST):
                        case (AFNUM_NSAP<<8 | SAFNUM_MULTICAST):
                        case (AFNUM_NSAP<<8 | SAFNUM_UNIMULTICAST):
                            ND_TCHECK2(tptr[0], tlen);
                            ND_PRINT((ndo, ""%s"", isonsap_string(ndo, tptr, tlen)));
                            tptr += tlen;
                            tlen = 0;
                            break;

                        case (AFNUM_NSAP<<8 | SAFNUM_VPNUNICAST):
                        case (AFNUM_NSAP<<8 | SAFNUM_VPNMULTICAST):
                        case (AFNUM_NSAP<<8 | SAFNUM_VPNUNIMULTICAST):
                            if (tlen < BGP_VPN_RD_LEN+1) {
                                ND_PRINT((ndo, ""invalid len""));
                                tlen = 0;
                            } else {
                                ND_TCHECK2(tptr[0], tlen);
                                ND_PRINT((ndo, ""RD: %s, %s"",
                                       bgp_vpn_rd_print(ndo, tptr),
                                       isonsap_string(ndo, tptr+BGP_VPN_RD_LEN,tlen-BGP_VPN_RD_LEN)));
                                /* rfc986 mapped IPv4 address ? */
                                if (tlen == BGP_VPN_RD_LEN + 4 + sizeof(struct in_addr)
                                    && EXTRACT_32BITS(tptr+BGP_VPN_RD_LEN) ==  0x47000601)
                                    ND_PRINT((ndo, "" = %s"", ipaddr_string(ndo, tptr+BGP_VPN_RD_LEN+4)));
                                /* rfc1888 mapped IPv6 address ? */
                                else if (tlen == BGP_VPN_RD_LEN + 3 + sizeof(struct in6_addr)
                                         && EXTRACT_24BITS(tptr+BGP_VPN_RD_LEN) ==  0x350000)
                                    ND_PRINT((ndo, "" = %s"", ip6addr_string(ndo, tptr+BGP_VPN_RD_LEN+3)));
                                tptr += tlen;
                                tlen = 0;
                            }
                            break;
                        default:
                            ND_TCHECK2(tptr[0], tlen);
                            ND_PRINT((ndo, ""no AFI %u/SAFI %u decoder"", af, safi));
                            if (ndo->ndo_vflag <= 1)
                                print_unknown_data(ndo, tptr, ""\n\t    "", tlen);
                            tptr += tlen;
                            tlen = 0;
                            goto done;
                            break;
                        }
                    }
		}
		ND_PRINT((ndo, "", nh-length: %u"", nhlen));
		tptr += tlen;

		ND_TCHECK(tptr[0]);
		snpa = tptr[0];
		tptr++;

		if (snpa) {
			ND_PRINT((ndo, ""\n\t    %u SNPA"", snpa));
			for (/*nothing*/; snpa > 0; snpa--) {
				ND_TCHECK(tptr[0]);
				ND_PRINT((ndo, ""\n\t      %d bytes"", tptr[0]));
				tptr += tptr[0] + 1;
			}
		} else {
			ND_PRINT((ndo, "", no SNPA""));
                }

		while (tptr < pptr + len) {
                    switch (af<<8 | safi) {
                    case (AFNUM_INET<<8 | SAFNUM_UNICAST):
                    case (AFNUM_INET<<8 | SAFNUM_MULTICAST):
                    case (AFNUM_INET<<8 | SAFNUM_UNIMULTICAST):
                        advance = decode_prefix4(ndo, tptr, len, buf, sizeof(buf));
                        if (advance == -1)
                            ND_PRINT((ndo, ""\n\t    (illegal prefix length)""));
                        else if (advance == -2)
                            goto trunc;
                        else if (advance == -3)
                            break; /* bytes left, but not enough */
                        else
                            ND_PRINT((ndo, ""\n\t      %s"", buf));
                        break;
                    case (AFNUM_INET<<8 | SAFNUM_LABUNICAST):
                        advance = decode_labeled_prefix4(ndo, tptr, len, buf, sizeof(buf));
                        if (advance == -1)
                            ND_PRINT((ndo, ""\n\t    (illegal prefix length)""));
                        else if (advance == -2)
                            goto trunc;
                        else if (advance == -3)
                            break; /* bytes left, but not enough */
                        else
                            ND_PRINT((ndo, ""\n\t      %s"", buf));
                        break;
                    case (AFNUM_INET<<8 | SAFNUM_VPNUNICAST):
                    case (AFNUM_INET<<8 | SAFNUM_VPNMULTICAST):
                    case (AFNUM_INET<<8 | SAFNUM_VPNUNIMULTICAST):
                        advance = decode_labeled_vpn_prefix4(ndo, tptr, buf, sizeof(buf));
                        if (advance == -1)
                            ND_PRINT((ndo, ""\n\t    (illegal prefix length)""));
                        else if (advance == -2)
                            goto trunc;
                        else
                            ND_PRINT((ndo, ""\n\t      %s"", buf));
                        break;
                    case (AFNUM_INET<<8 | SAFNUM_RT_ROUTING_INFO):
                        advance = decode_rt_routing_info(ndo, tptr, buf, sizeof(buf));
                        if (advance == -1)
                            ND_PRINT((ndo, ""\n\t    (illegal prefix length)""));
                        else if (advance == -2)
                            goto trunc;
                        else
                            ND_PRINT((ndo, ""\n\t      %s"", buf));
                        break;
                    case (AFNUM_INET<<8 | SAFNUM_MULTICAST_VPN): /* fall through */
                    case (AFNUM_INET6<<8 | SAFNUM_MULTICAST_VPN):
                        advance = decode_multicast_vpn(ndo, tptr, buf, sizeof(buf));
                        if (advance == -1)
                            ND_PRINT((ndo, ""\n\t    (illegal prefix length)""));
                        else if (advance == -2)
                            goto trunc;
                        else
                            ND_PRINT((ndo, ""\n\t      %s"", buf));
                        break;

		    case (AFNUM_INET<<8 | SAFNUM_MDT):
		      advance = decode_mdt_vpn_nlri(ndo, tptr, buf, sizeof(buf));
		      if (advance == -1)
                            ND_PRINT((ndo, ""\n\t    (illegal prefix length)""));
                        else if (advance == -2)
                            goto trunc;
                        else
                            ND_PRINT((ndo, ""\n\t      %s"", buf));
		       break;
                    case (AFNUM_INET6<<8 | SAFNUM_UNICAST):
                    case (AFNUM_INET6<<8 | SAFNUM_MULTICAST):
                    case (AFNUM_INET6<<8 | SAFNUM_UNIMULTICAST):
                        advance = decode_prefix6(ndo, tptr, len, buf, sizeof(buf));
                        if (advance == -1)
                            ND_PRINT((ndo, ""\n\t    (illegal prefix length)""));
                        else if (advance == -2)
                            goto trunc;
                        else if (advance == -3)
                            break; /* bytes left, but not enough */
                        else
                            ND_PRINT((ndo, ""\n\t      %s"", buf));
                        break;
                    case (AFNUM_INET6<<8 | SAFNUM_LABUNICAST):
                        advance = decode_labeled_prefix6(ndo, tptr, len, buf, sizeof(buf));
                        if (advance == -1)
                            ND_PRINT((ndo, ""\n\t    (illegal prefix length)""));
                        else if (advance == -2)
                            goto trunc;
                        else if (advance == -3)
                            break; /* bytes left, but not enough */
                        else
                            ND_PRINT((ndo, ""\n\t      %s"", buf));
                        break;
                    case (AFNUM_INET6<<8 | SAFNUM_VPNUNICAST):
                    case (AFNUM_INET6<<8 | SAFNUM_VPNMULTICAST):
                    case (AFNUM_INET6<<8 | SAFNUM_VPNUNIMULTICAST):
                        advance = decode_labeled_vpn_prefix6(ndo, tptr, buf, sizeof(buf));
                        if (advance == -1)
                            ND_PRINT((ndo, ""\n\t    (illegal prefix length)""));
                        else if (advance == -2)
                            goto trunc;
                        else
                            ND_PRINT((ndo, ""\n\t      %s"", buf));
                        break;
                    case (AFNUM_VPLS<<8 | SAFNUM_VPLS):
                    case (AFNUM_L2VPN<<8 | SAFNUM_VPNUNICAST):
                    case (AFNUM_L2VPN<<8 | SAFNUM_VPNMULTICAST):
                    case (AFNUM_L2VPN<<8 | SAFNUM_VPNUNIMULTICAST):
                        advance = decode_labeled_vpn_l2(ndo, tptr, buf, sizeof(buf));
                        if (advance == -1)
                            ND_PRINT((ndo, ""\n\t    (illegal length)""));
                        else if (advance == -2)
                            goto trunc;
                        else
                            ND_PRINT((ndo, ""\n\t      %s"", buf));
                        break;
                    case (AFNUM_NSAP<<8 | SAFNUM_UNICAST):
                    case (AFNUM_NSAP<<8 | SAFNUM_MULTICAST):
                    case (AFNUM_NSAP<<8 | SAFNUM_UNIMULTICAST):
                        advance = decode_clnp_prefix(ndo, tptr, buf, sizeof(buf));
                        if (advance == -1)
                            ND_PRINT((ndo, ""\n\t    (illegal prefix length)""));
                        else if (advance == -2)
                            goto trunc;
                        else
                            ND_PRINT((ndo, ""\n\t      %s"", buf));
                        break;
                    case (AFNUM_NSAP<<8 | SAFNUM_VPNUNICAST):
                    case (AFNUM_NSAP<<8 | SAFNUM_VPNMULTICAST):
                    case (AFNUM_NSAP<<8 | SAFNUM_VPNUNIMULTICAST):
                        advance = decode_labeled_vpn_clnp_prefix(ndo, tptr, buf, sizeof(buf));
                        if (advance == -1)
                            ND_PRINT((ndo, ""\n\t    (illegal prefix length)""));
                        else if (advance == -2)
                            goto trunc;
                        else
                            ND_PRINT((ndo, ""\n\t      %s"", buf));
                        break;
                    default:
                        ND_TCHECK2(*tptr,tlen);
                        ND_PRINT((ndo, ""\n\t    no AFI %u / SAFI %u decoder"", af, safi));
                        if (ndo->ndo_vflag <= 1)
                            print_unknown_data(ndo, tptr, ""\n\t    "", tlen);
                        advance = 0;
                        tptr = pptr + len;
                        break;
                    }
                    if (advance < 0)
                        break;
                    tptr += advance;
		}
        done:
		break;

	case BGPTYPE_MP_UNREACH_NLRI:
		ND_TCHECK2(tptr[0], BGP_MP_NLRI_MINSIZE);
		af = EXTRACT_16BITS(tptr);
		safi = tptr[2];

                ND_PRINT((ndo, ""\n\t    AFI: %s (%u), %sSAFI: %s (%u)"",
                       tok2str(af_values, ""Unknown AFI"", af),
                       af,
                       (safi>128) ? ""vendor specific "" : """", /* 128 is meanwhile wellknown */
                       tok2str(bgp_safi_values, ""Unknown SAFI"", safi),
                       safi));

                if (len == BGP_MP_NLRI_MINSIZE)
                    ND_PRINT((ndo, ""\n\t      End-of-Rib Marker (empty NLRI)""));

		tptr += 3;

		while (tptr < pptr + len) {
                    switch (af<<8 | safi) {
                    case (AFNUM_INET<<8 | SAFNUM_UNICAST):
                    case (AFNUM_INET<<8 | SAFNUM_MULTICAST):
                    case (AFNUM_INET<<8 | SAFNUM_UNIMULTICAST):
                        advance = decode_prefix4(ndo, tptr, len, buf, sizeof(buf));
                        if (advance == -1)
                            ND_PRINT((ndo, ""\n\t    (illegal prefix length)""));
                        else if (advance == -2)
                            goto trunc;
                        else if (advance == -3)
                            break; /* bytes left, but not enough */
                        else
                            ND_PRINT((ndo, ""\n\t      %s"", buf));
                        break;
                    case (AFNUM_INET<<8 | SAFNUM_LABUNICAST):
                        advance = decode_labeled_prefix4(ndo, tptr, len, buf, sizeof(buf));
                        if (advance == -1)
                            ND_PRINT((ndo, ""\n\t    (illegal prefix length)""));
                        else if (advance == -2)
                            goto trunc;
                        else if (advance == -3)
                            break; /* bytes left, but not enough */
                        else
                            ND_PRINT((ndo, ""\n\t      %s"", buf));
                        break;
                    case (AFNUM_INET<<8 | SAFNUM_VPNUNICAST):
                    case (AFNUM_INET<<8 | SAFNUM_VPNMULTICAST):
                    case (AFNUM_INET<<8 | SAFNUM_VPNUNIMULTICAST):
                        advance = decode_labeled_vpn_prefix4(ndo, tptr, buf, sizeof(buf));
                        if (advance == -1)
                            ND_PRINT((ndo, ""\n\t    (illegal prefix length)""));
                        else if (advance == -2)
                            goto trunc;
                        else
                            ND_PRINT((ndo, ""\n\t      %s"", buf));
                        break;
                    case (AFNUM_INET6<<8 | SAFNUM_UNICAST):
                    case (AFNUM_INET6<<8 | SAFNUM_MULTICAST):
                    case (AFNUM_INET6<<8 | SAFNUM_UNIMULTICAST):
                        advance = decode_prefix6(ndo, tptr, len, buf, sizeof(buf));
                        if (advance == -1)
                            ND_PRINT((ndo, ""\n\t    (illegal prefix length)""));
                        else if (advance == -2)
                            goto trunc;
                        else if (advance == -3)
                            break; /* bytes left, but not enough */
                        else
                            ND_PRINT((ndo, ""\n\t      %s"", buf));
                        break;
                    case (AFNUM_INET6<<8 | SAFNUM_LABUNICAST):
                        advance = decode_labeled_prefix6(ndo, tptr, len, buf, sizeof(buf));
                        if (advance == -1)
                            ND_PRINT((ndo, ""\n\t    (illegal prefix length)""));
                        else if (advance == -2)
                            goto trunc;
                        else if (advance == -3)
                            break; /* bytes left, but not enough */
                        else
                            ND_PRINT((ndo, ""\n\t      %s"", buf));
                        break;
                    case (AFNUM_INET6<<8 | SAFNUM_VPNUNICAST):
                    case (AFNUM_INET6<<8 | SAFNUM_VPNMULTICAST):
                    case (AFNUM_INET6<<8 | SAFNUM_VPNUNIMULTICAST):
                        advance = decode_labeled_vpn_prefix6(ndo, tptr, buf, sizeof(buf));
                        if (advance == -1)
                            ND_PRINT((ndo, ""\n\t    (illegal prefix length)""));
                        else if (advance == -2)
                            goto trunc;
                        else
                            ND_PRINT((ndo, ""\n\t      %s"", buf));
                        break;
                    case (AFNUM_VPLS<<8 | SAFNUM_VPLS):
                    case (AFNUM_L2VPN<<8 | SAFNUM_VPNUNICAST):
                    case (AFNUM_L2VPN<<8 | SAFNUM_VPNMULTICAST):
                    case (AFNUM_L2VPN<<8 | SAFNUM_VPNUNIMULTICAST):
                        advance = decode_labeled_vpn_l2(ndo, tptr, buf, sizeof(buf));
                        if (advance == -1)
                            ND_PRINT((ndo, ""\n\t    (illegal length)""));
                        else if (advance == -2)
                            goto trunc;
                        else
                            ND_PRINT((ndo, ""\n\t      %s"", buf));
                        break;
                    case (AFNUM_NSAP<<8 | SAFNUM_UNICAST):
                    case (AFNUM_NSAP<<8 | SAFNUM_MULTICAST):
                    case (AFNUM_NSAP<<8 | SAFNUM_UNIMULTICAST):
                        advance = decode_clnp_prefix(ndo, tptr, buf, sizeof(buf));
                        if (advance == -1)
                            ND_PRINT((ndo, ""\n\t    (illegal prefix length)""));
                        else if (advance == -2)
                            goto trunc;
                        else
                            ND_PRINT((ndo, ""\n\t      %s"", buf));
                        break;
                    case (AFNUM_NSAP<<8 | SAFNUM_VPNUNICAST):
                    case (AFNUM_NSAP<<8 | SAFNUM_VPNMULTICAST):
                    case (AFNUM_NSAP<<8 | SAFNUM_VPNUNIMULTICAST):
                        advance = decode_labeled_vpn_clnp_prefix(ndo, tptr, buf, sizeof(buf));
                        if (advance == -1)
                            ND_PRINT((ndo, ""\n\t    (illegal prefix length)""));
                        else if (advance == -2)
                            goto trunc;
                        else
                            ND_PRINT((ndo, ""\n\t      %s"", buf));
                        break;
		    case (AFNUM_INET<<8 | SAFNUM_MDT):
		      advance = decode_mdt_vpn_nlri(ndo, tptr, buf, sizeof(buf));
		      if (advance == -1)
                            ND_PRINT((ndo, ""\n\t    (illegal prefix length)""));
                        else if (advance == -2)
                            goto trunc;
                        else
                            ND_PRINT((ndo, ""\n\t      %s"", buf));
		       break;
                    case (AFNUM_INET<<8 | SAFNUM_MULTICAST_VPN): /* fall through */
                    case (AFNUM_INET6<<8 | SAFNUM_MULTICAST_VPN):
                        advance = decode_multicast_vpn(ndo, tptr, buf, sizeof(buf));
                        if (advance == -1)
                            ND_PRINT((ndo, ""\n\t    (illegal prefix length)""));
                        else if (advance == -2)
                            goto trunc;
                        else
                            ND_PRINT((ndo, ""\n\t      %s"", buf));
                        break;
                    default:
                        ND_TCHECK2(*(tptr-3),tlen);
                        ND_PRINT((ndo, ""no AFI %u / SAFI %u decoder"", af, safi));
                        if (ndo->ndo_vflag <= 1)
                            print_unknown_data(ndo, tptr-3, ""\n\t    "", tlen);
                        advance = 0;
                        tptr = pptr + len;
                        break;
                    }
                    if (advance < 0)
                        break;
                    tptr += advance;
		}
		break;
        case BGPTYPE_EXTD_COMMUNITIES:
		if (len % 8) {
			ND_PRINT((ndo, ""invalid len""));
			break;
		}
                while (tlen>0) {
                    uint16_t extd_comm;

                    ND_TCHECK2(tptr[0], 2);
                    extd_comm=EXTRACT_16BITS(tptr);

		    ND_PRINT((ndo, ""\n\t    %s (0x%04x), Flags [%s]"",
			   tok2str(bgp_extd_comm_subtype_values,
				      ""unknown extd community typecode"",
				      extd_comm),
			   extd_comm,
			   bittok2str(bgp_extd_comm_flag_values, ""none"", extd_comm)));

                    ND_TCHECK2(*(tptr+2), 6);
                    switch(extd_comm) {
                    case BGP_EXT_COM_RT_0:
                    case BGP_EXT_COM_RO_0:
                    case BGP_EXT_COM_L2VPN_RT_0:
                        ND_PRINT((ndo, "": %u:%u (= %s)"",
                               EXTRACT_16BITS(tptr+2),
                               EXTRACT_32BITS(tptr+4),
                               ipaddr_string(ndo, tptr+4)));
                        break;
                    case BGP_EXT_COM_RT_1:
                    case BGP_EXT_COM_RO_1:
                    case BGP_EXT_COM_L2VPN_RT_1:
                    case BGP_EXT_COM_VRF_RT_IMP:
                        ND_PRINT((ndo, "": %s:%u"",
                               ipaddr_string(ndo, tptr+2),
                               EXTRACT_16BITS(tptr+6)));
                        break;
                    case BGP_EXT_COM_RT_2:
                    case BGP_EXT_COM_RO_2:
			ND_PRINT((ndo, "": %s:%u"",
			    as_printf(ndo, astostr, sizeof(astostr),
			    EXTRACT_32BITS(tptr+2)), EXTRACT_16BITS(tptr+6)));
			break;
                    case BGP_EXT_COM_LINKBAND:
		        bw.i = EXTRACT_32BITS(tptr+2);
                        ND_PRINT((ndo, "": bandwidth: %.3f Mbps"",
                               bw.f*8/1000000));
                        break;
                    case BGP_EXT_COM_VPN_ORIGIN:
                    case BGP_EXT_COM_VPN_ORIGIN2:
                    case BGP_EXT_COM_VPN_ORIGIN3:
                    case BGP_EXT_COM_VPN_ORIGIN4:
                    case BGP_EXT_COM_OSPF_RID:
                    case BGP_EXT_COM_OSPF_RID2:
                        ND_PRINT((ndo, ""%s"", ipaddr_string(ndo, tptr+2)));
                        break;
                    case BGP_EXT_COM_OSPF_RTYPE:
                    case BGP_EXT_COM_OSPF_RTYPE2:
                        ND_PRINT((ndo, "": area:%s, router-type:%s, metric-type:%s%s"",
                               ipaddr_string(ndo, tptr+2),
                               tok2str(bgp_extd_comm_ospf_rtype_values,
					  ""unknown (0x%02x)"",
					  *(tptr+6)),
                               (*(tptr+7) &  BGP_OSPF_RTYPE_METRIC_TYPE) ? ""E2"" : """",
                               ((*(tptr+6) == BGP_OSPF_RTYPE_EXT) || (*(tptr+6) == BGP_OSPF_RTYPE_NSSA)) ? ""E1"" : """"));
                        break;
                    case BGP_EXT_COM_L2INFO:
                        ND_PRINT((ndo, "": %s Control Flags [0x%02x]:MTU %u"",
                               tok2str(l2vpn_encaps_values,
					  ""unknown encaps"",
					  *(tptr+2)),
                                       *(tptr+3),
                               EXTRACT_16BITS(tptr+4)));
                        break;
                    case BGP_EXT_COM_SOURCE_AS:
                        ND_PRINT((ndo, "": AS %u"", EXTRACT_16BITS(tptr+2)));
                        break;
                    default:
                        ND_TCHECK2(*tptr,8);
                        print_unknown_data(ndo, tptr, ""\n\t      "", 8);
                        break;
                    }
                    tlen -=8;
                    tptr +=8;
                }
                break;

        case BGPTYPE_PMSI_TUNNEL:
        {
                uint8_t tunnel_type, flags;

                ND_TCHECK2(tptr[0], 5);
                tunnel_type = *(tptr+1);
                flags = *tptr;
                tlen = len;

                ND_PRINT((ndo, ""\n\t    Tunnel-type %s (%u), Flags [%s], MPLS Label %u"",
                       tok2str(bgp_pmsi_tunnel_values, ""Unknown"", tunnel_type),
                       tunnel_type,
                       bittok2str(bgp_pmsi_flag_values, ""none"", flags),
                       EXTRACT_24BITS(tptr+2)>>4));

                tptr +=5;
                tlen -= 5;

                switch (tunnel_type) {
                case BGP_PMSI_TUNNEL_PIM_SM: /* fall through */
                case BGP_PMSI_TUNNEL_PIM_BIDIR:
                    ND_TCHECK2(tptr[0], 8);
                    ND_PRINT((ndo, ""\n\t      Sender %s, P-Group %s"",
                           ipaddr_string(ndo, tptr),
                           ipaddr_string(ndo, tptr+4)));
                    break;

                case BGP_PMSI_TUNNEL_PIM_SSM:
                    ND_TCHECK2(tptr[0], 8);
                    ND_PRINT((ndo, ""\n\t      Root-Node %s, P-Group %s"",
                           ipaddr_string(ndo, tptr),
                           ipaddr_string(ndo, tptr+4)));
                    break;
                case BGP_PMSI_TUNNEL_INGRESS:
                    ND_TCHECK2(tptr[0], 4);
                    ND_PRINT((ndo, ""\n\t      Tunnel-Endpoint %s"",
                           ipaddr_string(ndo, tptr)));
                    break;
                case BGP_PMSI_TUNNEL_LDP_P2MP: /* fall through */
                case BGP_PMSI_TUNNEL_LDP_MP2MP:
                    ND_TCHECK2(tptr[0], 8);
                    ND_PRINT((ndo, ""\n\t      Root-Node %s, LSP-ID 0x%08x"",
                           ipaddr_string(ndo, tptr),
                           EXTRACT_32BITS(tptr+4)));
                    break;
                case BGP_PMSI_TUNNEL_RSVP_P2MP:
                    ND_TCHECK2(tptr[0], 8);
                    ND_PRINT((ndo, ""\n\t      Extended-Tunnel-ID %s, P2MP-ID 0x%08x"",
                           ipaddr_string(ndo, tptr),
                           EXTRACT_32BITS(tptr+4)));
                    break;
                default:
                    if (ndo->ndo_vflag <= 1) {
                        print_unknown_data(ndo, tptr, ""\n\t      "", tlen);
                    }
                }
                break;
        }
	case BGPTYPE_AIGP:
	{
		uint8_t type;
		uint16_t length;

		tlen = len;

		while (tlen >= 3) {

		    ND_TCHECK2(tptr[0], 3);

		    type = *tptr;
		    length = EXTRACT_16BITS(tptr+1);
		    tptr += 3;
		    tlen -= 3;

		    ND_PRINT((ndo, ""\n\t    %s TLV (%u), length %u"",
			      tok2str(bgp_aigp_values, ""Unknown"", type),
			      type, length));

		    if (length < 3)
			goto trunc;
		    length -= 3;

		    /*
		     * Check if we can read the TLV data.
		     */
		    ND_TCHECK2(tptr[3], length);

		    switch (type) {

		    case BGP_AIGP_TLV:
		        if (length < 8)
		            goto trunc;
			ND_PRINT((ndo, "", metric %"" PRIu64,
				  EXTRACT_64BITS(tptr)));
			break;

		    default:
			if (ndo->ndo_vflag <= 1) {
			    print_unknown_data(ndo, tptr,""\n\t      "", length);
			}
		    }

		    tptr += length;
		    tlen -= length;
		}
		break;
	}
        case BGPTYPE_ATTR_SET:
                ND_TCHECK2(tptr[0], 4);
                if (len < 4)
                	goto trunc;
		ND_PRINT((ndo, ""\n\t    Origin AS: %s"",
		    as_printf(ndo, astostr, sizeof(astostr), EXTRACT_32BITS(tptr))));
		tptr+=4;
                len -=4;

                while (len) {
                    u_int aflags, alenlen, alen;

                    ND_TCHECK2(tptr[0], 2);
                    if (len < 2)
                        goto trunc;
                    aflags = *tptr;
                    atype = *(tptr + 1);
                    tptr += 2;
                    len -= 2;
                    alenlen = bgp_attr_lenlen(aflags, tptr);
                    ND_TCHECK2(tptr[0], alenlen);
                    if (len < alenlen)
                        goto trunc;
                    alen = bgp_attr_len(aflags, tptr);
                    tptr += alenlen;
                    len -= alenlen;

                    ND_PRINT((ndo, ""\n\t      %s (%u), length: %u"",
                           tok2str(bgp_attr_values,
                                      ""Unknown Attribute"", atype),
                           atype,
                           alen));

                    if (aflags) {
                        ND_PRINT((ndo, "", Flags [%s%s%s%s"",
                               aflags & 0x80 ? ""O"" : """",
                               aflags & 0x40 ? ""T"" : """",
                               aflags & 0x20 ? ""P"" : """",
                               aflags & 0x10 ? ""E"" : """"));
                        if (aflags & 0xf)
                             ND_PRINT((ndo, ""+%x"", aflags & 0xf));
                         ND_PRINT((ndo, ""]: ""));
                     }
//flaw_line_below:
                    /* FIXME check for recursion */
//flaw_line_below:
                    if (!bgp_attr_print(ndo, atype, tptr, alen))
//fix_flaw_line_below:
//                    /* The protocol encoding per se allows ATTR_SET to be nested as many times
//fix_flaw_line_below:
//                     * as the message can accommodate. This printer used to be able to recurse
//fix_flaw_line_below:
//                     * into ATTR_SET contents until the stack exhaustion, but now there is a
//fix_flaw_line_below:
//                     * limit on that (if live protocol exchange goes that many levels deep,
//fix_flaw_line_below:
//                     * something is probably wrong anyway). Feel free to refine this value if
//fix_flaw_line_below:
//                     * you can find the spec with respective normative text.
//fix_flaw_line_below:
//                     */
//fix_flaw_line_below:
//                    if (attr_set_level == 10)
//fix_flaw_line_below:
//                        ND_PRINT((ndo, ""(too many nested levels, not recursing)""));
//fix_flaw_line_below:
//                    else if (!bgp_attr_print(ndo, atype, tptr, alen, attr_set_level + 1))
                         return 0;
                     tptr += alen;
                     len -= alen;
		}
                break;

	case BGPTYPE_LARGE_COMMUNITY:
		if (len == 0 || len % 12) {
			ND_PRINT((ndo, ""invalid len""));
			break;
		}
		ND_PRINT((ndo, ""\n\t    ""));
		while (len > 0) {
			ND_TCHECK2(*tptr, 12);
			ND_PRINT((ndo, ""%u:%u:%u%s"",
				 EXTRACT_32BITS(tptr),
				 EXTRACT_32BITS(tptr + 4),
				 EXTRACT_32BITS(tptr + 8),
				 (len > 12) ? "", "" : """"));
                        tptr += 12;
                        len -= 12;
		}
		break;
	default:
	    ND_TCHECK2(*pptr,len);
            ND_PRINT((ndo, ""\n\t    no Attribute %u decoder"", atype)); /* we have no decoder for the attribute */
            if (ndo->ndo_vflag <= 1)
                print_unknown_data(ndo, pptr, ""\n\t    "", len);
            break;
	}
        if (ndo->ndo_vflag > 1 && len) { /* omit zero length attributes*/
            ND_TCHECK2(*pptr,len);
            print_unknown_data(ndo, pptr, ""\n\t    "", len);
        }
        return 1;

trunc:
        return 0;
}
"
5253,182989,,Remote,Not required,Partial,CVE-2018-16300,https://www.cvedetails.com/cve/CVE-2018-16300/,CWE-674,Low,,,,2019-10-03,5.0,The BGP parser in tcpdump before 4.9.3 allows stack consumption in print-bgp.c:bgp_attr_print() because of unlimited recursion.,2019-10-11,,1,https://github.com/the-tcpdump-group/tcpdump/commit/af2cf04a9394c1a56227c2289ae8da262828294a,af2cf04a9394c1a56227c2289ae8da262828294a,"(for 4.9.3) CVE-2018-16300/BGP: prevent stack exhaustion

Enforce a limit on how many times bgp_attr_print() can recurse.

This fixes a stack exhaustion discovered by Include Security working
under the Mozilla SOS program in 2018 by means of code audit.",1,print-bgp.c,"{""sha"": ""7db3c6bb0f93931a2cdddae9ff55cdf544dac2f5"", ""filename"": ""print-bgp.c"", ""status"": ""modified"", ""additions"": 12, ""deletions"": 4, ""changes"": 16, ""blob_url"": ""https://github.com/the-tcpdump-group/tcpdump/blob/af2cf04a9394c1a56227c2289ae8da262828294a/print-bgp.c"", ""raw_url"": ""https://github.com/the-tcpdump-group/tcpdump/raw/af2cf04a9394c1a56227c2289ae8da262828294a/print-bgp.c"", ""contents_url"": ""https://api.github.com/repos/the-tcpdump-group/tcpdump/contents/print-bgp.c?ref=af2cf04a9394c1a56227c2289ae8da262828294a"", ""patch"": ""@@ -1361,7 +1361,7 @@ bgp_attr_get_as_size(netdissect_options *ndo,\n \n static int\n bgp_attr_print(netdissect_options *ndo,\n-               u_int atype, const u_char *pptr, u_int len)\n+               u_int atype, const u_char *pptr, u_int len, const unsigned attr_set_level)\n {\n \tint i;\n \tuint16_t af;\n@@ -2284,8 +2284,16 @@ bgp_attr_print(netdissect_options *ndo,\n                             ND_PRINT((ndo, \""+%x\"", aflags & 0xf));\n                         ND_PRINT((ndo, \""]: \""));\n                     }\n-                    /* FIXME check for recursion */\n-                    if (!bgp_attr_print(ndo, atype, tptr, alen))\n+                    /* The protocol encoding per se allows ATTR_SET to be nested as many times\n+                     * as the message can accommodate. This printer used to be able to recurse\n+                     * into ATTR_SET contents until the stack exhaustion, but now there is a\n+                     * limit on that (if live protocol exchange goes that many levels deep,\n+                     * something is probably wrong anyway). Feel free to refine this value if\n+                     * you can find the spec with respective normative text.\n+                     */\n+                    if (attr_set_level == 10)\n+                        ND_PRINT((ndo, \""(too many nested levels, not recursing)\""));\n+                    else if (!bgp_attr_print(ndo, atype, tptr, alen, attr_set_level + 1))\n                         return 0;\n                     tptr += alen;\n                     len -= alen;\n@@ -2592,7 +2600,7 @@ bgp_update_print(netdissect_options *ndo,\n \t\t\t\tgoto trunc;\n \t\t\tif (length < alen)\n \t\t\t\tgoto trunc;\n-\t\t\tif (!bgp_attr_print(ndo, atype, p, alen))\n+\t\t\tif (!bgp_attr_print(ndo, atype, p, alen, 0))\n \t\t\t\tgoto trunc;\n \t\t\tp += alen;\n \t\t\tlen -= alen;""}","bgp_update_print(netdissect_options *ndo,
                 const u_char *dat, int length)
{
	struct bgp bgp;
	const u_char *p;
	int withdrawn_routes_len;
	int len;
	int i;

	ND_TCHECK2(dat[0], BGP_SIZE);
	if (length < BGP_SIZE)
		goto trunc;
	memcpy(&bgp, dat, BGP_SIZE);
	p = dat + BGP_SIZE;	/*XXX*/
	length -= BGP_SIZE;

	/* Unfeasible routes */
	ND_TCHECK2(p[0], 2);
	if (length < 2)
		goto trunc;
	withdrawn_routes_len = EXTRACT_16BITS(p);
	p += 2;
	length -= 2;
	if (withdrawn_routes_len) {
		/*
		 * Without keeping state from the original NLRI message,
		 * it's not possible to tell if this a v4 or v6 route,
		 * so only try to decode it if we're not v6 enabled.
	         */
		ND_TCHECK2(p[0], withdrawn_routes_len);
		if (length < withdrawn_routes_len)
			goto trunc;
		ND_PRINT((ndo, ""\n\t  Withdrawn routes: %d bytes"", withdrawn_routes_len));
		p += withdrawn_routes_len;
		length -= withdrawn_routes_len;
	}

	ND_TCHECK2(p[0], 2);
	if (length < 2)
		goto trunc;
	len = EXTRACT_16BITS(p);
	p += 2;
	length -= 2;

        if (withdrawn_routes_len == 0 && len == 0 && length == 0) {
            /* No withdrawn routes, no path attributes, no NLRI */
            ND_PRINT((ndo, ""\n\t  End-of-Rib Marker (empty NLRI)""));
            return;
        }

	if (len) {
		/* do something more useful!*/
		while (len) {
			int aflags, atype, alenlen, alen;

			ND_TCHECK2(p[0], 2);
			if (len < 2)
			    goto trunc;
			if (length < 2)
			    goto trunc;
			aflags = *p;
			atype = *(p + 1);
			p += 2;
			len -= 2;
			length -= 2;
			alenlen = bgp_attr_lenlen(aflags, p);
			ND_TCHECK2(p[0], alenlen);
			if (len < alenlen)
			    goto trunc;
			if (length < alenlen)
			    goto trunc;
			alen = bgp_attr_len(aflags, p);
			p += alenlen;
			len -= alenlen;
			length -= alenlen;

			ND_PRINT((ndo, ""\n\t  %s (%u), length: %u"",
                              tok2str(bgp_attr_values, ""Unknown Attribute"",
					 atype),
                              atype,
                              alen));

			if (aflags) {
				ND_PRINT((ndo, "", Flags [%s%s%s%s"",
					aflags & 0x80 ? ""O"" : """",
					aflags & 0x40 ? ""T"" : """",
					aflags & 0x20 ? ""P"" : """",
					aflags & 0x10 ? ""E"" : """"));
				if (aflags & 0xf)
					ND_PRINT((ndo, ""+%x"", aflags & 0xf));
				ND_PRINT((ndo, ""]: ""));
			}
			if (len < alen)
 				goto trunc;
 			if (length < alen)
 				goto trunc;
			if (!bgp_attr_print(ndo, atype, p, alen, 0))
 				goto trunc;
 			p += alen;
 			len -= alen;
			length -= alen;
		}
	}

	if (length) {
		/*
		 * XXX - what if they're using the ""Advertisement of
		 * Multiple Paths in BGP"" feature:
		 *
		 * https://datatracker.ietf.org/doc/draft-ietf-idr-add-paths/
		 *
		 * http://tools.ietf.org/html/draft-ietf-idr-add-paths-06
		 */
		ND_PRINT((ndo, ""\n\t  Updated routes:""));
		while (length) {
			char buf[MAXHOSTNAMELEN + 100];
			i = decode_prefix4(ndo, p, length, buf, sizeof(buf));
			if (i == -1) {
				ND_PRINT((ndo, ""\n\t    (illegal prefix length)""));
				break;
			} else if (i == -2)
				goto trunc;
			else if (i == -3)
				goto trunc; /* bytes left, but not enough */
			else {
				ND_PRINT((ndo, ""\n\t    %s"", buf));
				p += i;
				length -= i;
			}
		}
	}
	return;
trunc:
	ND_PRINT((ndo, ""%s"", tstr));
}
","bgp_update_print(netdissect_options *ndo,
                 const u_char *dat, int length)
{
	struct bgp bgp;
	const u_char *p;
	int withdrawn_routes_len;
	int len;
	int i;

	ND_TCHECK2(dat[0], BGP_SIZE);
	if (length < BGP_SIZE)
		goto trunc;
	memcpy(&bgp, dat, BGP_SIZE);
	p = dat + BGP_SIZE;	/*XXX*/
	length -= BGP_SIZE;

	/* Unfeasible routes */
	ND_TCHECK2(p[0], 2);
	if (length < 2)
		goto trunc;
	withdrawn_routes_len = EXTRACT_16BITS(p);
	p += 2;
	length -= 2;
	if (withdrawn_routes_len) {
		/*
		 * Without keeping state from the original NLRI message,
		 * it's not possible to tell if this a v4 or v6 route,
		 * so only try to decode it if we're not v6 enabled.
	         */
		ND_TCHECK2(p[0], withdrawn_routes_len);
		if (length < withdrawn_routes_len)
			goto trunc;
		ND_PRINT((ndo, ""\n\t  Withdrawn routes: %d bytes"", withdrawn_routes_len));
		p += withdrawn_routes_len;
		length -= withdrawn_routes_len;
	}

	ND_TCHECK2(p[0], 2);
	if (length < 2)
		goto trunc;
	len = EXTRACT_16BITS(p);
	p += 2;
	length -= 2;

        if (withdrawn_routes_len == 0 && len == 0 && length == 0) {
            /* No withdrawn routes, no path attributes, no NLRI */
            ND_PRINT((ndo, ""\n\t  End-of-Rib Marker (empty NLRI)""));
            return;
        }

	if (len) {
		/* do something more useful!*/
		while (len) {
			int aflags, atype, alenlen, alen;

			ND_TCHECK2(p[0], 2);
			if (len < 2)
			    goto trunc;
			if (length < 2)
			    goto trunc;
			aflags = *p;
			atype = *(p + 1);
			p += 2;
			len -= 2;
			length -= 2;
			alenlen = bgp_attr_lenlen(aflags, p);
			ND_TCHECK2(p[0], alenlen);
			if (len < alenlen)
			    goto trunc;
			if (length < alenlen)
			    goto trunc;
			alen = bgp_attr_len(aflags, p);
			p += alenlen;
			len -= alenlen;
			length -= alenlen;

			ND_PRINT((ndo, ""\n\t  %s (%u), length: %u"",
                              tok2str(bgp_attr_values, ""Unknown Attribute"",
					 atype),
                              atype,
                              alen));

			if (aflags) {
				ND_PRINT((ndo, "", Flags [%s%s%s%s"",
					aflags & 0x80 ? ""O"" : """",
					aflags & 0x40 ? ""T"" : """",
					aflags & 0x20 ? ""P"" : """",
					aflags & 0x10 ? ""E"" : """"));
				if (aflags & 0xf)
					ND_PRINT((ndo, ""+%x"", aflags & 0xf));
				ND_PRINT((ndo, ""]: ""));
			}
			if (len < alen)
 				goto trunc;
 			if (length < alen)
 				goto trunc;
			if (!bgp_attr_print(ndo, atype, p, alen))
 				goto trunc;
 			p += alen;
 			len -= alen;
			length -= alen;
		}
	}

	if (length) {
		/*
		 * XXX - what if they're using the ""Advertisement of
		 * Multiple Paths in BGP"" feature:
		 *
		 * https://datatracker.ietf.org/doc/draft-ietf-idr-add-paths/
		 *
		 * http://tools.ietf.org/html/draft-ietf-idr-add-paths-06
		 */
		ND_PRINT((ndo, ""\n\t  Updated routes:""));
		while (length) {
			char buf[MAXHOSTNAMELEN + 100];
			i = decode_prefix4(ndo, p, length, buf, sizeof(buf));
			if (i == -1) {
				ND_PRINT((ndo, ""\n\t    (illegal prefix length)""));
				break;
			} else if (i == -2)
				goto trunc;
			else if (i == -3)
				goto trunc; /* bytes left, but not enough */
			else {
				ND_PRINT((ndo, ""\n\t    %s"", buf));
				p += i;
				length -= i;
			}
		}
	}
	return;
trunc:
	ND_PRINT((ndo, ""%s"", tstr));
}
",C,"			if (!bgp_attr_print(ndo, atype, p, alen, 0))
","			if (!bgp_attr_print(ndo, atype, p, alen))
",,"@@ -1361,7 +1361,7 @@ bgp_attr_get_as_size(netdissect_options *ndo,
 
 static int
 bgp_attr_print(netdissect_options *ndo,
-               u_int atype, const u_char *pptr, u_int len)
+               u_int atype, const u_char *pptr, u_int len, const unsigned attr_set_level)
 {
 	int i;
 	uint16_t af;
@@ -2284,8 +2284,16 @@ bgp_attr_print(netdissect_options *ndo,
                             ND_PRINT((ndo, ""+%x"", aflags & 0xf));
                         ND_PRINT((ndo, ""]: ""));
                     }
-                    /* FIXME check for recursion */
-                    if (!bgp_attr_print(ndo, atype, tptr, alen))
+                    /* The protocol encoding per se allows ATTR_SET to be nested as many times
+                     * as the message can accommodate. This printer used to be able to recurse
+                     * into ATTR_SET contents until the stack exhaustion, but now there is a
+                     * limit on that (if live protocol exchange goes that many levels deep,
+                     * something is probably wrong anyway). Feel free to refine this value if
+                     * you can find the spec with respective normative text.
+                     */
+                    if (attr_set_level == 10)
+                        ND_PRINT((ndo, ""(too many nested levels, not recursing)""));
+                    else if (!bgp_attr_print(ndo, atype, tptr, alen, attr_set_level + 1))
                         return 0;
                     tptr += alen;
                     len -= alen;
@@ -2592,7 +2600,7 @@ bgp_update_print(netdissect_options *ndo,
 				goto trunc;
 			if (length < alen)
 				goto trunc;
-			if (!bgp_attr_print(ndo, atype, p, alen))
+			if (!bgp_attr_print(ndo, atype, p, alen, 0))
 				goto trunc;
 			p += alen;
 			len -= alen;",tcpdump,af2cf04a9394c1a56227c2289ae8da262828294a,4bfd71eee41a1db0647fa4d434841a51b07ec38a,1,"bgp_update_print(netdissect_options *ndo,
                 const u_char *dat, int length)
{
	struct bgp bgp;
	const u_char *p;
	int withdrawn_routes_len;
	int len;
	int i;

	ND_TCHECK2(dat[0], BGP_SIZE);
	if (length < BGP_SIZE)
		goto trunc;
	memcpy(&bgp, dat, BGP_SIZE);
	p = dat + BGP_SIZE;	/*XXX*/
	length -= BGP_SIZE;

	/* Unfeasible routes */
	ND_TCHECK2(p[0], 2);
	if (length < 2)
		goto trunc;
	withdrawn_routes_len = EXTRACT_16BITS(p);
	p += 2;
	length -= 2;
	if (withdrawn_routes_len) {
		/*
		 * Without keeping state from the original NLRI message,
		 * it's not possible to tell if this a v4 or v6 route,
		 * so only try to decode it if we're not v6 enabled.
	         */
		ND_TCHECK2(p[0], withdrawn_routes_len);
		if (length < withdrawn_routes_len)
			goto trunc;
		ND_PRINT((ndo, ""\n\t  Withdrawn routes: %d bytes"", withdrawn_routes_len));
		p += withdrawn_routes_len;
		length -= withdrawn_routes_len;
	}

	ND_TCHECK2(p[0], 2);
	if (length < 2)
		goto trunc;
	len = EXTRACT_16BITS(p);
	p += 2;
	length -= 2;

        if (withdrawn_routes_len == 0 && len == 0 && length == 0) {
            /* No withdrawn routes, no path attributes, no NLRI */
            ND_PRINT((ndo, ""\n\t  End-of-Rib Marker (empty NLRI)""));
            return;
        }

	if (len) {
		/* do something more useful!*/
		while (len) {
			int aflags, atype, alenlen, alen;

			ND_TCHECK2(p[0], 2);
			if (len < 2)
			    goto trunc;
			if (length < 2)
			    goto trunc;
			aflags = *p;
			atype = *(p + 1);
			p += 2;
			len -= 2;
			length -= 2;
			alenlen = bgp_attr_lenlen(aflags, p);
			ND_TCHECK2(p[0], alenlen);
			if (len < alenlen)
			    goto trunc;
			if (length < alenlen)
			    goto trunc;
			alen = bgp_attr_len(aflags, p);
			p += alenlen;
			len -= alenlen;
			length -= alenlen;

			ND_PRINT((ndo, ""\n\t  %s (%u), length: %u"",
                              tok2str(bgp_attr_values, ""Unknown Attribute"",
					 atype),
                              atype,
                              alen));

			if (aflags) {
				ND_PRINT((ndo, "", Flags [%s%s%s%s"",
					aflags & 0x80 ? ""O"" : """",
					aflags & 0x40 ? ""T"" : """",
					aflags & 0x20 ? ""P"" : """",
					aflags & 0x10 ? ""E"" : """"));
				if (aflags & 0xf)
					ND_PRINT((ndo, ""+%x"", aflags & 0xf));
				ND_PRINT((ndo, ""]: ""));
			}
			if (len < alen)
 				goto trunc;
 			if (length < alen)
 				goto trunc;
//flaw_line_below:
			if (!bgp_attr_print(ndo, atype, p, alen))
//fix_flaw_line_below:
//			if (!bgp_attr_print(ndo, atype, p, alen, 0))
 				goto trunc;
 			p += alen;
 			len -= alen;
			length -= alen;
		}
	}

	if (length) {
		/*
		 * XXX - what if they're using the ""Advertisement of
		 * Multiple Paths in BGP"" feature:
		 *
		 * https://datatracker.ietf.org/doc/draft-ietf-idr-add-paths/
		 *
		 * http://tools.ietf.org/html/draft-ietf-idr-add-paths-06
		 */
		ND_PRINT((ndo, ""\n\t  Updated routes:""));
		while (length) {
			char buf[MAXHOSTNAMELEN + 100];
			i = decode_prefix4(ndo, p, length, buf, sizeof(buf));
			if (i == -1) {
				ND_PRINT((ndo, ""\n\t    (illegal prefix length)""));
				break;
			} else if (i == -2)
				goto trunc;
			else if (i == -3)
				goto trunc; /* bytes left, but not enough */
			else {
				ND_PRINT((ndo, ""\n\t    %s"", buf));
				p += i;
				length -= i;
			}
		}
	}
	return;
trunc:
	ND_PRINT((ndo, ""%s"", tstr));
}
"
